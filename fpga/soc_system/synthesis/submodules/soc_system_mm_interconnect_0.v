// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2015.10.08.14:45:12

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        fpga_only_master_clk_reset_reset_bridge_in_reset_reset,           //           fpga_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        onchip_memory2_0_reset1_reset_bridge_in_reset_reset,              //              onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		input  wire [31:0] fpga_only_master_master_address,                                  //                                    fpga_only_master_master.address
		output wire        fpga_only_master_master_waitrequest,                              //                                                           .waitrequest
		input  wire [3:0]  fpga_only_master_master_byteenable,                               //                                                           .byteenable
		input  wire        fpga_only_master_master_read,                                     //                                                           .read
		output wire [31:0] fpga_only_master_master_readdata,                                 //                                                           .readdata
		output wire        fpga_only_master_master_readdatavalid,                            //                                                           .readdatavalid
		input  wire        fpga_only_master_master_write,                                    //                                                           .write
		input  wire [31:0] fpga_only_master_master_writedata,                                //                                                           .writedata
		output wire [1:0]  addr_out_s1_address,                                              //                                                addr_out_s1.address
		output wire        addr_out_s1_write,                                                //                                                           .write
		input  wire [31:0] addr_out_s1_readdata,                                             //                                                           .readdata
		output wire [31:0] addr_out_s1_writedata,                                            //                                                           .writedata
		output wire        addr_out_s1_chipselect,                                           //                                                           .chipselect
		output wire [1:0]  box_addr_s1_address,                                              //                                                box_addr_s1.address
		input  wire [31:0] box_addr_s1_readdata,                                             //                                                           .readdata
		output wire [1:0]  box_n_s1_address,                                                 //                                                   box_n_s1.address
		input  wire [31:0] box_n_s1_readdata,                                                //                                                           .readdata
		output wire [1:0]  box_req_s1_address,                                               //                                                 box_req_s1.address
		output wire        box_req_s1_write,                                                 //                                                           .write
		input  wire [31:0] box_req_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] box_req_s1_writedata,                                             //                                                           .writedata
		output wire        box_req_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]  box_x0_s1_address,                                                //                                                  box_x0_s1.address
		output wire        box_x0_s1_write,                                                  //                                                           .write
		input  wire [31:0] box_x0_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] box_x0_s1_writedata,                                              //                                                           .writedata
		output wire        box_x0_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  box_xn_s1_address,                                                //                                                  box_xn_s1.address
		output wire        box_xn_s1_write,                                                  //                                                           .write
		input  wire [31:0] box_xn_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] box_xn_s1_writedata,                                              //                                                           .writedata
		output wire        box_xn_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  box_y0_s1_address,                                                //                                                  box_y0_s1.address
		output wire        box_y0_s1_write,                                                  //                                                           .write
		input  wire [31:0] box_y0_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] box_y0_s1_writedata,                                              //                                                           .writedata
		output wire        box_y0_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  box_yn_s1_address,                                                //                                                  box_yn_s1.address
		output wire        box_yn_s1_write,                                                  //                                                           .write
		input  wire [31:0] box_yn_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] box_yn_s1_writedata,                                              //                                                           .writedata
		output wire        box_yn_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  con_yark_s1_address,                                              //                                                con_yark_s1.address
		output wire        con_yark_s1_write,                                                //                                                           .write
		input  wire [31:0] con_yark_s1_readdata,                                             //                                                           .readdata
		output wire [31:0] con_yark_s1_writedata,                                            //                                                           .writedata
		output wire        con_yark_s1_chipselect,                                           //                                                           .chipselect
		output wire [1:0]  del_x_s1_address,                                                 //                                                   del_x_s1.address
		output wire        del_x_s1_write,                                                   //                                                           .write
		input  wire [31:0] del_x_s1_readdata,                                                //                                                           .readdata
		output wire [31:0] del_x_s1_writedata,                                               //                                                           .writedata
		output wire        del_x_s1_chipselect,                                              //                                                           .chipselect
		output wire [1:0]  del_y_s1_address,                                                 //                                                   del_y_s1.address
		output wire        del_y_s1_write,                                                   //                                                           .write
		input  wire [31:0] del_y_s1_readdata,                                                //                                                           .readdata
		output wire [31:0] del_y_s1_writedata,                                               //                                                           .writedata
		output wire        del_y_s1_chipselect,                                              //                                                           .chipselect
		output wire [1:0]  dx_corr_s1_address,                                               //                                                 dx_corr_s1.address
		input  wire [31:0] dx_corr_s1_readdata,                                              //                                                           .readdata
		output wire [0:0]  intr_capturer_0_avalon_slave_0_address,                           //                             intr_capturer_0_avalon_slave_0.address
		output wire        intr_capturer_0_avalon_slave_0_read,                              //                                                           .read
		input  wire [31:0] intr_capturer_0_avalon_slave_0_readdata,                          //                                                           .readdata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                              //                                jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                //                                                           .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                 //                                                           .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                             //                                                           .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                            //                                                           .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                          //                                                           .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                           //                                                           .chipselect
		output wire [1:0]  n_fish_s1_address,                                                //                                                  n_fish_s1.address
		output wire        n_fish_s1_write,                                                  //                                                           .write
		input  wire [31:0] n_fish_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] n_fish_s1_writedata,                                              //                                                           .writedata
		output wire        n_fish_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  n_frame_s1_address,                                               //                                                 n_frame_s1.address
		input  wire [31:0] n_frame_s1_readdata,                                              //                                                           .readdata
		output wire [1:0]  n_pix_s1_address,                                                 //                                                   n_pix_s1.address
		output wire        n_pix_s1_write,                                                   //                                                           .write
		input  wire [31:0] n_pix_s1_readdata,                                                //                                                           .readdata
		output wire [31:0] n_pix_s1_writedata,                                               //                                                           .writedata
		output wire        n_pix_s1_chipselect,                                              //                                                           .chipselect
		output wire [12:0] onchip_memory2_0_s1_address,                                      //                                        onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                        //                                                           .write
		input  wire [63:0] onchip_memory2_0_s1_readdata,                                     //                                                           .readdata
		output wire [63:0] onchip_memory2_0_s1_writedata,                                    //                                                           .writedata
		output wire [7:0]  onchip_memory2_0_s1_byteenable,                                   //                                                           .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                                   //                                                           .chipselect
		output wire        onchip_memory2_0_s1_clken,                                        //                                                           .clken
		output wire [1:0]  pio_led_s1_address,                                               //                                                 pio_led_s1.address
		output wire        pio_led_s1_write,                                                 //                                                           .write
		input  wire [31:0] pio_led_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] pio_led_s1_writedata,                                             //                                                           .writedata
		output wire        pio_led_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]  req_res_s1_address,                                               //                                                 req_res_s1.address
		output wire        req_res_s1_write,                                                 //                                                           .write
		input  wire [31:0] req_res_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] req_res_s1_writedata,                                             //                                                           .writedata
		output wire        req_res_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]  reset_cnt_s1_address,                                             //                                               reset_cnt_s1.address
		input  wire [31:0] reset_cnt_s1_readdata,                                            //                                                           .readdata
		output wire [1:0]  sw_mass_s1_address,                                               //                                                 sw_mass_s1.address
		input  wire [31:0] sw_mass_s1_readdata,                                              //                                                           .readdata
		output wire [0:0]  sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,                                //                                                           .readdata
		output wire [1:0]  test_16t_0_s1_address,                                            //                                              test_16t_0_s1.address
		output wire        test_16t_0_s1_write,                                              //                                                           .write
		input  wire [31:0] test_16t_0_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] test_16t_0_s1_writedata,                                          //                                                           .writedata
		output wire        test_16t_0_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]  test_32t_0_s1_address,                                            //                                              test_32t_0_s1.address
		output wire        test_32t_0_s1_write,                                              //                                                           .write
		input  wire [31:0] test_32t_0_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] test_32t_0_s1_writedata,                                          //                                                           .writedata
		output wire        test_32t_0_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]  test_cnt_balls_s1_address,                                        //                                          test_cnt_balls_s1.address
		input  wire [31:0] test_cnt_balls_s1_readdata,                                       //                                                           .readdata
		output wire [1:0]  x1_0_s1_address,                                                  //                                                    x1_0_s1.address
		output wire        x1_0_s1_write,                                                    //                                                           .write
		input  wire [31:0] x1_0_s1_readdata,                                                 //                                                           .readdata
		output wire [31:0] x1_0_s1_writedata,                                                //                                                           .writedata
		output wire        x1_0_s1_chipselect,                                               //                                                           .chipselect
		output wire [1:0]  x2_0_s1_address,                                                  //                                                    x2_0_s1.address
		output wire        x2_0_s1_write,                                                    //                                                           .write
		input  wire [31:0] x2_0_s1_readdata,                                                 //                                                           .readdata
		output wire [31:0] x2_0_s1_writedata,                                                //                                                           .writedata
		output wire        x2_0_s1_chipselect,                                               //                                                           .chipselect
		output wire [1:0]  x_cat_s1_address,                                                 //                                                   x_cat_s1.address
		output wire        x_cat_s1_write,                                                   //                                                           .write
		input  wire [31:0] x_cat_s1_readdata,                                                //                                                           .readdata
		output wire [31:0] x_cat_s1_writedata,                                               //                                                           .writedata
		output wire        x_cat_s1_chipselect,                                              //                                                           .chipselect
		output wire [1:0]  x_max_s1_address,                                                 //                                                   x_max_s1.address
		input  wire [31:0] x_max_s1_readdata,                                                //                                                           .readdata
		output wire [1:0]  x_min_s1_address,                                                 //                                                   x_min_s1.address
		input  wire [31:0] x_min_s1_readdata,                                                //                                                           .readdata
		output wire [1:0]  y1_0_s1_address,                                                  //                                                    y1_0_s1.address
		output wire        y1_0_s1_write,                                                    //                                                           .write
		input  wire [31:0] y1_0_s1_readdata,                                                 //                                                           .readdata
		output wire [31:0] y1_0_s1_writedata,                                                //                                                           .writedata
		output wire        y1_0_s1_chipselect,                                               //                                                           .chipselect
		output wire [1:0]  y2_0_s1_address,                                                  //                                                    y2_0_s1.address
		output wire        y2_0_s1_write,                                                    //                                                           .write
		input  wire [31:0] y2_0_s1_readdata,                                                 //                                                           .readdata
		output wire [31:0] y2_0_s1_writedata,                                                //                                                           .writedata
		output wire        y2_0_s1_chipselect,                                               //                                                           .chipselect
		output wire [1:0]  y_cut_s1_address,                                                 //                                                   y_cut_s1.address
		output wire        y_cut_s1_write,                                                   //                                                           .write
		input  wire [31:0] y_cut_s1_readdata,                                                //                                                           .readdata
		output wire [31:0] y_cut_s1_writedata,                                               //                                                           .writedata
		output wire        y_cut_s1_chipselect                                               //                                                           .chipselect
	);

	wire          rsp_xbar_mux_src_endofpacket;                                                                        // rsp_xbar_mux:src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                              // rsp_xbar_mux:src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                      // rsp_xbar_mux:src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire  [170:0] rsp_xbar_mux_src_data;                                                                               // rsp_xbar_mux:src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire   [33:0] rsp_xbar_mux_src_channel;                                                                            // rsp_xbar_mux:src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          rsp_xbar_mux_src_ready;                                                                              // hps_0_h2f_axi_master_agent:write_rp_ready -> rsp_xbar_mux:src_ready
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                    // rsp_xbar_mux_001:src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                          // rsp_xbar_mux_001:src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                                  // rsp_xbar_mux_001:src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire  [170:0] rsp_xbar_mux_001_src_data;                                                                           // rsp_xbar_mux_001:src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire   [33:0] rsp_xbar_mux_001_src_channel;                                                                        // rsp_xbar_mux_001:src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                          // hps_0_h2f_axi_master_agent:read_rp_ready -> rsp_xbar_mux_001:src_ready
	wire          fpga_only_master_master_translator_avalon_universal_master_0_waitrequest;                            // fpga_only_master_master_translator_avalon_universal_master_0_agent:av_waitrequest -> fpga_only_master_master_translator:uav_waitrequest
	wire    [2:0] fpga_only_master_master_translator_avalon_universal_master_0_burstcount;                             // fpga_only_master_master_translator:uav_burstcount -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_writedata;                              // fpga_only_master_master_translator:uav_writedata -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_address;                                // fpga_only_master_master_translator:uav_address -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_address
	wire          fpga_only_master_master_translator_avalon_universal_master_0_lock;                                   // fpga_only_master_master_translator:uav_lock -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_lock
	wire          fpga_only_master_master_translator_avalon_universal_master_0_write;                                  // fpga_only_master_master_translator:uav_write -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_write
	wire          fpga_only_master_master_translator_avalon_universal_master_0_read;                                   // fpga_only_master_master_translator:uav_read -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_readdata;                               // fpga_only_master_master_translator_avalon_universal_master_0_agent:av_readdata -> fpga_only_master_master_translator:uav_readdata
	wire          fpga_only_master_master_translator_avalon_universal_master_0_debugaccess;                            // fpga_only_master_master_translator:uav_debugaccess -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] fpga_only_master_master_translator_avalon_universal_master_0_byteenable;                             // fpga_only_master_master_translator:uav_byteenable -> fpga_only_master_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid;                          // fpga_only_master_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> fpga_only_master_master_translator:uav_readdatavalid
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [3:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire   [63:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                          // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire   [31:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                            // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                              // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                               // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                               // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire   [63:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                           // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire    [7:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [171:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                        // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [171:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [65:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                  // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [65:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                   // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                  // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;                // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;                 // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata;                  // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire   [31:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address;                    // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write;                      // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock;                       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read;                       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                   // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;              // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;                // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;                 // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;         // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;               // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data;                // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;               // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;      // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;            // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;    // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;             // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;            // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;          // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;           // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;          // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;          // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;           // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;          // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // intr_capturer_0_avalon_slave_0_translator:uav_waitrequest -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount;              // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_burstcount -> intr_capturer_0_avalon_slave_0_translator:uav_burstcount
	wire   [31:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata;               // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_writedata -> intr_capturer_0_avalon_slave_0_translator:uav_writedata
	wire   [31:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address;                 // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_address -> intr_capturer_0_avalon_slave_0_translator:uav_address
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write;                   // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_write -> intr_capturer_0_avalon_slave_0_translator:uav_write
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock;                    // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_lock -> intr_capturer_0_avalon_slave_0_translator:uav_lock
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read;                    // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_read -> intr_capturer_0_avalon_slave_0_translator:uav_read
	wire   [31:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata;                // intr_capturer_0_avalon_slave_0_translator:uav_readdata -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // intr_capturer_0_avalon_slave_0_translator:uav_readdatavalid -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> intr_capturer_0_avalon_slave_0_translator:uav_debugaccess
	wire    [3:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable;              // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_byteenable -> intr_capturer_0_avalon_slave_0_translator:uav_byteenable
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid;            // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_valid -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data;             // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_data -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready;            // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          cmd_xbar_mux_002_src_endofpacket;                                                                    // cmd_xbar_mux_002:src_endofpacket -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                          // cmd_xbar_mux_002:src_valid -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                                  // cmd_xbar_mux_002:src_startofpacket -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] cmd_xbar_mux_002_src_data;                                                                           // cmd_xbar_mux_002:src_data -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [33:0] cmd_xbar_mux_002_src_channel;                                                                        // cmd_xbar_mux_002:src_channel -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                          // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_002:src_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire   [31:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_writedata;                     // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire   [31:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_address;                       // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_write;                         // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_lock;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_read;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire   [31:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                      // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire    [3:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_data;                   // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;             // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;              // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;             // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // box_x0_s1_translator:uav_waitrequest -> box_x0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_x0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_x0_s1_translator:uav_burstcount
	wire   [31:0] box_x0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_x0_s1_translator:uav_writedata
	wire   [31:0] box_x0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_x0_s1_translator:uav_address
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_x0_s1_translator:uav_write
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_x0_s1_translator:uav_lock
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_x0_s1_translator:uav_read
	wire   [31:0] box_x0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // box_x0_s1_translator:uav_readdata -> box_x0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // box_x0_s1_translator:uav_readdatavalid -> box_x0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_x0_s1_translator:uav_debugaccess
	wire    [3:0] box_x0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // box_x0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_x0_s1_translator:uav_byteenable
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // box_x0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // box_x0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // box_x0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // box_x0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_x0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_x0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_x0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_x0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_x0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // box_x0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // box_x0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // box_x0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_x0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_x0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_x0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // box_x0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // box_xn_s1_translator:uav_waitrequest -> box_xn_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_xn_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_xn_s1_translator:uav_burstcount
	wire   [31:0] box_xn_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_xn_s1_translator:uav_writedata
	wire   [31:0] box_xn_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_xn_s1_translator:uav_address
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_xn_s1_translator:uav_write
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_xn_s1_translator:uav_lock
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_xn_s1_translator:uav_read
	wire   [31:0] box_xn_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // box_xn_s1_translator:uav_readdata -> box_xn_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // box_xn_s1_translator:uav_readdatavalid -> box_xn_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_xn_s1_translator:uav_debugaccess
	wire    [3:0] box_xn_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // box_xn_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_xn_s1_translator:uav_byteenable
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // box_xn_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // box_xn_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // box_xn_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // box_xn_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_xn_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_xn_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_xn_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_xn_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_xn_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // box_xn_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // box_xn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // box_xn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_xn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_xn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_xn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // box_xn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // n_fish_s1_translator:uav_waitrequest -> n_fish_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] n_fish_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> n_fish_s1_translator:uav_burstcount
	wire   [31:0] n_fish_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> n_fish_s1_translator:uav_writedata
	wire   [31:0] n_fish_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_address -> n_fish_s1_translator:uav_address
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_write -> n_fish_s1_translator:uav_write
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_lock -> n_fish_s1_translator:uav_lock
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_read -> n_fish_s1_translator:uav_read
	wire   [31:0] n_fish_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // n_fish_s1_translator:uav_readdata -> n_fish_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // n_fish_s1_translator:uav_readdatavalid -> n_fish_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> n_fish_s1_translator:uav_debugaccess
	wire    [3:0] n_fish_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // n_fish_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> n_fish_s1_translator:uav_byteenable
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // n_fish_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // n_fish_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // n_fish_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // n_fish_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> n_fish_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> n_fish_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> n_fish_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> n_fish_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> n_fish_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // n_fish_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // n_fish_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // n_fish_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> n_fish_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> n_fish_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> n_fish_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // n_fish_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // pio_led_s1_translator:uav_waitrequest -> pio_led_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] pio_led_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> pio_led_s1_translator:uav_burstcount
	wire   [31:0] pio_led_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> pio_led_s1_translator:uav_writedata
	wire   [31:0] pio_led_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_address -> pio_led_s1_translator:uav_address
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_write -> pio_led_s1_translator:uav_write
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_lock -> pio_led_s1_translator:uav_lock
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_read -> pio_led_s1_translator:uav_read
	wire   [31:0] pio_led_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // pio_led_s1_translator:uav_readdata -> pio_led_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // pio_led_s1_translator:uav_readdatavalid -> pio_led_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> pio_led_s1_translator:uav_debugaccess
	wire    [3:0] pio_led_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // pio_led_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> pio_led_s1_translator:uav_byteenable
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // pio_led_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // pio_led_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // pio_led_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // pio_led_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> pio_led_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> pio_led_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> pio_led_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> pio_led_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> pio_led_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // pio_led_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // pio_led_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // pio_led_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> pio_led_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> pio_led_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> pio_led_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // pio_led_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // test_16t_0_s1_translator:uav_waitrequest -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> test_16t_0_s1_translator:uav_burstcount
	wire   [31:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> test_16t_0_s1_translator:uav_writedata
	wire   [31:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> test_16t_0_s1_translator:uav_address
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> test_16t_0_s1_translator:uav_write
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> test_16t_0_s1_translator:uav_lock
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> test_16t_0_s1_translator:uav_read
	wire   [31:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // test_16t_0_s1_translator:uav_readdata -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // test_16t_0_s1_translator:uav_readdatavalid -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> test_16t_0_s1_translator:uav_debugaccess
	wire    [3:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // test_16t_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> test_16t_0_s1_translator:uav_byteenable
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // test_32t_0_s1_translator:uav_waitrequest -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> test_32t_0_s1_translator:uav_burstcount
	wire   [31:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> test_32t_0_s1_translator:uav_writedata
	wire   [31:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> test_32t_0_s1_translator:uav_address
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> test_32t_0_s1_translator:uav_write
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> test_32t_0_s1_translator:uav_lock
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> test_32t_0_s1_translator:uav_read
	wire   [31:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // test_32t_0_s1_translator:uav_readdata -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // test_32t_0_s1_translator:uav_readdatavalid -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> test_32t_0_s1_translator:uav_debugaccess
	wire    [3:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // test_32t_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> test_32t_0_s1_translator:uav_byteenable
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // box_y0_s1_translator:uav_waitrequest -> box_y0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_y0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_y0_s1_translator:uav_burstcount
	wire   [31:0] box_y0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_y0_s1_translator:uav_writedata
	wire   [31:0] box_y0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_y0_s1_translator:uav_address
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_y0_s1_translator:uav_write
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_y0_s1_translator:uav_lock
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_y0_s1_translator:uav_read
	wire   [31:0] box_y0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // box_y0_s1_translator:uav_readdata -> box_y0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // box_y0_s1_translator:uav_readdatavalid -> box_y0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_y0_s1_translator:uav_debugaccess
	wire    [3:0] box_y0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // box_y0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_y0_s1_translator:uav_byteenable
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // box_y0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // box_y0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // box_y0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // box_y0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_y0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_y0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_y0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_y0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_y0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // box_y0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // box_y0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // box_y0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_y0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_y0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_y0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // box_y0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // box_yn_s1_translator:uav_waitrequest -> box_yn_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_yn_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_yn_s1_translator:uav_burstcount
	wire   [31:0] box_yn_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_yn_s1_translator:uav_writedata
	wire   [31:0] box_yn_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_yn_s1_translator:uav_address
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_yn_s1_translator:uav_write
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_yn_s1_translator:uav_lock
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_yn_s1_translator:uav_read
	wire   [31:0] box_yn_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // box_yn_s1_translator:uav_readdata -> box_yn_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // box_yn_s1_translator:uav_readdatavalid -> box_yn_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_yn_s1_translator:uav_debugaccess
	wire    [3:0] box_yn_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // box_yn_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_yn_s1_translator:uav_byteenable
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // box_yn_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // box_yn_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // box_yn_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // box_yn_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_yn_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_yn_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_yn_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_yn_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_yn_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // box_yn_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // box_yn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // box_yn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_yn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_yn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_yn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // box_yn_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // n_pix_s1_translator:uav_waitrequest -> n_pix_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] n_pix_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> n_pix_s1_translator:uav_burstcount
	wire   [31:0] n_pix_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> n_pix_s1_translator:uav_writedata
	wire   [31:0] n_pix_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_address -> n_pix_s1_translator:uav_address
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_write -> n_pix_s1_translator:uav_write
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_lock -> n_pix_s1_translator:uav_lock
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_read -> n_pix_s1_translator:uav_read
	wire   [31:0] n_pix_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // n_pix_s1_translator:uav_readdata -> n_pix_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // n_pix_s1_translator:uav_readdatavalid -> n_pix_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> n_pix_s1_translator:uav_debugaccess
	wire    [3:0] n_pix_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // n_pix_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> n_pix_s1_translator:uav_byteenable
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // n_pix_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // n_pix_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // n_pix_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // n_pix_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> n_pix_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> n_pix_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> n_pix_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> n_pix_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> n_pix_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // n_pix_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // n_pix_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // n_pix_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> n_pix_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> n_pix_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> n_pix_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // n_pix_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // box_req_s1_translator:uav_waitrequest -> box_req_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_req_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // box_req_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_req_s1_translator:uav_burstcount
	wire   [31:0] box_req_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // box_req_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_req_s1_translator:uav_writedata
	wire   [31:0] box_req_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // box_req_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_req_s1_translator:uav_address
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // box_req_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_req_s1_translator:uav_write
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // box_req_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_req_s1_translator:uav_lock
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // box_req_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_req_s1_translator:uav_read
	wire   [31:0] box_req_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // box_req_s1_translator:uav_readdata -> box_req_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // box_req_s1_translator:uav_readdatavalid -> box_req_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // box_req_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_req_s1_translator:uav_debugaccess
	wire    [3:0] box_req_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // box_req_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_req_s1_translator:uav_byteenable
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // box_req_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // box_req_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // box_req_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // box_req_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_req_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_req_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_req_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_req_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_req_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // box_req_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // box_req_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // box_req_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_req_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_req_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_req_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // box_req_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // box_n_s1_translator:uav_waitrequest -> box_n_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_n_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // box_n_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_n_s1_translator:uav_burstcount
	wire   [31:0] box_n_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // box_n_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_n_s1_translator:uav_writedata
	wire   [31:0] box_n_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // box_n_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_n_s1_translator:uav_address
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // box_n_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_n_s1_translator:uav_write
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // box_n_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_n_s1_translator:uav_lock
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // box_n_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_n_s1_translator:uav_read
	wire   [31:0] box_n_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // box_n_s1_translator:uav_readdata -> box_n_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // box_n_s1_translator:uav_readdatavalid -> box_n_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // box_n_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_n_s1_translator:uav_debugaccess
	wire    [3:0] box_n_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // box_n_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_n_s1_translator:uav_byteenable
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // box_n_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // box_n_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // box_n_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // box_n_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_n_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_n_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_n_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_n_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_n_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // box_n_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // box_n_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // box_n_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_n_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_n_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_n_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // box_n_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // box_addr_s1_translator:uav_waitrequest -> box_addr_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] box_addr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> box_addr_s1_translator:uav_burstcount
	wire   [31:0] box_addr_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> box_addr_s1_translator:uav_writedata
	wire   [31:0] box_addr_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_address -> box_addr_s1_translator:uav_address
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_write -> box_addr_s1_translator:uav_write
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_lock -> box_addr_s1_translator:uav_lock
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_read -> box_addr_s1_translator:uav_read
	wire   [31:0] box_addr_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // box_addr_s1_translator:uav_readdata -> box_addr_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // box_addr_s1_translator:uav_readdatavalid -> box_addr_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> box_addr_s1_translator:uav_debugaccess
	wire    [3:0] box_addr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // box_addr_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> box_addr_s1_translator:uav_byteenable
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // box_addr_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // box_addr_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // box_addr_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // box_addr_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> box_addr_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> box_addr_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> box_addr_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> box_addr_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> box_addr_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // box_addr_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // box_addr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // box_addr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> box_addr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> box_addr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> box_addr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // box_addr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // addr_out_s1_translator:uav_waitrequest -> addr_out_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] addr_out_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> addr_out_s1_translator:uav_burstcount
	wire   [31:0] addr_out_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> addr_out_s1_translator:uav_writedata
	wire   [31:0] addr_out_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_address -> addr_out_s1_translator:uav_address
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_write -> addr_out_s1_translator:uav_write
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_lock -> addr_out_s1_translator:uav_lock
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_read -> addr_out_s1_translator:uav_read
	wire   [31:0] addr_out_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // addr_out_s1_translator:uav_readdata -> addr_out_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // addr_out_s1_translator:uav_readdatavalid -> addr_out_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> addr_out_s1_translator:uav_debugaccess
	wire    [3:0] addr_out_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // addr_out_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> addr_out_s1_translator:uav_byteenable
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // addr_out_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // addr_out_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // addr_out_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // addr_out_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> addr_out_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> addr_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> addr_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> addr_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> addr_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // addr_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // addr_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // addr_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> addr_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> addr_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> addr_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // addr_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // req_res_s1_translator:uav_waitrequest -> req_res_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] req_res_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // req_res_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> req_res_s1_translator:uav_burstcount
	wire   [31:0] req_res_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // req_res_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> req_res_s1_translator:uav_writedata
	wire   [31:0] req_res_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // req_res_s1_translator_avalon_universal_slave_0_agent:m0_address -> req_res_s1_translator:uav_address
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // req_res_s1_translator_avalon_universal_slave_0_agent:m0_write -> req_res_s1_translator:uav_write
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // req_res_s1_translator_avalon_universal_slave_0_agent:m0_lock -> req_res_s1_translator:uav_lock
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // req_res_s1_translator_avalon_universal_slave_0_agent:m0_read -> req_res_s1_translator:uav_read
	wire   [31:0] req_res_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // req_res_s1_translator:uav_readdata -> req_res_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // req_res_s1_translator:uav_readdatavalid -> req_res_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // req_res_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> req_res_s1_translator:uav_debugaccess
	wire    [3:0] req_res_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // req_res_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> req_res_s1_translator:uav_byteenable
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // req_res_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // req_res_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // req_res_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // req_res_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> req_res_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> req_res_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> req_res_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> req_res_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> req_res_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // req_res_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // req_res_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // req_res_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> req_res_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> req_res_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> req_res_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // req_res_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // x_min_s1_translator:uav_waitrequest -> x_min_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] x_min_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // x_min_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> x_min_s1_translator:uav_burstcount
	wire   [31:0] x_min_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // x_min_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> x_min_s1_translator:uav_writedata
	wire   [31:0] x_min_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // x_min_s1_translator_avalon_universal_slave_0_agent:m0_address -> x_min_s1_translator:uav_address
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // x_min_s1_translator_avalon_universal_slave_0_agent:m0_write -> x_min_s1_translator:uav_write
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // x_min_s1_translator_avalon_universal_slave_0_agent:m0_lock -> x_min_s1_translator:uav_lock
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // x_min_s1_translator_avalon_universal_slave_0_agent:m0_read -> x_min_s1_translator:uav_read
	wire   [31:0] x_min_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // x_min_s1_translator:uav_readdata -> x_min_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // x_min_s1_translator:uav_readdatavalid -> x_min_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // x_min_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> x_min_s1_translator:uav_debugaccess
	wire    [3:0] x_min_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // x_min_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> x_min_s1_translator:uav_byteenable
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // x_min_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // x_min_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // x_min_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // x_min_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> x_min_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> x_min_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> x_min_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> x_min_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> x_min_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // x_min_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // x_min_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // x_min_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> x_min_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> x_min_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> x_min_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // x_min_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // x_max_s1_translator:uav_waitrequest -> x_max_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] x_max_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // x_max_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> x_max_s1_translator:uav_burstcount
	wire   [31:0] x_max_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // x_max_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> x_max_s1_translator:uav_writedata
	wire   [31:0] x_max_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // x_max_s1_translator_avalon_universal_slave_0_agent:m0_address -> x_max_s1_translator:uav_address
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // x_max_s1_translator_avalon_universal_slave_0_agent:m0_write -> x_max_s1_translator:uav_write
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // x_max_s1_translator_avalon_universal_slave_0_agent:m0_lock -> x_max_s1_translator:uav_lock
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // x_max_s1_translator_avalon_universal_slave_0_agent:m0_read -> x_max_s1_translator:uav_read
	wire   [31:0] x_max_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // x_max_s1_translator:uav_readdata -> x_max_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // x_max_s1_translator:uav_readdatavalid -> x_max_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // x_max_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> x_max_s1_translator:uav_debugaccess
	wire    [3:0] x_max_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // x_max_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> x_max_s1_translator:uav_byteenable
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // x_max_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // x_max_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // x_max_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // x_max_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> x_max_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> x_max_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> x_max_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> x_max_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> x_max_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // x_max_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // x_max_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // x_max_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> x_max_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> x_max_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> x_max_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // x_max_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // n_frame_s1_translator:uav_waitrequest -> n_frame_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] n_frame_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> n_frame_s1_translator:uav_burstcount
	wire   [31:0] n_frame_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> n_frame_s1_translator:uav_writedata
	wire   [31:0] n_frame_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_address -> n_frame_s1_translator:uav_address
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_write -> n_frame_s1_translator:uav_write
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_lock -> n_frame_s1_translator:uav_lock
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_read -> n_frame_s1_translator:uav_read
	wire   [31:0] n_frame_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // n_frame_s1_translator:uav_readdata -> n_frame_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // n_frame_s1_translator:uav_readdatavalid -> n_frame_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> n_frame_s1_translator:uav_debugaccess
	wire    [3:0] n_frame_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // n_frame_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> n_frame_s1_translator:uav_byteenable
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // n_frame_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // n_frame_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // n_frame_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // n_frame_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> n_frame_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> n_frame_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> n_frame_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> n_frame_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> n_frame_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // n_frame_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // n_frame_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // n_frame_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> n_frame_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> n_frame_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> n_frame_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // n_frame_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                               // reset_cnt_s1_translator:uav_waitrequest -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> reset_cnt_s1_translator:uav_burstcount
	wire   [31:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                 // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> reset_cnt_s1_translator:uav_writedata
	wire   [31:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_address;                                   // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_address -> reset_cnt_s1_translator:uav_address
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_write;                                     // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_write -> reset_cnt_s1_translator:uav_write
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                      // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_lock -> reset_cnt_s1_translator:uav_lock
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_read;                                      // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_read -> reset_cnt_s1_translator:uav_read
	wire   [31:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                  // reset_cnt_s1_translator:uav_readdata -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                             // reset_cnt_s1_translator:uav_readdatavalid -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                               // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> reset_cnt_s1_translator:uav_debugaccess
	wire    [3:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                // reset_cnt_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> reset_cnt_s1_translator:uav_byteenable
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                        // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                              // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                      // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                               // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                              // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                     // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                           // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                   // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                            // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                           // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                         // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                          // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                         // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                         // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                          // reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                         // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // sw_mass_s1_translator:uav_waitrequest -> sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sw_mass_s1_translator:uav_burstcount
	wire   [31:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sw_mass_s1_translator:uav_writedata
	wire   [31:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_address -> sw_mass_s1_translator:uav_address
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_write -> sw_mass_s1_translator:uav_write
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sw_mass_s1_translator:uav_lock
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_read -> sw_mass_s1_translator:uav_read
	wire   [31:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // sw_mass_s1_translator:uav_readdata -> sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // sw_mass_s1_translator:uav_readdatavalid -> sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sw_mass_s1_translator:uav_debugaccess
	wire    [3:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // sw_mass_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sw_mass_s1_translator:uav_byteenable
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // sw_mass_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // sw_mass_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // sw_mass_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // sw_mass_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // test_cnt_balls_s1_translator:uav_waitrequest -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> test_cnt_balls_s1_translator:uav_burstcount
	wire   [31:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> test_cnt_balls_s1_translator:uav_writedata
	wire   [31:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_address -> test_cnt_balls_s1_translator:uav_address
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_write -> test_cnt_balls_s1_translator:uav_write
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_lock -> test_cnt_balls_s1_translator:uav_lock
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_read -> test_cnt_balls_s1_translator:uav_read
	wire   [31:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // test_cnt_balls_s1_translator:uav_readdata -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // test_cnt_balls_s1_translator:uav_readdatavalid -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> test_cnt_balls_s1_translator:uav_debugaccess
	wire    [3:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> test_cnt_balls_s1_translator:uav_byteenable
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                    // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                     // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                    // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // con_yark_s1_translator:uav_waitrequest -> con_yark_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] con_yark_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> con_yark_s1_translator:uav_burstcount
	wire   [31:0] con_yark_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> con_yark_s1_translator:uav_writedata
	wire   [31:0] con_yark_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_address -> con_yark_s1_translator:uav_address
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_write -> con_yark_s1_translator:uav_write
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_lock -> con_yark_s1_translator:uav_lock
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_read -> con_yark_s1_translator:uav_read
	wire   [31:0] con_yark_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // con_yark_s1_translator:uav_readdata -> con_yark_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // con_yark_s1_translator:uav_readdatavalid -> con_yark_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> con_yark_s1_translator:uav_debugaccess
	wire    [3:0] con_yark_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // con_yark_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> con_yark_s1_translator:uav_byteenable
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // con_yark_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // con_yark_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // con_yark_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // con_yark_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> con_yark_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> con_yark_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> con_yark_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> con_yark_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> con_yark_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // con_yark_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // con_yark_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // con_yark_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> con_yark_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> con_yark_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> con_yark_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // con_yark_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                    // x1_0_s1_translator:uav_waitrequest -> x1_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] x1_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                     // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> x1_0_s1_translator:uav_burstcount
	wire   [31:0] x1_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                      // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> x1_0_s1_translator:uav_writedata
	wire   [31:0] x1_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                        // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> x1_0_s1_translator:uav_address
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                          // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> x1_0_s1_translator:uav_write
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                           // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> x1_0_s1_translator:uav_lock
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                           // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> x1_0_s1_translator:uav_read
	wire   [31:0] x1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                       // x1_0_s1_translator:uav_readdata -> x1_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                  // x1_0_s1_translator:uav_readdatavalid -> x1_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                    // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> x1_0_s1_translator:uav_debugaccess
	wire    [3:0] x1_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                     // x1_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> x1_0_s1_translator:uav_byteenable
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                             // x1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                   // x1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                           // x1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                    // x1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                   // x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> x1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                          // x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> x1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                // x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> x1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                        // x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> x1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                 // x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> x1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                // x1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                              // x1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                               // x1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                              // x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> x1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                              // x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> x1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                               // x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> x1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                              // x1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                    // x2_0_s1_translator:uav_waitrequest -> x2_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] x2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                     // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> x2_0_s1_translator:uav_burstcount
	wire   [31:0] x2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                      // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> x2_0_s1_translator:uav_writedata
	wire   [31:0] x2_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                        // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> x2_0_s1_translator:uav_address
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                          // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> x2_0_s1_translator:uav_write
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                           // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> x2_0_s1_translator:uav_lock
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                           // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> x2_0_s1_translator:uav_read
	wire   [31:0] x2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                       // x2_0_s1_translator:uav_readdata -> x2_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                  // x2_0_s1_translator:uav_readdatavalid -> x2_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                    // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> x2_0_s1_translator:uav_debugaccess
	wire    [3:0] x2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                     // x2_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> x2_0_s1_translator:uav_byteenable
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                             // x2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                   // x2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                           // x2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                    // x2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                   // x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> x2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                          // x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> x2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                // x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> x2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                        // x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> x2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                 // x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> x2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                // x2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                              // x2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                               // x2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                              // x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> x2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                              // x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> x2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                               // x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> x2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                              // x2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                    // y1_0_s1_translator:uav_waitrequest -> y1_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] y1_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                     // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> y1_0_s1_translator:uav_burstcount
	wire   [31:0] y1_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                      // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> y1_0_s1_translator:uav_writedata
	wire   [31:0] y1_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                        // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> y1_0_s1_translator:uav_address
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                          // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> y1_0_s1_translator:uav_write
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                           // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> y1_0_s1_translator:uav_lock
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                           // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> y1_0_s1_translator:uav_read
	wire   [31:0] y1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                       // y1_0_s1_translator:uav_readdata -> y1_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                  // y1_0_s1_translator:uav_readdatavalid -> y1_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                    // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> y1_0_s1_translator:uav_debugaccess
	wire    [3:0] y1_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                     // y1_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> y1_0_s1_translator:uav_byteenable
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                             // y1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                   // y1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                           // y1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                    // y1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                   // y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> y1_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                          // y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> y1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                // y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> y1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                        // y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> y1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                 // y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> y1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                // y1_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                              // y1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                               // y1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                              // y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> y1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                              // y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> y1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                               // y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> y1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                              // y1_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                    // y2_0_s1_translator:uav_waitrequest -> y2_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] y2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                     // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> y2_0_s1_translator:uav_burstcount
	wire   [31:0] y2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                      // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> y2_0_s1_translator:uav_writedata
	wire   [31:0] y2_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                        // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> y2_0_s1_translator:uav_address
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                          // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> y2_0_s1_translator:uav_write
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                           // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> y2_0_s1_translator:uav_lock
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                           // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> y2_0_s1_translator:uav_read
	wire   [31:0] y2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                       // y2_0_s1_translator:uav_readdata -> y2_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                  // y2_0_s1_translator:uav_readdatavalid -> y2_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                    // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> y2_0_s1_translator:uav_debugaccess
	wire    [3:0] y2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                     // y2_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> y2_0_s1_translator:uav_byteenable
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                             // y2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                   // y2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                           // y2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                    // y2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                   // y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> y2_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                          // y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> y2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                // y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> y2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                        // y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> y2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                 // y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> y2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                // y2_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                              // y2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                               // y2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                              // y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> y2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                              // y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> y2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                               // y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> y2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                              // y2_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // del_x_s1_translator:uav_waitrequest -> del_x_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] del_x_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // del_x_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> del_x_s1_translator:uav_burstcount
	wire   [31:0] del_x_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // del_x_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> del_x_s1_translator:uav_writedata
	wire   [31:0] del_x_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // del_x_s1_translator_avalon_universal_slave_0_agent:m0_address -> del_x_s1_translator:uav_address
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // del_x_s1_translator_avalon_universal_slave_0_agent:m0_write -> del_x_s1_translator:uav_write
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // del_x_s1_translator_avalon_universal_slave_0_agent:m0_lock -> del_x_s1_translator:uav_lock
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // del_x_s1_translator_avalon_universal_slave_0_agent:m0_read -> del_x_s1_translator:uav_read
	wire   [31:0] del_x_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // del_x_s1_translator:uav_readdata -> del_x_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // del_x_s1_translator:uav_readdatavalid -> del_x_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // del_x_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> del_x_s1_translator:uav_debugaccess
	wire    [3:0] del_x_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // del_x_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> del_x_s1_translator:uav_byteenable
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // del_x_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // del_x_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // del_x_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // del_x_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> del_x_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> del_x_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> del_x_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> del_x_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> del_x_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // del_x_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // del_x_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // del_x_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> del_x_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> del_x_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> del_x_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // del_x_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // del_y_s1_translator:uav_waitrequest -> del_y_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] del_y_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // del_y_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> del_y_s1_translator:uav_burstcount
	wire   [31:0] del_y_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // del_y_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> del_y_s1_translator:uav_writedata
	wire   [31:0] del_y_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // del_y_s1_translator_avalon_universal_slave_0_agent:m0_address -> del_y_s1_translator:uav_address
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // del_y_s1_translator_avalon_universal_slave_0_agent:m0_write -> del_y_s1_translator:uav_write
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // del_y_s1_translator_avalon_universal_slave_0_agent:m0_lock -> del_y_s1_translator:uav_lock
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // del_y_s1_translator_avalon_universal_slave_0_agent:m0_read -> del_y_s1_translator:uav_read
	wire   [31:0] del_y_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // del_y_s1_translator:uav_readdata -> del_y_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // del_y_s1_translator:uav_readdatavalid -> del_y_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // del_y_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> del_y_s1_translator:uav_debugaccess
	wire    [3:0] del_y_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // del_y_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> del_y_s1_translator:uav_byteenable
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // del_y_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // del_y_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // del_y_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // del_y_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> del_y_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> del_y_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> del_y_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> del_y_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> del_y_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // del_y_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // del_y_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // del_y_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> del_y_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> del_y_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> del_y_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // del_y_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // x_cat_s1_translator:uav_waitrequest -> x_cat_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] x_cat_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> x_cat_s1_translator:uav_burstcount
	wire   [31:0] x_cat_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> x_cat_s1_translator:uav_writedata
	wire   [31:0] x_cat_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_address -> x_cat_s1_translator:uav_address
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_write -> x_cat_s1_translator:uav_write
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_lock -> x_cat_s1_translator:uav_lock
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_read -> x_cat_s1_translator:uav_read
	wire   [31:0] x_cat_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // x_cat_s1_translator:uav_readdata -> x_cat_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // x_cat_s1_translator:uav_readdatavalid -> x_cat_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> x_cat_s1_translator:uav_debugaccess
	wire    [3:0] x_cat_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // x_cat_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> x_cat_s1_translator:uav_byteenable
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // x_cat_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // x_cat_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // x_cat_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // x_cat_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> x_cat_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> x_cat_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> x_cat_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> x_cat_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> x_cat_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // x_cat_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // x_cat_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // x_cat_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> x_cat_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> x_cat_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> x_cat_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // x_cat_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                 // dx_corr_s1_translator:uav_waitrequest -> dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                  // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> dx_corr_s1_translator:uav_burstcount
	wire   [31:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                   // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> dx_corr_s1_translator:uav_writedata
	wire   [31:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_address;                                     // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_address -> dx_corr_s1_translator:uav_address
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_write;                                       // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_write -> dx_corr_s1_translator:uav_write
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                        // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_lock -> dx_corr_s1_translator:uav_lock
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_read;                                        // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_read -> dx_corr_s1_translator:uav_read
	wire   [31:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                    // dx_corr_s1_translator:uav_readdata -> dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                               // dx_corr_s1_translator:uav_readdatavalid -> dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                 // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> dx_corr_s1_translator:uav_debugaccess
	wire    [3:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                  // dx_corr_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> dx_corr_s1_translator:uav_byteenable
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                          // dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                // dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                        // dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                 // dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                // dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                       // dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                             // dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                     // dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                              // dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                             // dx_corr_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                           // dx_corr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                            // dx_corr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                           // dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                           // dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                            // dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                           // dx_corr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                   // y_cut_s1_translator:uav_waitrequest -> y_cut_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] y_cut_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                    // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> y_cut_s1_translator:uav_burstcount
	wire   [31:0] y_cut_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                     // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> y_cut_s1_translator:uav_writedata
	wire   [31:0] y_cut_s1_translator_avalon_universal_slave_0_agent_m0_address;                                       // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_address -> y_cut_s1_translator:uav_address
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_m0_write;                                         // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_write -> y_cut_s1_translator:uav_write
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                          // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_lock -> y_cut_s1_translator:uav_lock
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_m0_read;                                          // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_read -> y_cut_s1_translator:uav_read
	wire   [31:0] y_cut_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                      // y_cut_s1_translator:uav_readdata -> y_cut_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                 // y_cut_s1_translator:uav_readdatavalid -> y_cut_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                   // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> y_cut_s1_translator:uav_debugaccess
	wire    [3:0] y_cut_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                    // y_cut_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> y_cut_s1_translator:uav_byteenable
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                            // y_cut_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                  // y_cut_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                          // y_cut_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [135:0] y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                   // y_cut_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                  // y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> y_cut_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                         // y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> y_cut_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                               // y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> y_cut_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                       // y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> y_cut_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [135:0] y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                // y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> y_cut_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                               // y_cut_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                             // y_cut_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                              // y_cut_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                             // y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> y_cut_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                             // y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> y_cut_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                              // y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> y_cut_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                             // y_cut_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                                     // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> addr_router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                                           // hps_0_h2f_axi_master_agent:write_cp_valid -> addr_router:sink_valid
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                                   // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> addr_router:sink_startofpacket
	wire  [170:0] hps_0_h2f_axi_master_agent_write_cp_data;                                                            // hps_0_h2f_axi_master_agent:write_cp_data -> addr_router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                                           // addr_router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          addr_router_src_endofpacket;                                                                         // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          addr_router_src_valid;                                                                               // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire          addr_router_src_startofpacket;                                                                       // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [170:0] addr_router_src_data;                                                                                // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire   [33:0] addr_router_src_channel;                                                                             // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire          addr_router_src_ready;                                                                               // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                                      // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                                            // hps_0_h2f_axi_master_agent:read_cp_valid -> addr_router_001:sink_valid
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                                    // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [170:0] hps_0_h2f_axi_master_agent_read_cp_data;                                                             // hps_0_h2f_axi_master_agent:read_cp_data -> addr_router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                                            // addr_router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          addr_router_001_src_endofpacket;                                                                     // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          addr_router_001_src_valid;                                                                           // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire          addr_router_001_src_startofpacket;                                                                   // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [170:0] addr_router_001_src_data;                                                                            // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire   [33:0] addr_router_001_src_channel;                                                                         // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire          addr_router_001_src_ready;                                                                           // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire          fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                   // fpga_only_master_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_valid;                         // fpga_only_master_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                 // fpga_only_master_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [134:0] fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_data;                          // fpga_only_master_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_ready;                         // addr_router_002:sink_ready -> fpga_only_master_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                                  // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> addr_router_003:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                                        // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> addr_router_003:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                                // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> addr_router_003:sink_startofpacket
	wire  [134:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                                         // hps_0_h2f_lw_axi_master_agent:write_cp_data -> addr_router_003:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                                        // addr_router_003:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                                   // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> addr_router_004:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                                         // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> addr_router_004:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                                 // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> addr_router_004:sink_startofpacket
	wire  [134:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                          // hps_0_h2f_lw_axi_master_agent:read_cp_data -> addr_router_004:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                                         // addr_router_004:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                              // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [170:0] onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                               // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router:sink_ready -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                           // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                                 // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                         // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [170:0] id_router_src_data;                                                                                  // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [33:0] id_router_src_channel;                                                                               // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                                 // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;                // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid;                      // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;              // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [134:0] jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data;                       // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready;                      // id_router_001:sink_ready -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                       // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                             // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                     // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [134:0] id_router_001_src_data;                                                                              // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [33:0] id_router_001_src_channel;                                                                           // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                             // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid;                   // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [134:0] intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data;                    // intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_002:sink_ready -> intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_002_src_endofpacket;                                                                       // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          id_router_002_src_valid;                                                                             // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire          id_router_002_src_startofpacket;                                                                     // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [134:0] id_router_002_src_data;                                                                              // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire   [33:0] id_router_002_src_channel;                                                                           // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_002_src_ready;                                                                             // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_valid;                         // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [134:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_data;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_ready;                         // id_router_003:sink_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                       // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                             // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                                     // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [134:0] id_router_003_src_data;                                                                              // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire   [33:0] id_router_003_src_channel;                                                                           // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                             // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // box_x0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // box_x0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // box_x0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire  [134:0] box_x0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // box_x0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire          box_x0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_004:sink_ready -> box_x0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_004_src_endofpacket;                                                                       // id_router_004:src_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire          id_router_004_src_valid;                                                                             // id_router_004:src_valid -> rsp_xbar_demux_004:sink_valid
	wire          id_router_004_src_startofpacket;                                                                     // id_router_004:src_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [134:0] id_router_004_src_data;                                                                              // id_router_004:src_data -> rsp_xbar_demux_004:sink_data
	wire   [33:0] id_router_004_src_channel;                                                                           // id_router_004:src_channel -> rsp_xbar_demux_004:sink_channel
	wire          id_router_004_src_ready;                                                                             // rsp_xbar_demux_004:sink_ready -> id_router_004:src_ready
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // box_xn_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_005:sink_endofpacket
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // box_xn_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_005:sink_valid
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // box_xn_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_005:sink_startofpacket
	wire  [134:0] box_xn_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // box_xn_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_005:sink_data
	wire          box_xn_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_005:sink_ready -> box_xn_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_005_src_endofpacket;                                                                       // id_router_005:src_endofpacket -> rsp_xbar_demux_005:sink_endofpacket
	wire          id_router_005_src_valid;                                                                             // id_router_005:src_valid -> rsp_xbar_demux_005:sink_valid
	wire          id_router_005_src_startofpacket;                                                                     // id_router_005:src_startofpacket -> rsp_xbar_demux_005:sink_startofpacket
	wire  [134:0] id_router_005_src_data;                                                                              // id_router_005:src_data -> rsp_xbar_demux_005:sink_data
	wire   [33:0] id_router_005_src_channel;                                                                           // id_router_005:src_channel -> rsp_xbar_demux_005:sink_channel
	wire          id_router_005_src_ready;                                                                             // rsp_xbar_demux_005:sink_ready -> id_router_005:src_ready
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // n_fish_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_006:sink_endofpacket
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // n_fish_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_006:sink_valid
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // n_fish_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_006:sink_startofpacket
	wire  [134:0] n_fish_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // n_fish_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_006:sink_data
	wire          n_fish_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_006:sink_ready -> n_fish_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_006_src_endofpacket;                                                                       // id_router_006:src_endofpacket -> rsp_xbar_demux_006:sink_endofpacket
	wire          id_router_006_src_valid;                                                                             // id_router_006:src_valid -> rsp_xbar_demux_006:sink_valid
	wire          id_router_006_src_startofpacket;                                                                     // id_router_006:src_startofpacket -> rsp_xbar_demux_006:sink_startofpacket
	wire  [134:0] id_router_006_src_data;                                                                              // id_router_006:src_data -> rsp_xbar_demux_006:sink_data
	wire   [33:0] id_router_006_src_channel;                                                                           // id_router_006:src_channel -> rsp_xbar_demux_006:sink_channel
	wire          id_router_006_src_ready;                                                                             // rsp_xbar_demux_006:sink_ready -> id_router_006:src_ready
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // pio_led_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_007:sink_endofpacket
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // pio_led_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_007:sink_valid
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // pio_led_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_007:sink_startofpacket
	wire  [134:0] pio_led_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // pio_led_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_007:sink_data
	wire          pio_led_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_007:sink_ready -> pio_led_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_007_src_endofpacket;                                                                       // id_router_007:src_endofpacket -> rsp_xbar_demux_007:sink_endofpacket
	wire          id_router_007_src_valid;                                                                             // id_router_007:src_valid -> rsp_xbar_demux_007:sink_valid
	wire          id_router_007_src_startofpacket;                                                                     // id_router_007:src_startofpacket -> rsp_xbar_demux_007:sink_startofpacket
	wire  [134:0] id_router_007_src_data;                                                                              // id_router_007:src_data -> rsp_xbar_demux_007:sink_data
	wire   [33:0] id_router_007_src_channel;                                                                           // id_router_007:src_channel -> rsp_xbar_demux_007:sink_channel
	wire          id_router_007_src_ready;                                                                             // rsp_xbar_demux_007:sink_ready -> id_router_007:src_ready
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_008:sink_endofpacket
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_008:sink_valid
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_008:sink_startofpacket
	wire  [134:0] test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // test_16t_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_008:sink_data
	wire          test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_008:sink_ready -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_008_src_endofpacket;                                                                       // id_router_008:src_endofpacket -> rsp_xbar_demux_008:sink_endofpacket
	wire          id_router_008_src_valid;                                                                             // id_router_008:src_valid -> rsp_xbar_demux_008:sink_valid
	wire          id_router_008_src_startofpacket;                                                                     // id_router_008:src_startofpacket -> rsp_xbar_demux_008:sink_startofpacket
	wire  [134:0] id_router_008_src_data;                                                                              // id_router_008:src_data -> rsp_xbar_demux_008:sink_data
	wire   [33:0] id_router_008_src_channel;                                                                           // id_router_008:src_channel -> rsp_xbar_demux_008:sink_channel
	wire          id_router_008_src_ready;                                                                             // rsp_xbar_demux_008:sink_ready -> id_router_008:src_ready
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_009:sink_endofpacket
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_009:sink_valid
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_009:sink_startofpacket
	wire  [134:0] test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // test_32t_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_009:sink_data
	wire          test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_009:sink_ready -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_009_src_endofpacket;                                                                       // id_router_009:src_endofpacket -> rsp_xbar_demux_009:sink_endofpacket
	wire          id_router_009_src_valid;                                                                             // id_router_009:src_valid -> rsp_xbar_demux_009:sink_valid
	wire          id_router_009_src_startofpacket;                                                                     // id_router_009:src_startofpacket -> rsp_xbar_demux_009:sink_startofpacket
	wire  [134:0] id_router_009_src_data;                                                                              // id_router_009:src_data -> rsp_xbar_demux_009:sink_data
	wire   [33:0] id_router_009_src_channel;                                                                           // id_router_009:src_channel -> rsp_xbar_demux_009:sink_channel
	wire          id_router_009_src_ready;                                                                             // rsp_xbar_demux_009:sink_ready -> id_router_009:src_ready
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // box_y0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_010:sink_endofpacket
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // box_y0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_010:sink_valid
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // box_y0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_010:sink_startofpacket
	wire  [134:0] box_y0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // box_y0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_010:sink_data
	wire          box_y0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_010:sink_ready -> box_y0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_010_src_endofpacket;                                                                       // id_router_010:src_endofpacket -> rsp_xbar_demux_010:sink_endofpacket
	wire          id_router_010_src_valid;                                                                             // id_router_010:src_valid -> rsp_xbar_demux_010:sink_valid
	wire          id_router_010_src_startofpacket;                                                                     // id_router_010:src_startofpacket -> rsp_xbar_demux_010:sink_startofpacket
	wire  [134:0] id_router_010_src_data;                                                                              // id_router_010:src_data -> rsp_xbar_demux_010:sink_data
	wire   [33:0] id_router_010_src_channel;                                                                           // id_router_010:src_channel -> rsp_xbar_demux_010:sink_channel
	wire          id_router_010_src_ready;                                                                             // rsp_xbar_demux_010:sink_ready -> id_router_010:src_ready
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // box_yn_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_011:sink_endofpacket
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // box_yn_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_011:sink_valid
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // box_yn_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_011:sink_startofpacket
	wire  [134:0] box_yn_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // box_yn_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_011:sink_data
	wire          box_yn_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router_011:sink_ready -> box_yn_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_011_src_endofpacket;                                                                       // id_router_011:src_endofpacket -> rsp_xbar_demux_011:sink_endofpacket
	wire          id_router_011_src_valid;                                                                             // id_router_011:src_valid -> rsp_xbar_demux_011:sink_valid
	wire          id_router_011_src_startofpacket;                                                                     // id_router_011:src_startofpacket -> rsp_xbar_demux_011:sink_startofpacket
	wire  [134:0] id_router_011_src_data;                                                                              // id_router_011:src_data -> rsp_xbar_demux_011:sink_data
	wire   [33:0] id_router_011_src_channel;                                                                           // id_router_011:src_channel -> rsp_xbar_demux_011:sink_channel
	wire          id_router_011_src_ready;                                                                             // rsp_xbar_demux_011:sink_ready -> id_router_011:src_ready
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // n_pix_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_012:sink_endofpacket
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // n_pix_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_012:sink_valid
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // n_pix_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_012:sink_startofpacket
	wire  [134:0] n_pix_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // n_pix_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_012:sink_data
	wire          n_pix_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_012:sink_ready -> n_pix_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_012_src_endofpacket;                                                                       // id_router_012:src_endofpacket -> rsp_xbar_demux_012:sink_endofpacket
	wire          id_router_012_src_valid;                                                                             // id_router_012:src_valid -> rsp_xbar_demux_012:sink_valid
	wire          id_router_012_src_startofpacket;                                                                     // id_router_012:src_startofpacket -> rsp_xbar_demux_012:sink_startofpacket
	wire  [134:0] id_router_012_src_data;                                                                              // id_router_012:src_data -> rsp_xbar_demux_012:sink_data
	wire   [33:0] id_router_012_src_channel;                                                                           // id_router_012:src_channel -> rsp_xbar_demux_012:sink_channel
	wire          id_router_012_src_ready;                                                                             // rsp_xbar_demux_012:sink_ready -> id_router_012:src_ready
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // box_req_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_013:sink_endofpacket
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // box_req_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_013:sink_valid
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // box_req_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_013:sink_startofpacket
	wire  [134:0] box_req_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // box_req_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_013:sink_data
	wire          box_req_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_013:sink_ready -> box_req_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_013_src_endofpacket;                                                                       // id_router_013:src_endofpacket -> rsp_xbar_demux_013:sink_endofpacket
	wire          id_router_013_src_valid;                                                                             // id_router_013:src_valid -> rsp_xbar_demux_013:sink_valid
	wire          id_router_013_src_startofpacket;                                                                     // id_router_013:src_startofpacket -> rsp_xbar_demux_013:sink_startofpacket
	wire  [134:0] id_router_013_src_data;                                                                              // id_router_013:src_data -> rsp_xbar_demux_013:sink_data
	wire   [33:0] id_router_013_src_channel;                                                                           // id_router_013:src_channel -> rsp_xbar_demux_013:sink_channel
	wire          id_router_013_src_ready;                                                                             // rsp_xbar_demux_013:sink_ready -> id_router_013:src_ready
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // box_n_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_014:sink_endofpacket
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // box_n_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_014:sink_valid
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // box_n_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_014:sink_startofpacket
	wire  [134:0] box_n_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // box_n_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_014:sink_data
	wire          box_n_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_014:sink_ready -> box_n_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_014_src_endofpacket;                                                                       // id_router_014:src_endofpacket -> rsp_xbar_demux_014:sink_endofpacket
	wire          id_router_014_src_valid;                                                                             // id_router_014:src_valid -> rsp_xbar_demux_014:sink_valid
	wire          id_router_014_src_startofpacket;                                                                     // id_router_014:src_startofpacket -> rsp_xbar_demux_014:sink_startofpacket
	wire  [134:0] id_router_014_src_data;                                                                              // id_router_014:src_data -> rsp_xbar_demux_014:sink_data
	wire   [33:0] id_router_014_src_channel;                                                                           // id_router_014:src_channel -> rsp_xbar_demux_014:sink_channel
	wire          id_router_014_src_ready;                                                                             // rsp_xbar_demux_014:sink_ready -> id_router_014:src_ready
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // box_addr_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_015:sink_endofpacket
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // box_addr_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_015:sink_valid
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // box_addr_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_015:sink_startofpacket
	wire  [134:0] box_addr_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // box_addr_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_015:sink_data
	wire          box_addr_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_015:sink_ready -> box_addr_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_015_src_endofpacket;                                                                       // id_router_015:src_endofpacket -> rsp_xbar_demux_015:sink_endofpacket
	wire          id_router_015_src_valid;                                                                             // id_router_015:src_valid -> rsp_xbar_demux_015:sink_valid
	wire          id_router_015_src_startofpacket;                                                                     // id_router_015:src_startofpacket -> rsp_xbar_demux_015:sink_startofpacket
	wire  [134:0] id_router_015_src_data;                                                                              // id_router_015:src_data -> rsp_xbar_demux_015:sink_data
	wire   [33:0] id_router_015_src_channel;                                                                           // id_router_015:src_channel -> rsp_xbar_demux_015:sink_channel
	wire          id_router_015_src_ready;                                                                             // rsp_xbar_demux_015:sink_ready -> id_router_015:src_ready
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // addr_out_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_016:sink_endofpacket
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // addr_out_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_016:sink_valid
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // addr_out_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_016:sink_startofpacket
	wire  [134:0] addr_out_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // addr_out_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_016:sink_data
	wire          addr_out_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_016:sink_ready -> addr_out_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_016_src_endofpacket;                                                                       // id_router_016:src_endofpacket -> rsp_xbar_demux_016:sink_endofpacket
	wire          id_router_016_src_valid;                                                                             // id_router_016:src_valid -> rsp_xbar_demux_016:sink_valid
	wire          id_router_016_src_startofpacket;                                                                     // id_router_016:src_startofpacket -> rsp_xbar_demux_016:sink_startofpacket
	wire  [134:0] id_router_016_src_data;                                                                              // id_router_016:src_data -> rsp_xbar_demux_016:sink_data
	wire   [33:0] id_router_016_src_channel;                                                                           // id_router_016:src_channel -> rsp_xbar_demux_016:sink_channel
	wire          id_router_016_src_ready;                                                                             // rsp_xbar_demux_016:sink_ready -> id_router_016:src_ready
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // req_res_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_017:sink_endofpacket
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // req_res_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_017:sink_valid
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // req_res_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_017:sink_startofpacket
	wire  [134:0] req_res_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // req_res_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_017:sink_data
	wire          req_res_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_017:sink_ready -> req_res_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_017_src_endofpacket;                                                                       // id_router_017:src_endofpacket -> rsp_xbar_demux_017:sink_endofpacket
	wire          id_router_017_src_valid;                                                                             // id_router_017:src_valid -> rsp_xbar_demux_017:sink_valid
	wire          id_router_017_src_startofpacket;                                                                     // id_router_017:src_startofpacket -> rsp_xbar_demux_017:sink_startofpacket
	wire  [134:0] id_router_017_src_data;                                                                              // id_router_017:src_data -> rsp_xbar_demux_017:sink_data
	wire   [33:0] id_router_017_src_channel;                                                                           // id_router_017:src_channel -> rsp_xbar_demux_017:sink_channel
	wire          id_router_017_src_ready;                                                                             // rsp_xbar_demux_017:sink_ready -> id_router_017:src_ready
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // x_min_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_018:sink_endofpacket
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // x_min_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_018:sink_valid
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // x_min_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_018:sink_startofpacket
	wire  [134:0] x_min_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // x_min_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_018:sink_data
	wire          x_min_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_018:sink_ready -> x_min_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_018_src_endofpacket;                                                                       // id_router_018:src_endofpacket -> rsp_xbar_demux_018:sink_endofpacket
	wire          id_router_018_src_valid;                                                                             // id_router_018:src_valid -> rsp_xbar_demux_018:sink_valid
	wire          id_router_018_src_startofpacket;                                                                     // id_router_018:src_startofpacket -> rsp_xbar_demux_018:sink_startofpacket
	wire  [134:0] id_router_018_src_data;                                                                              // id_router_018:src_data -> rsp_xbar_demux_018:sink_data
	wire   [33:0] id_router_018_src_channel;                                                                           // id_router_018:src_channel -> rsp_xbar_demux_018:sink_channel
	wire          id_router_018_src_ready;                                                                             // rsp_xbar_demux_018:sink_ready -> id_router_018:src_ready
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // x_max_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_019:sink_endofpacket
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // x_max_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_019:sink_valid
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // x_max_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_019:sink_startofpacket
	wire  [134:0] x_max_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // x_max_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_019:sink_data
	wire          x_max_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_019:sink_ready -> x_max_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_019_src_endofpacket;                                                                       // id_router_019:src_endofpacket -> rsp_xbar_demux_019:sink_endofpacket
	wire          id_router_019_src_valid;                                                                             // id_router_019:src_valid -> rsp_xbar_demux_019:sink_valid
	wire          id_router_019_src_startofpacket;                                                                     // id_router_019:src_startofpacket -> rsp_xbar_demux_019:sink_startofpacket
	wire  [134:0] id_router_019_src_data;                                                                              // id_router_019:src_data -> rsp_xbar_demux_019:sink_data
	wire   [33:0] id_router_019_src_channel;                                                                           // id_router_019:src_channel -> rsp_xbar_demux_019:sink_channel
	wire          id_router_019_src_ready;                                                                             // rsp_xbar_demux_019:sink_ready -> id_router_019:src_ready
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // n_frame_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_020:sink_endofpacket
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // n_frame_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_020:sink_valid
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // n_frame_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_020:sink_startofpacket
	wire  [134:0] n_frame_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // n_frame_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_020:sink_data
	wire          n_frame_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_020:sink_ready -> n_frame_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_020_src_endofpacket;                                                                       // id_router_020:src_endofpacket -> rsp_xbar_demux_020:sink_endofpacket
	wire          id_router_020_src_valid;                                                                             // id_router_020:src_valid -> rsp_xbar_demux_020:sink_valid
	wire          id_router_020_src_startofpacket;                                                                     // id_router_020:src_startofpacket -> rsp_xbar_demux_020:sink_startofpacket
	wire  [134:0] id_router_020_src_data;                                                                              // id_router_020:src_data -> rsp_xbar_demux_020:sink_data
	wire   [33:0] id_router_020_src_channel;                                                                           // id_router_020:src_channel -> rsp_xbar_demux_020:sink_channel
	wire          id_router_020_src_ready;                                                                             // rsp_xbar_demux_020:sink_ready -> id_router_020:src_ready
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                               // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_021:sink_endofpacket
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                     // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_021:sink_valid
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                             // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_021:sink_startofpacket
	wire  [134:0] reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_data;                                      // reset_cnt_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_021:sink_data
	wire          reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                     // id_router_021:sink_ready -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_021_src_endofpacket;                                                                       // id_router_021:src_endofpacket -> rsp_xbar_demux_021:sink_endofpacket
	wire          id_router_021_src_valid;                                                                             // id_router_021:src_valid -> rsp_xbar_demux_021:sink_valid
	wire          id_router_021_src_startofpacket;                                                                     // id_router_021:src_startofpacket -> rsp_xbar_demux_021:sink_startofpacket
	wire  [134:0] id_router_021_src_data;                                                                              // id_router_021:src_data -> rsp_xbar_demux_021:sink_data
	wire   [33:0] id_router_021_src_channel;                                                                           // id_router_021:src_channel -> rsp_xbar_demux_021:sink_channel
	wire          id_router_021_src_ready;                                                                             // rsp_xbar_demux_021:sink_ready -> id_router_021:src_ready
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // sw_mass_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_022:sink_endofpacket
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // sw_mass_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_022:sink_valid
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // sw_mass_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_022:sink_startofpacket
	wire  [134:0] sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // sw_mass_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_022:sink_data
	wire          sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_022:sink_ready -> sw_mass_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_022_src_endofpacket;                                                                       // id_router_022:src_endofpacket -> rsp_xbar_demux_022:sink_endofpacket
	wire          id_router_022_src_valid;                                                                             // id_router_022:src_valid -> rsp_xbar_demux_022:sink_valid
	wire          id_router_022_src_startofpacket;                                                                     // id_router_022:src_startofpacket -> rsp_xbar_demux_022:sink_startofpacket
	wire  [134:0] id_router_022_src_data;                                                                              // id_router_022:src_data -> rsp_xbar_demux_022:sink_data
	wire   [33:0] id_router_022_src_channel;                                                                           // id_router_022:src_channel -> rsp_xbar_demux_022:sink_channel
	wire          id_router_022_src_ready;                                                                             // rsp_xbar_demux_022:sink_ready -> id_router_022:src_ready
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_023:sink_endofpacket
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_023:sink_valid
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_023:sink_startofpacket
	wire  [134:0] test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_023:sink_data
	wire          test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_023:sink_ready -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_023_src_endofpacket;                                                                       // id_router_023:src_endofpacket -> rsp_xbar_demux_023:sink_endofpacket
	wire          id_router_023_src_valid;                                                                             // id_router_023:src_valid -> rsp_xbar_demux_023:sink_valid
	wire          id_router_023_src_startofpacket;                                                                     // id_router_023:src_startofpacket -> rsp_xbar_demux_023:sink_startofpacket
	wire  [134:0] id_router_023_src_data;                                                                              // id_router_023:src_data -> rsp_xbar_demux_023:sink_data
	wire   [33:0] id_router_023_src_channel;                                                                           // id_router_023:src_channel -> rsp_xbar_demux_023:sink_channel
	wire          id_router_023_src_ready;                                                                             // rsp_xbar_demux_023:sink_ready -> id_router_023:src_ready
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // con_yark_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_024:sink_endofpacket
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // con_yark_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_024:sink_valid
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // con_yark_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_024:sink_startofpacket
	wire  [134:0] con_yark_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // con_yark_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_024:sink_data
	wire          con_yark_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_024:sink_ready -> con_yark_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_024_src_endofpacket;                                                                       // id_router_024:src_endofpacket -> rsp_xbar_demux_024:sink_endofpacket
	wire          id_router_024_src_valid;                                                                             // id_router_024:src_valid -> rsp_xbar_demux_024:sink_valid
	wire          id_router_024_src_startofpacket;                                                                     // id_router_024:src_startofpacket -> rsp_xbar_demux_024:sink_startofpacket
	wire  [134:0] id_router_024_src_data;                                                                              // id_router_024:src_data -> rsp_xbar_demux_024:sink_data
	wire   [33:0] id_router_024_src_channel;                                                                           // id_router_024:src_channel -> rsp_xbar_demux_024:sink_channel
	wire          id_router_024_src_ready;                                                                             // rsp_xbar_demux_024:sink_ready -> id_router_024:src_ready
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                    // x1_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_025:sink_endofpacket
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                          // x1_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_025:sink_valid
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                  // x1_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_025:sink_startofpacket
	wire  [134:0] x1_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                           // x1_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_025:sink_data
	wire          x1_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                          // id_router_025:sink_ready -> x1_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_025_src_endofpacket;                                                                       // id_router_025:src_endofpacket -> rsp_xbar_demux_025:sink_endofpacket
	wire          id_router_025_src_valid;                                                                             // id_router_025:src_valid -> rsp_xbar_demux_025:sink_valid
	wire          id_router_025_src_startofpacket;                                                                     // id_router_025:src_startofpacket -> rsp_xbar_demux_025:sink_startofpacket
	wire  [134:0] id_router_025_src_data;                                                                              // id_router_025:src_data -> rsp_xbar_demux_025:sink_data
	wire   [33:0] id_router_025_src_channel;                                                                           // id_router_025:src_channel -> rsp_xbar_demux_025:sink_channel
	wire          id_router_025_src_ready;                                                                             // rsp_xbar_demux_025:sink_ready -> id_router_025:src_ready
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                    // x2_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_026:sink_endofpacket
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                          // x2_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_026:sink_valid
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                  // x2_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_026:sink_startofpacket
	wire  [134:0] x2_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                           // x2_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_026:sink_data
	wire          x2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                          // id_router_026:sink_ready -> x2_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_026_src_endofpacket;                                                                       // id_router_026:src_endofpacket -> rsp_xbar_demux_026:sink_endofpacket
	wire          id_router_026_src_valid;                                                                             // id_router_026:src_valid -> rsp_xbar_demux_026:sink_valid
	wire          id_router_026_src_startofpacket;                                                                     // id_router_026:src_startofpacket -> rsp_xbar_demux_026:sink_startofpacket
	wire  [134:0] id_router_026_src_data;                                                                              // id_router_026:src_data -> rsp_xbar_demux_026:sink_data
	wire   [33:0] id_router_026_src_channel;                                                                           // id_router_026:src_channel -> rsp_xbar_demux_026:sink_channel
	wire          id_router_026_src_ready;                                                                             // rsp_xbar_demux_026:sink_ready -> id_router_026:src_ready
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                    // y1_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_027:sink_endofpacket
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                          // y1_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_027:sink_valid
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                  // y1_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_027:sink_startofpacket
	wire  [134:0] y1_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                           // y1_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_027:sink_data
	wire          y1_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                          // id_router_027:sink_ready -> y1_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_027_src_endofpacket;                                                                       // id_router_027:src_endofpacket -> rsp_xbar_demux_027:sink_endofpacket
	wire          id_router_027_src_valid;                                                                             // id_router_027:src_valid -> rsp_xbar_demux_027:sink_valid
	wire          id_router_027_src_startofpacket;                                                                     // id_router_027:src_startofpacket -> rsp_xbar_demux_027:sink_startofpacket
	wire  [134:0] id_router_027_src_data;                                                                              // id_router_027:src_data -> rsp_xbar_demux_027:sink_data
	wire   [33:0] id_router_027_src_channel;                                                                           // id_router_027:src_channel -> rsp_xbar_demux_027:sink_channel
	wire          id_router_027_src_ready;                                                                             // rsp_xbar_demux_027:sink_ready -> id_router_027:src_ready
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                    // y2_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_028:sink_endofpacket
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                          // y2_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_028:sink_valid
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                  // y2_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_028:sink_startofpacket
	wire  [134:0] y2_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                           // y2_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_028:sink_data
	wire          y2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                          // id_router_028:sink_ready -> y2_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_028_src_endofpacket;                                                                       // id_router_028:src_endofpacket -> rsp_xbar_demux_028:sink_endofpacket
	wire          id_router_028_src_valid;                                                                             // id_router_028:src_valid -> rsp_xbar_demux_028:sink_valid
	wire          id_router_028_src_startofpacket;                                                                     // id_router_028:src_startofpacket -> rsp_xbar_demux_028:sink_startofpacket
	wire  [134:0] id_router_028_src_data;                                                                              // id_router_028:src_data -> rsp_xbar_demux_028:sink_data
	wire   [33:0] id_router_028_src_channel;                                                                           // id_router_028:src_channel -> rsp_xbar_demux_028:sink_channel
	wire          id_router_028_src_ready;                                                                             // rsp_xbar_demux_028:sink_ready -> id_router_028:src_ready
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // del_x_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_029:sink_endofpacket
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // del_x_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_029:sink_valid
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // del_x_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_029:sink_startofpacket
	wire  [134:0] del_x_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // del_x_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_029:sink_data
	wire          del_x_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_029:sink_ready -> del_x_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_029_src_endofpacket;                                                                       // id_router_029:src_endofpacket -> rsp_xbar_demux_029:sink_endofpacket
	wire          id_router_029_src_valid;                                                                             // id_router_029:src_valid -> rsp_xbar_demux_029:sink_valid
	wire          id_router_029_src_startofpacket;                                                                     // id_router_029:src_startofpacket -> rsp_xbar_demux_029:sink_startofpacket
	wire  [134:0] id_router_029_src_data;                                                                              // id_router_029:src_data -> rsp_xbar_demux_029:sink_data
	wire   [33:0] id_router_029_src_channel;                                                                           // id_router_029:src_channel -> rsp_xbar_demux_029:sink_channel
	wire          id_router_029_src_ready;                                                                             // rsp_xbar_demux_029:sink_ready -> id_router_029:src_ready
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // del_y_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_030:sink_endofpacket
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // del_y_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_030:sink_valid
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // del_y_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_030:sink_startofpacket
	wire  [134:0] del_y_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // del_y_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_030:sink_data
	wire          del_y_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_030:sink_ready -> del_y_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_030_src_endofpacket;                                                                       // id_router_030:src_endofpacket -> rsp_xbar_demux_030:sink_endofpacket
	wire          id_router_030_src_valid;                                                                             // id_router_030:src_valid -> rsp_xbar_demux_030:sink_valid
	wire          id_router_030_src_startofpacket;                                                                     // id_router_030:src_startofpacket -> rsp_xbar_demux_030:sink_startofpacket
	wire  [134:0] id_router_030_src_data;                                                                              // id_router_030:src_data -> rsp_xbar_demux_030:sink_data
	wire   [33:0] id_router_030_src_channel;                                                                           // id_router_030:src_channel -> rsp_xbar_demux_030:sink_channel
	wire          id_router_030_src_ready;                                                                             // rsp_xbar_demux_030:sink_ready -> id_router_030:src_ready
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // x_cat_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_031:sink_endofpacket
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // x_cat_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_031:sink_valid
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // x_cat_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_031:sink_startofpacket
	wire  [134:0] x_cat_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // x_cat_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_031:sink_data
	wire          x_cat_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_031:sink_ready -> x_cat_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_031_src_endofpacket;                                                                       // id_router_031:src_endofpacket -> rsp_xbar_demux_031:sink_endofpacket
	wire          id_router_031_src_valid;                                                                             // id_router_031:src_valid -> rsp_xbar_demux_031:sink_valid
	wire          id_router_031_src_startofpacket;                                                                     // id_router_031:src_startofpacket -> rsp_xbar_demux_031:sink_startofpacket
	wire  [134:0] id_router_031_src_data;                                                                              // id_router_031:src_data -> rsp_xbar_demux_031:sink_data
	wire   [33:0] id_router_031_src_channel;                                                                           // id_router_031:src_channel -> rsp_xbar_demux_031:sink_channel
	wire          id_router_031_src_ready;                                                                             // rsp_xbar_demux_031:sink_ready -> id_router_031:src_ready
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                 // dx_corr_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_032:sink_endofpacket
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                       // dx_corr_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_032:sink_valid
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                               // dx_corr_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_032:sink_startofpacket
	wire  [134:0] dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_data;                                        // dx_corr_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_032:sink_data
	wire          dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                       // id_router_032:sink_ready -> dx_corr_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_032_src_endofpacket;                                                                       // id_router_032:src_endofpacket -> rsp_xbar_demux_032:sink_endofpacket
	wire          id_router_032_src_valid;                                                                             // id_router_032:src_valid -> rsp_xbar_demux_032:sink_valid
	wire          id_router_032_src_startofpacket;                                                                     // id_router_032:src_startofpacket -> rsp_xbar_demux_032:sink_startofpacket
	wire  [134:0] id_router_032_src_data;                                                                              // id_router_032:src_data -> rsp_xbar_demux_032:sink_data
	wire   [33:0] id_router_032_src_channel;                                                                           // id_router_032:src_channel -> rsp_xbar_demux_032:sink_channel
	wire          id_router_032_src_ready;                                                                             // rsp_xbar_demux_032:sink_ready -> id_router_032:src_ready
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                   // y_cut_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_033:sink_endofpacket
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                         // y_cut_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_033:sink_valid
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                 // y_cut_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_033:sink_startofpacket
	wire  [134:0] y_cut_s1_translator_avalon_universal_slave_0_agent_rp_data;                                          // y_cut_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_033:sink_data
	wire          y_cut_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                         // id_router_033:sink_ready -> y_cut_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_033_src_endofpacket;                                                                       // id_router_033:src_endofpacket -> rsp_xbar_demux_033:sink_endofpacket
	wire          id_router_033_src_valid;                                                                             // id_router_033:src_valid -> rsp_xbar_demux_033:sink_valid
	wire          id_router_033_src_startofpacket;                                                                     // id_router_033:src_startofpacket -> rsp_xbar_demux_033:sink_startofpacket
	wire  [134:0] id_router_033_src_data;                                                                              // id_router_033:src_data -> rsp_xbar_demux_033:sink_data
	wire   [33:0] id_router_033_src_channel;                                                                           // id_router_033:src_channel -> rsp_xbar_demux_033:sink_channel
	wire          id_router_033_src_ready;                                                                             // rsp_xbar_demux_033:sink_ready -> id_router_033:src_ready
	wire          addr_router_002_src_endofpacket;                                                                     // addr_router_002:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_002_src_valid;                                                                           // addr_router_002:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_002_src_startofpacket;                                                                   // addr_router_002:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [134:0] addr_router_002_src_data;                                                                            // addr_router_002:src_data -> limiter:cmd_sink_data
	wire   [33:0] addr_router_002_src_channel;                                                                         // addr_router_002:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_002_src_ready;                                                                           // limiter:cmd_sink_ready -> addr_router_002:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                         // limiter:cmd_src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                       // limiter:cmd_src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [134:0] limiter_cmd_src_data;                                                                                // limiter:cmd_src_data -> cmd_xbar_demux_002:sink_data
	wire   [33:0] limiter_cmd_src_channel;                                                                             // limiter:cmd_src_channel -> cmd_xbar_demux_002:sink_channel
	wire          limiter_cmd_src_ready;                                                                               // cmd_xbar_demux_002:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_002_src_endofpacket;                                                                    // rsp_xbar_mux_002:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                          // rsp_xbar_mux_002:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                                  // rsp_xbar_mux_002:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [134:0] rsp_xbar_mux_002_src_data;                                                                           // rsp_xbar_mux_002:src_data -> limiter:rsp_sink_data
	wire   [33:0] rsp_xbar_mux_002_src_channel;                                                                        // rsp_xbar_mux_002:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                          // limiter:rsp_sink_ready -> rsp_xbar_mux_002:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                         // limiter:rsp_src_endofpacket -> fpga_only_master_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                               // limiter:rsp_src_valid -> fpga_only_master_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                       // limiter:rsp_src_startofpacket -> fpga_only_master_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [134:0] limiter_rsp_src_data;                                                                                // limiter:rsp_src_data -> fpga_only_master_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [33:0] limiter_rsp_src_channel;                                                                             // limiter:rsp_src_channel -> fpga_only_master_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_rsp_src_ready;                                                                               // fpga_only_master_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire          addr_router_003_src_endofpacket;                                                                     // addr_router_003:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_003_src_valid;                                                                           // addr_router_003:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_003_src_startofpacket;                                                                   // addr_router_003:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [134:0] addr_router_003_src_data;                                                                            // addr_router_003:src_data -> limiter_001:cmd_sink_data
	wire   [33:0] addr_router_003_src_channel;                                                                         // addr_router_003:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_003_src_ready;                                                                           // limiter_001:cmd_sink_ready -> addr_router_003:src_ready
	wire          limiter_001_cmd_src_endofpacket;                                                                     // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_003:sink_endofpacket
	wire          limiter_001_cmd_src_startofpacket;                                                                   // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_003:sink_startofpacket
	wire  [134:0] limiter_001_cmd_src_data;                                                                            // limiter_001:cmd_src_data -> cmd_xbar_demux_003:sink_data
	wire   [33:0] limiter_001_cmd_src_channel;                                                                         // limiter_001:cmd_src_channel -> cmd_xbar_demux_003:sink_channel
	wire          limiter_001_cmd_src_ready;                                                                           // cmd_xbar_demux_003:sink_ready -> limiter_001:cmd_src_ready
	wire          rsp_xbar_mux_003_src_endofpacket;                                                                    // rsp_xbar_mux_003:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          rsp_xbar_mux_003_src_valid;                                                                          // rsp_xbar_mux_003:src_valid -> limiter_001:rsp_sink_valid
	wire          rsp_xbar_mux_003_src_startofpacket;                                                                  // rsp_xbar_mux_003:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [134:0] rsp_xbar_mux_003_src_data;                                                                           // rsp_xbar_mux_003:src_data -> limiter_001:rsp_sink_data
	wire   [33:0] rsp_xbar_mux_003_src_channel;                                                                        // rsp_xbar_mux_003:src_channel -> limiter_001:rsp_sink_channel
	wire          rsp_xbar_mux_003_src_ready;                                                                          // limiter_001:rsp_sink_ready -> rsp_xbar_mux_003:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                     // limiter_001:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                           // limiter_001:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                   // limiter_001:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire  [134:0] limiter_001_rsp_src_data;                                                                            // limiter_001:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire   [33:0] limiter_001_rsp_src_channel;                                                                         // limiter_001:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          limiter_001_rsp_src_ready;                                                                           // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> limiter_001:rsp_src_ready
	wire          addr_router_004_src_endofpacket;                                                                     // addr_router_004:src_endofpacket -> limiter_002:cmd_sink_endofpacket
	wire          addr_router_004_src_valid;                                                                           // addr_router_004:src_valid -> limiter_002:cmd_sink_valid
	wire          addr_router_004_src_startofpacket;                                                                   // addr_router_004:src_startofpacket -> limiter_002:cmd_sink_startofpacket
	wire  [134:0] addr_router_004_src_data;                                                                            // addr_router_004:src_data -> limiter_002:cmd_sink_data
	wire   [33:0] addr_router_004_src_channel;                                                                         // addr_router_004:src_channel -> limiter_002:cmd_sink_channel
	wire          addr_router_004_src_ready;                                                                           // limiter_002:cmd_sink_ready -> addr_router_004:src_ready
	wire          limiter_002_cmd_src_endofpacket;                                                                     // limiter_002:cmd_src_endofpacket -> cmd_xbar_demux_004:sink_endofpacket
	wire          limiter_002_cmd_src_startofpacket;                                                                   // limiter_002:cmd_src_startofpacket -> cmd_xbar_demux_004:sink_startofpacket
	wire  [134:0] limiter_002_cmd_src_data;                                                                            // limiter_002:cmd_src_data -> cmd_xbar_demux_004:sink_data
	wire   [33:0] limiter_002_cmd_src_channel;                                                                         // limiter_002:cmd_src_channel -> cmd_xbar_demux_004:sink_channel
	wire          limiter_002_cmd_src_ready;                                                                           // cmd_xbar_demux_004:sink_ready -> limiter_002:cmd_src_ready
	wire          rsp_xbar_mux_004_src_endofpacket;                                                                    // rsp_xbar_mux_004:src_endofpacket -> limiter_002:rsp_sink_endofpacket
	wire          rsp_xbar_mux_004_src_valid;                                                                          // rsp_xbar_mux_004:src_valid -> limiter_002:rsp_sink_valid
	wire          rsp_xbar_mux_004_src_startofpacket;                                                                  // rsp_xbar_mux_004:src_startofpacket -> limiter_002:rsp_sink_startofpacket
	wire  [134:0] rsp_xbar_mux_004_src_data;                                                                           // rsp_xbar_mux_004:src_data -> limiter_002:rsp_sink_data
	wire   [33:0] rsp_xbar_mux_004_src_channel;                                                                        // rsp_xbar_mux_004:src_channel -> limiter_002:rsp_sink_channel
	wire          rsp_xbar_mux_004_src_ready;                                                                          // limiter_002:rsp_sink_ready -> rsp_xbar_mux_004:src_ready
	wire          limiter_002_rsp_src_endofpacket;                                                                     // limiter_002:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          limiter_002_rsp_src_valid;                                                                           // limiter_002:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire          limiter_002_rsp_src_startofpacket;                                                                   // limiter_002:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire  [134:0] limiter_002_rsp_src_data;                                                                            // limiter_002:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire   [33:0] limiter_002_rsp_src_channel;                                                                         // limiter_002:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          limiter_002_rsp_src_ready;                                                                           // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> limiter_002:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                        // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                              // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                      // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [170:0] cmd_xbar_mux_src_data;                                                                               // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire   [33:0] cmd_xbar_mux_src_channel;                                                                            // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                              // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                                   // burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                         // burst_adapter:source0_valid -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                                 // burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [170:0] burst_adapter_source0_data;                                                                          // burst_adapter:source0_data -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                         // onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [33:0] burst_adapter_source0_channel;                                                                       // burst_adapter:source0_channel -> onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                    // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                          // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                                  // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_001_src_data;                                                                           // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire   [33:0] cmd_xbar_mux_001_src_channel;                                                                        // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                          // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                               // burst_adapter_001:source0_endofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                                     // burst_adapter_001:source0_valid -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                             // burst_adapter_001:source0_startofpacket -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_001_source0_data;                                                                      // burst_adapter_001:source0_data -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                                     // jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire   [33:0] burst_adapter_001_source0_channel;                                                                   // burst_adapter_001:source0_channel -> jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_endofpacket;                                                                    // cmd_xbar_mux_003:src_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                          // cmd_xbar_mux_003:src_valid -> burst_adapter_002:sink0_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                                  // cmd_xbar_mux_003:src_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_003_src_data;                                                                           // cmd_xbar_mux_003:src_data -> burst_adapter_002:sink0_data
	wire   [33:0] cmd_xbar_mux_003_src_channel;                                                                        // cmd_xbar_mux_003:src_channel -> burst_adapter_002:sink0_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                          // burst_adapter_002:sink0_ready -> cmd_xbar_mux_003:src_ready
	wire          burst_adapter_002_source0_endofpacket;                                                               // burst_adapter_002:source0_endofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_002_source0_valid;                                                                     // burst_adapter_002:source0_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_002_source0_startofpacket;                                                             // burst_adapter_002:source0_startofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_002_source0_data;                                                                      // burst_adapter_002:source0_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_002_source0_ready;                                                                     // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire   [33:0] burst_adapter_002_source0_channel;                                                                   // burst_adapter_002:source0_channel -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_004_src_endofpacket;                                                                    // cmd_xbar_mux_004:src_endofpacket -> burst_adapter_003:sink0_endofpacket
	wire          cmd_xbar_mux_004_src_valid;                                                                          // cmd_xbar_mux_004:src_valid -> burst_adapter_003:sink0_valid
	wire          cmd_xbar_mux_004_src_startofpacket;                                                                  // cmd_xbar_mux_004:src_startofpacket -> burst_adapter_003:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_004_src_data;                                                                           // cmd_xbar_mux_004:src_data -> burst_adapter_003:sink0_data
	wire   [33:0] cmd_xbar_mux_004_src_channel;                                                                        // cmd_xbar_mux_004:src_channel -> burst_adapter_003:sink0_channel
	wire          cmd_xbar_mux_004_src_ready;                                                                          // burst_adapter_003:sink0_ready -> cmd_xbar_mux_004:src_ready
	wire          burst_adapter_003_source0_endofpacket;                                                               // burst_adapter_003:source0_endofpacket -> box_x0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_003_source0_valid;                                                                     // burst_adapter_003:source0_valid -> box_x0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_003_source0_startofpacket;                                                             // burst_adapter_003:source0_startofpacket -> box_x0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_003_source0_data;                                                                      // burst_adapter_003:source0_data -> box_x0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_003_source0_ready;                                                                     // box_x0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_003:source0_ready
	wire   [33:0] burst_adapter_003_source0_channel;                                                                   // burst_adapter_003:source0_channel -> box_x0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_005_src_endofpacket;                                                                    // cmd_xbar_mux_005:src_endofpacket -> burst_adapter_004:sink0_endofpacket
	wire          cmd_xbar_mux_005_src_valid;                                                                          // cmd_xbar_mux_005:src_valid -> burst_adapter_004:sink0_valid
	wire          cmd_xbar_mux_005_src_startofpacket;                                                                  // cmd_xbar_mux_005:src_startofpacket -> burst_adapter_004:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_005_src_data;                                                                           // cmd_xbar_mux_005:src_data -> burst_adapter_004:sink0_data
	wire   [33:0] cmd_xbar_mux_005_src_channel;                                                                        // cmd_xbar_mux_005:src_channel -> burst_adapter_004:sink0_channel
	wire          cmd_xbar_mux_005_src_ready;                                                                          // burst_adapter_004:sink0_ready -> cmd_xbar_mux_005:src_ready
	wire          burst_adapter_004_source0_endofpacket;                                                               // burst_adapter_004:source0_endofpacket -> box_xn_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_004_source0_valid;                                                                     // burst_adapter_004:source0_valid -> box_xn_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_004_source0_startofpacket;                                                             // burst_adapter_004:source0_startofpacket -> box_xn_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_004_source0_data;                                                                      // burst_adapter_004:source0_data -> box_xn_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_004_source0_ready;                                                                     // box_xn_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_004:source0_ready
	wire   [33:0] burst_adapter_004_source0_channel;                                                                   // burst_adapter_004:source0_channel -> box_xn_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_006_src_endofpacket;                                                                    // cmd_xbar_mux_006:src_endofpacket -> burst_adapter_005:sink0_endofpacket
	wire          cmd_xbar_mux_006_src_valid;                                                                          // cmd_xbar_mux_006:src_valid -> burst_adapter_005:sink0_valid
	wire          cmd_xbar_mux_006_src_startofpacket;                                                                  // cmd_xbar_mux_006:src_startofpacket -> burst_adapter_005:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_006_src_data;                                                                           // cmd_xbar_mux_006:src_data -> burst_adapter_005:sink0_data
	wire   [33:0] cmd_xbar_mux_006_src_channel;                                                                        // cmd_xbar_mux_006:src_channel -> burst_adapter_005:sink0_channel
	wire          cmd_xbar_mux_006_src_ready;                                                                          // burst_adapter_005:sink0_ready -> cmd_xbar_mux_006:src_ready
	wire          burst_adapter_005_source0_endofpacket;                                                               // burst_adapter_005:source0_endofpacket -> n_fish_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_005_source0_valid;                                                                     // burst_adapter_005:source0_valid -> n_fish_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_005_source0_startofpacket;                                                             // burst_adapter_005:source0_startofpacket -> n_fish_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_005_source0_data;                                                                      // burst_adapter_005:source0_data -> n_fish_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_005_source0_ready;                                                                     // n_fish_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_005:source0_ready
	wire   [33:0] burst_adapter_005_source0_channel;                                                                   // burst_adapter_005:source0_channel -> n_fish_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_007_src_endofpacket;                                                                    // cmd_xbar_mux_007:src_endofpacket -> burst_adapter_006:sink0_endofpacket
	wire          cmd_xbar_mux_007_src_valid;                                                                          // cmd_xbar_mux_007:src_valid -> burst_adapter_006:sink0_valid
	wire          cmd_xbar_mux_007_src_startofpacket;                                                                  // cmd_xbar_mux_007:src_startofpacket -> burst_adapter_006:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_007_src_data;                                                                           // cmd_xbar_mux_007:src_data -> burst_adapter_006:sink0_data
	wire   [33:0] cmd_xbar_mux_007_src_channel;                                                                        // cmd_xbar_mux_007:src_channel -> burst_adapter_006:sink0_channel
	wire          cmd_xbar_mux_007_src_ready;                                                                          // burst_adapter_006:sink0_ready -> cmd_xbar_mux_007:src_ready
	wire          burst_adapter_006_source0_endofpacket;                                                               // burst_adapter_006:source0_endofpacket -> pio_led_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_006_source0_valid;                                                                     // burst_adapter_006:source0_valid -> pio_led_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_006_source0_startofpacket;                                                             // burst_adapter_006:source0_startofpacket -> pio_led_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_006_source0_data;                                                                      // burst_adapter_006:source0_data -> pio_led_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_006_source0_ready;                                                                     // pio_led_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_006:source0_ready
	wire   [33:0] burst_adapter_006_source0_channel;                                                                   // burst_adapter_006:source0_channel -> pio_led_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_008_src_endofpacket;                                                                    // cmd_xbar_mux_008:src_endofpacket -> burst_adapter_007:sink0_endofpacket
	wire          cmd_xbar_mux_008_src_valid;                                                                          // cmd_xbar_mux_008:src_valid -> burst_adapter_007:sink0_valid
	wire          cmd_xbar_mux_008_src_startofpacket;                                                                  // cmd_xbar_mux_008:src_startofpacket -> burst_adapter_007:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_008_src_data;                                                                           // cmd_xbar_mux_008:src_data -> burst_adapter_007:sink0_data
	wire   [33:0] cmd_xbar_mux_008_src_channel;                                                                        // cmd_xbar_mux_008:src_channel -> burst_adapter_007:sink0_channel
	wire          cmd_xbar_mux_008_src_ready;                                                                          // burst_adapter_007:sink0_ready -> cmd_xbar_mux_008:src_ready
	wire          burst_adapter_007_source0_endofpacket;                                                               // burst_adapter_007:source0_endofpacket -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_007_source0_valid;                                                                     // burst_adapter_007:source0_valid -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_007_source0_startofpacket;                                                             // burst_adapter_007:source0_startofpacket -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_007_source0_data;                                                                      // burst_adapter_007:source0_data -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_007_source0_ready;                                                                     // test_16t_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_007:source0_ready
	wire   [33:0] burst_adapter_007_source0_channel;                                                                   // burst_adapter_007:source0_channel -> test_16t_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_009_src_endofpacket;                                                                    // cmd_xbar_mux_009:src_endofpacket -> burst_adapter_008:sink0_endofpacket
	wire          cmd_xbar_mux_009_src_valid;                                                                          // cmd_xbar_mux_009:src_valid -> burst_adapter_008:sink0_valid
	wire          cmd_xbar_mux_009_src_startofpacket;                                                                  // cmd_xbar_mux_009:src_startofpacket -> burst_adapter_008:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_009_src_data;                                                                           // cmd_xbar_mux_009:src_data -> burst_adapter_008:sink0_data
	wire   [33:0] cmd_xbar_mux_009_src_channel;                                                                        // cmd_xbar_mux_009:src_channel -> burst_adapter_008:sink0_channel
	wire          cmd_xbar_mux_009_src_ready;                                                                          // burst_adapter_008:sink0_ready -> cmd_xbar_mux_009:src_ready
	wire          burst_adapter_008_source0_endofpacket;                                                               // burst_adapter_008:source0_endofpacket -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_008_source0_valid;                                                                     // burst_adapter_008:source0_valid -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_008_source0_startofpacket;                                                             // burst_adapter_008:source0_startofpacket -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_008_source0_data;                                                                      // burst_adapter_008:source0_data -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_008_source0_ready;                                                                     // test_32t_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_008:source0_ready
	wire   [33:0] burst_adapter_008_source0_channel;                                                                   // burst_adapter_008:source0_channel -> test_32t_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_010_src_endofpacket;                                                                    // cmd_xbar_mux_010:src_endofpacket -> burst_adapter_009:sink0_endofpacket
	wire          cmd_xbar_mux_010_src_valid;                                                                          // cmd_xbar_mux_010:src_valid -> burst_adapter_009:sink0_valid
	wire          cmd_xbar_mux_010_src_startofpacket;                                                                  // cmd_xbar_mux_010:src_startofpacket -> burst_adapter_009:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_010_src_data;                                                                           // cmd_xbar_mux_010:src_data -> burst_adapter_009:sink0_data
	wire   [33:0] cmd_xbar_mux_010_src_channel;                                                                        // cmd_xbar_mux_010:src_channel -> burst_adapter_009:sink0_channel
	wire          cmd_xbar_mux_010_src_ready;                                                                          // burst_adapter_009:sink0_ready -> cmd_xbar_mux_010:src_ready
	wire          burst_adapter_009_source0_endofpacket;                                                               // burst_adapter_009:source0_endofpacket -> box_y0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_009_source0_valid;                                                                     // burst_adapter_009:source0_valid -> box_y0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_009_source0_startofpacket;                                                             // burst_adapter_009:source0_startofpacket -> box_y0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_009_source0_data;                                                                      // burst_adapter_009:source0_data -> box_y0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_009_source0_ready;                                                                     // box_y0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_009:source0_ready
	wire   [33:0] burst_adapter_009_source0_channel;                                                                   // burst_adapter_009:source0_channel -> box_y0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_011_src_endofpacket;                                                                    // cmd_xbar_mux_011:src_endofpacket -> burst_adapter_010:sink0_endofpacket
	wire          cmd_xbar_mux_011_src_valid;                                                                          // cmd_xbar_mux_011:src_valid -> burst_adapter_010:sink0_valid
	wire          cmd_xbar_mux_011_src_startofpacket;                                                                  // cmd_xbar_mux_011:src_startofpacket -> burst_adapter_010:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_011_src_data;                                                                           // cmd_xbar_mux_011:src_data -> burst_adapter_010:sink0_data
	wire   [33:0] cmd_xbar_mux_011_src_channel;                                                                        // cmd_xbar_mux_011:src_channel -> burst_adapter_010:sink0_channel
	wire          cmd_xbar_mux_011_src_ready;                                                                          // burst_adapter_010:sink0_ready -> cmd_xbar_mux_011:src_ready
	wire          burst_adapter_010_source0_endofpacket;                                                               // burst_adapter_010:source0_endofpacket -> box_yn_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_010_source0_valid;                                                                     // burst_adapter_010:source0_valid -> box_yn_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_010_source0_startofpacket;                                                             // burst_adapter_010:source0_startofpacket -> box_yn_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_010_source0_data;                                                                      // burst_adapter_010:source0_data -> box_yn_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_010_source0_ready;                                                                     // box_yn_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_010:source0_ready
	wire   [33:0] burst_adapter_010_source0_channel;                                                                   // burst_adapter_010:source0_channel -> box_yn_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_012_src_endofpacket;                                                                    // cmd_xbar_mux_012:src_endofpacket -> burst_adapter_011:sink0_endofpacket
	wire          cmd_xbar_mux_012_src_valid;                                                                          // cmd_xbar_mux_012:src_valid -> burst_adapter_011:sink0_valid
	wire          cmd_xbar_mux_012_src_startofpacket;                                                                  // cmd_xbar_mux_012:src_startofpacket -> burst_adapter_011:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_012_src_data;                                                                           // cmd_xbar_mux_012:src_data -> burst_adapter_011:sink0_data
	wire   [33:0] cmd_xbar_mux_012_src_channel;                                                                        // cmd_xbar_mux_012:src_channel -> burst_adapter_011:sink0_channel
	wire          cmd_xbar_mux_012_src_ready;                                                                          // burst_adapter_011:sink0_ready -> cmd_xbar_mux_012:src_ready
	wire          burst_adapter_011_source0_endofpacket;                                                               // burst_adapter_011:source0_endofpacket -> n_pix_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_011_source0_valid;                                                                     // burst_adapter_011:source0_valid -> n_pix_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_011_source0_startofpacket;                                                             // burst_adapter_011:source0_startofpacket -> n_pix_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_011_source0_data;                                                                      // burst_adapter_011:source0_data -> n_pix_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_011_source0_ready;                                                                     // n_pix_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_011:source0_ready
	wire   [33:0] burst_adapter_011_source0_channel;                                                                   // burst_adapter_011:source0_channel -> n_pix_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_013_src_endofpacket;                                                                    // cmd_xbar_mux_013:src_endofpacket -> burst_adapter_012:sink0_endofpacket
	wire          cmd_xbar_mux_013_src_valid;                                                                          // cmd_xbar_mux_013:src_valid -> burst_adapter_012:sink0_valid
	wire          cmd_xbar_mux_013_src_startofpacket;                                                                  // cmd_xbar_mux_013:src_startofpacket -> burst_adapter_012:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_013_src_data;                                                                           // cmd_xbar_mux_013:src_data -> burst_adapter_012:sink0_data
	wire   [33:0] cmd_xbar_mux_013_src_channel;                                                                        // cmd_xbar_mux_013:src_channel -> burst_adapter_012:sink0_channel
	wire          cmd_xbar_mux_013_src_ready;                                                                          // burst_adapter_012:sink0_ready -> cmd_xbar_mux_013:src_ready
	wire          burst_adapter_012_source0_endofpacket;                                                               // burst_adapter_012:source0_endofpacket -> box_req_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_012_source0_valid;                                                                     // burst_adapter_012:source0_valid -> box_req_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_012_source0_startofpacket;                                                             // burst_adapter_012:source0_startofpacket -> box_req_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_012_source0_data;                                                                      // burst_adapter_012:source0_data -> box_req_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_012_source0_ready;                                                                     // box_req_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_012:source0_ready
	wire   [33:0] burst_adapter_012_source0_channel;                                                                   // burst_adapter_012:source0_channel -> box_req_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_014_src_endofpacket;                                                                    // cmd_xbar_mux_014:src_endofpacket -> burst_adapter_013:sink0_endofpacket
	wire          cmd_xbar_mux_014_src_valid;                                                                          // cmd_xbar_mux_014:src_valid -> burst_adapter_013:sink0_valid
	wire          cmd_xbar_mux_014_src_startofpacket;                                                                  // cmd_xbar_mux_014:src_startofpacket -> burst_adapter_013:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_014_src_data;                                                                           // cmd_xbar_mux_014:src_data -> burst_adapter_013:sink0_data
	wire   [33:0] cmd_xbar_mux_014_src_channel;                                                                        // cmd_xbar_mux_014:src_channel -> burst_adapter_013:sink0_channel
	wire          cmd_xbar_mux_014_src_ready;                                                                          // burst_adapter_013:sink0_ready -> cmd_xbar_mux_014:src_ready
	wire          burst_adapter_013_source0_endofpacket;                                                               // burst_adapter_013:source0_endofpacket -> box_n_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_013_source0_valid;                                                                     // burst_adapter_013:source0_valid -> box_n_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_013_source0_startofpacket;                                                             // burst_adapter_013:source0_startofpacket -> box_n_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_013_source0_data;                                                                      // burst_adapter_013:source0_data -> box_n_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_013_source0_ready;                                                                     // box_n_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_013:source0_ready
	wire   [33:0] burst_adapter_013_source0_channel;                                                                   // burst_adapter_013:source0_channel -> box_n_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_015_src_endofpacket;                                                                    // cmd_xbar_mux_015:src_endofpacket -> burst_adapter_014:sink0_endofpacket
	wire          cmd_xbar_mux_015_src_valid;                                                                          // cmd_xbar_mux_015:src_valid -> burst_adapter_014:sink0_valid
	wire          cmd_xbar_mux_015_src_startofpacket;                                                                  // cmd_xbar_mux_015:src_startofpacket -> burst_adapter_014:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_015_src_data;                                                                           // cmd_xbar_mux_015:src_data -> burst_adapter_014:sink0_data
	wire   [33:0] cmd_xbar_mux_015_src_channel;                                                                        // cmd_xbar_mux_015:src_channel -> burst_adapter_014:sink0_channel
	wire          cmd_xbar_mux_015_src_ready;                                                                          // burst_adapter_014:sink0_ready -> cmd_xbar_mux_015:src_ready
	wire          burst_adapter_014_source0_endofpacket;                                                               // burst_adapter_014:source0_endofpacket -> box_addr_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_014_source0_valid;                                                                     // burst_adapter_014:source0_valid -> box_addr_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_014_source0_startofpacket;                                                             // burst_adapter_014:source0_startofpacket -> box_addr_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_014_source0_data;                                                                      // burst_adapter_014:source0_data -> box_addr_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_014_source0_ready;                                                                     // box_addr_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_014:source0_ready
	wire   [33:0] burst_adapter_014_source0_channel;                                                                   // burst_adapter_014:source0_channel -> box_addr_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_016_src_endofpacket;                                                                    // cmd_xbar_mux_016:src_endofpacket -> burst_adapter_015:sink0_endofpacket
	wire          cmd_xbar_mux_016_src_valid;                                                                          // cmd_xbar_mux_016:src_valid -> burst_adapter_015:sink0_valid
	wire          cmd_xbar_mux_016_src_startofpacket;                                                                  // cmd_xbar_mux_016:src_startofpacket -> burst_adapter_015:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_016_src_data;                                                                           // cmd_xbar_mux_016:src_data -> burst_adapter_015:sink0_data
	wire   [33:0] cmd_xbar_mux_016_src_channel;                                                                        // cmd_xbar_mux_016:src_channel -> burst_adapter_015:sink0_channel
	wire          cmd_xbar_mux_016_src_ready;                                                                          // burst_adapter_015:sink0_ready -> cmd_xbar_mux_016:src_ready
	wire          burst_adapter_015_source0_endofpacket;                                                               // burst_adapter_015:source0_endofpacket -> addr_out_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_015_source0_valid;                                                                     // burst_adapter_015:source0_valid -> addr_out_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_015_source0_startofpacket;                                                             // burst_adapter_015:source0_startofpacket -> addr_out_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_015_source0_data;                                                                      // burst_adapter_015:source0_data -> addr_out_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_015_source0_ready;                                                                     // addr_out_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_015:source0_ready
	wire   [33:0] burst_adapter_015_source0_channel;                                                                   // burst_adapter_015:source0_channel -> addr_out_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_017_src_endofpacket;                                                                    // cmd_xbar_mux_017:src_endofpacket -> burst_adapter_016:sink0_endofpacket
	wire          cmd_xbar_mux_017_src_valid;                                                                          // cmd_xbar_mux_017:src_valid -> burst_adapter_016:sink0_valid
	wire          cmd_xbar_mux_017_src_startofpacket;                                                                  // cmd_xbar_mux_017:src_startofpacket -> burst_adapter_016:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_017_src_data;                                                                           // cmd_xbar_mux_017:src_data -> burst_adapter_016:sink0_data
	wire   [33:0] cmd_xbar_mux_017_src_channel;                                                                        // cmd_xbar_mux_017:src_channel -> burst_adapter_016:sink0_channel
	wire          cmd_xbar_mux_017_src_ready;                                                                          // burst_adapter_016:sink0_ready -> cmd_xbar_mux_017:src_ready
	wire          burst_adapter_016_source0_endofpacket;                                                               // burst_adapter_016:source0_endofpacket -> req_res_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_016_source0_valid;                                                                     // burst_adapter_016:source0_valid -> req_res_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_016_source0_startofpacket;                                                             // burst_adapter_016:source0_startofpacket -> req_res_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_016_source0_data;                                                                      // burst_adapter_016:source0_data -> req_res_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_016_source0_ready;                                                                     // req_res_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_016:source0_ready
	wire   [33:0] burst_adapter_016_source0_channel;                                                                   // burst_adapter_016:source0_channel -> req_res_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_018_src_endofpacket;                                                                    // cmd_xbar_mux_018:src_endofpacket -> burst_adapter_017:sink0_endofpacket
	wire          cmd_xbar_mux_018_src_valid;                                                                          // cmd_xbar_mux_018:src_valid -> burst_adapter_017:sink0_valid
	wire          cmd_xbar_mux_018_src_startofpacket;                                                                  // cmd_xbar_mux_018:src_startofpacket -> burst_adapter_017:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_018_src_data;                                                                           // cmd_xbar_mux_018:src_data -> burst_adapter_017:sink0_data
	wire   [33:0] cmd_xbar_mux_018_src_channel;                                                                        // cmd_xbar_mux_018:src_channel -> burst_adapter_017:sink0_channel
	wire          cmd_xbar_mux_018_src_ready;                                                                          // burst_adapter_017:sink0_ready -> cmd_xbar_mux_018:src_ready
	wire          burst_adapter_017_source0_endofpacket;                                                               // burst_adapter_017:source0_endofpacket -> x_min_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_017_source0_valid;                                                                     // burst_adapter_017:source0_valid -> x_min_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_017_source0_startofpacket;                                                             // burst_adapter_017:source0_startofpacket -> x_min_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_017_source0_data;                                                                      // burst_adapter_017:source0_data -> x_min_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_017_source0_ready;                                                                     // x_min_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_017:source0_ready
	wire   [33:0] burst_adapter_017_source0_channel;                                                                   // burst_adapter_017:source0_channel -> x_min_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_019_src_endofpacket;                                                                    // cmd_xbar_mux_019:src_endofpacket -> burst_adapter_018:sink0_endofpacket
	wire          cmd_xbar_mux_019_src_valid;                                                                          // cmd_xbar_mux_019:src_valid -> burst_adapter_018:sink0_valid
	wire          cmd_xbar_mux_019_src_startofpacket;                                                                  // cmd_xbar_mux_019:src_startofpacket -> burst_adapter_018:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_019_src_data;                                                                           // cmd_xbar_mux_019:src_data -> burst_adapter_018:sink0_data
	wire   [33:0] cmd_xbar_mux_019_src_channel;                                                                        // cmd_xbar_mux_019:src_channel -> burst_adapter_018:sink0_channel
	wire          cmd_xbar_mux_019_src_ready;                                                                          // burst_adapter_018:sink0_ready -> cmd_xbar_mux_019:src_ready
	wire          burst_adapter_018_source0_endofpacket;                                                               // burst_adapter_018:source0_endofpacket -> x_max_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_018_source0_valid;                                                                     // burst_adapter_018:source0_valid -> x_max_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_018_source0_startofpacket;                                                             // burst_adapter_018:source0_startofpacket -> x_max_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_018_source0_data;                                                                      // burst_adapter_018:source0_data -> x_max_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_018_source0_ready;                                                                     // x_max_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_018:source0_ready
	wire   [33:0] burst_adapter_018_source0_channel;                                                                   // burst_adapter_018:source0_channel -> x_max_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_020_src_endofpacket;                                                                    // cmd_xbar_mux_020:src_endofpacket -> burst_adapter_019:sink0_endofpacket
	wire          cmd_xbar_mux_020_src_valid;                                                                          // cmd_xbar_mux_020:src_valid -> burst_adapter_019:sink0_valid
	wire          cmd_xbar_mux_020_src_startofpacket;                                                                  // cmd_xbar_mux_020:src_startofpacket -> burst_adapter_019:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_020_src_data;                                                                           // cmd_xbar_mux_020:src_data -> burst_adapter_019:sink0_data
	wire   [33:0] cmd_xbar_mux_020_src_channel;                                                                        // cmd_xbar_mux_020:src_channel -> burst_adapter_019:sink0_channel
	wire          cmd_xbar_mux_020_src_ready;                                                                          // burst_adapter_019:sink0_ready -> cmd_xbar_mux_020:src_ready
	wire          burst_adapter_019_source0_endofpacket;                                                               // burst_adapter_019:source0_endofpacket -> n_frame_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_019_source0_valid;                                                                     // burst_adapter_019:source0_valid -> n_frame_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_019_source0_startofpacket;                                                             // burst_adapter_019:source0_startofpacket -> n_frame_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_019_source0_data;                                                                      // burst_adapter_019:source0_data -> n_frame_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_019_source0_ready;                                                                     // n_frame_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_019:source0_ready
	wire   [33:0] burst_adapter_019_source0_channel;                                                                   // burst_adapter_019:source0_channel -> n_frame_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_021_src_endofpacket;                                                                    // cmd_xbar_mux_021:src_endofpacket -> burst_adapter_020:sink0_endofpacket
	wire          cmd_xbar_mux_021_src_valid;                                                                          // cmd_xbar_mux_021:src_valid -> burst_adapter_020:sink0_valid
	wire          cmd_xbar_mux_021_src_startofpacket;                                                                  // cmd_xbar_mux_021:src_startofpacket -> burst_adapter_020:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_021_src_data;                                                                           // cmd_xbar_mux_021:src_data -> burst_adapter_020:sink0_data
	wire   [33:0] cmd_xbar_mux_021_src_channel;                                                                        // cmd_xbar_mux_021:src_channel -> burst_adapter_020:sink0_channel
	wire          cmd_xbar_mux_021_src_ready;                                                                          // burst_adapter_020:sink0_ready -> cmd_xbar_mux_021:src_ready
	wire          burst_adapter_020_source0_endofpacket;                                                               // burst_adapter_020:source0_endofpacket -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_020_source0_valid;                                                                     // burst_adapter_020:source0_valid -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_020_source0_startofpacket;                                                             // burst_adapter_020:source0_startofpacket -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_020_source0_data;                                                                      // burst_adapter_020:source0_data -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_020_source0_ready;                                                                     // reset_cnt_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_020:source0_ready
	wire   [33:0] burst_adapter_020_source0_channel;                                                                   // burst_adapter_020:source0_channel -> reset_cnt_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_022_src_endofpacket;                                                                    // cmd_xbar_mux_022:src_endofpacket -> burst_adapter_021:sink0_endofpacket
	wire          cmd_xbar_mux_022_src_valid;                                                                          // cmd_xbar_mux_022:src_valid -> burst_adapter_021:sink0_valid
	wire          cmd_xbar_mux_022_src_startofpacket;                                                                  // cmd_xbar_mux_022:src_startofpacket -> burst_adapter_021:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_022_src_data;                                                                           // cmd_xbar_mux_022:src_data -> burst_adapter_021:sink0_data
	wire   [33:0] cmd_xbar_mux_022_src_channel;                                                                        // cmd_xbar_mux_022:src_channel -> burst_adapter_021:sink0_channel
	wire          cmd_xbar_mux_022_src_ready;                                                                          // burst_adapter_021:sink0_ready -> cmd_xbar_mux_022:src_ready
	wire          burst_adapter_021_source0_endofpacket;                                                               // burst_adapter_021:source0_endofpacket -> sw_mass_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_021_source0_valid;                                                                     // burst_adapter_021:source0_valid -> sw_mass_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_021_source0_startofpacket;                                                             // burst_adapter_021:source0_startofpacket -> sw_mass_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_021_source0_data;                                                                      // burst_adapter_021:source0_data -> sw_mass_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_021_source0_ready;                                                                     // sw_mass_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_021:source0_ready
	wire   [33:0] burst_adapter_021_source0_channel;                                                                   // burst_adapter_021:source0_channel -> sw_mass_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_023_src_endofpacket;                                                                    // cmd_xbar_mux_023:src_endofpacket -> burst_adapter_022:sink0_endofpacket
	wire          cmd_xbar_mux_023_src_valid;                                                                          // cmd_xbar_mux_023:src_valid -> burst_adapter_022:sink0_valid
	wire          cmd_xbar_mux_023_src_startofpacket;                                                                  // cmd_xbar_mux_023:src_startofpacket -> burst_adapter_022:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_023_src_data;                                                                           // cmd_xbar_mux_023:src_data -> burst_adapter_022:sink0_data
	wire   [33:0] cmd_xbar_mux_023_src_channel;                                                                        // cmd_xbar_mux_023:src_channel -> burst_adapter_022:sink0_channel
	wire          cmd_xbar_mux_023_src_ready;                                                                          // burst_adapter_022:sink0_ready -> cmd_xbar_mux_023:src_ready
	wire          burst_adapter_022_source0_endofpacket;                                                               // burst_adapter_022:source0_endofpacket -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_022_source0_valid;                                                                     // burst_adapter_022:source0_valid -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_022_source0_startofpacket;                                                             // burst_adapter_022:source0_startofpacket -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_022_source0_data;                                                                      // burst_adapter_022:source0_data -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_022_source0_ready;                                                                     // test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_022:source0_ready
	wire   [33:0] burst_adapter_022_source0_channel;                                                                   // burst_adapter_022:source0_channel -> test_cnt_balls_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_024_src_endofpacket;                                                                    // cmd_xbar_mux_024:src_endofpacket -> burst_adapter_023:sink0_endofpacket
	wire          cmd_xbar_mux_024_src_valid;                                                                          // cmd_xbar_mux_024:src_valid -> burst_adapter_023:sink0_valid
	wire          cmd_xbar_mux_024_src_startofpacket;                                                                  // cmd_xbar_mux_024:src_startofpacket -> burst_adapter_023:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_024_src_data;                                                                           // cmd_xbar_mux_024:src_data -> burst_adapter_023:sink0_data
	wire   [33:0] cmd_xbar_mux_024_src_channel;                                                                        // cmd_xbar_mux_024:src_channel -> burst_adapter_023:sink0_channel
	wire          cmd_xbar_mux_024_src_ready;                                                                          // burst_adapter_023:sink0_ready -> cmd_xbar_mux_024:src_ready
	wire          burst_adapter_023_source0_endofpacket;                                                               // burst_adapter_023:source0_endofpacket -> con_yark_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_023_source0_valid;                                                                     // burst_adapter_023:source0_valid -> con_yark_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_023_source0_startofpacket;                                                             // burst_adapter_023:source0_startofpacket -> con_yark_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_023_source0_data;                                                                      // burst_adapter_023:source0_data -> con_yark_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_023_source0_ready;                                                                     // con_yark_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_023:source0_ready
	wire   [33:0] burst_adapter_023_source0_channel;                                                                   // burst_adapter_023:source0_channel -> con_yark_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_025_src_endofpacket;                                                                    // cmd_xbar_mux_025:src_endofpacket -> burst_adapter_024:sink0_endofpacket
	wire          cmd_xbar_mux_025_src_valid;                                                                          // cmd_xbar_mux_025:src_valid -> burst_adapter_024:sink0_valid
	wire          cmd_xbar_mux_025_src_startofpacket;                                                                  // cmd_xbar_mux_025:src_startofpacket -> burst_adapter_024:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_025_src_data;                                                                           // cmd_xbar_mux_025:src_data -> burst_adapter_024:sink0_data
	wire   [33:0] cmd_xbar_mux_025_src_channel;                                                                        // cmd_xbar_mux_025:src_channel -> burst_adapter_024:sink0_channel
	wire          cmd_xbar_mux_025_src_ready;                                                                          // burst_adapter_024:sink0_ready -> cmd_xbar_mux_025:src_ready
	wire          burst_adapter_024_source0_endofpacket;                                                               // burst_adapter_024:source0_endofpacket -> x1_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_024_source0_valid;                                                                     // burst_adapter_024:source0_valid -> x1_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_024_source0_startofpacket;                                                             // burst_adapter_024:source0_startofpacket -> x1_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_024_source0_data;                                                                      // burst_adapter_024:source0_data -> x1_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_024_source0_ready;                                                                     // x1_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_024:source0_ready
	wire   [33:0] burst_adapter_024_source0_channel;                                                                   // burst_adapter_024:source0_channel -> x1_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_026_src_endofpacket;                                                                    // cmd_xbar_mux_026:src_endofpacket -> burst_adapter_025:sink0_endofpacket
	wire          cmd_xbar_mux_026_src_valid;                                                                          // cmd_xbar_mux_026:src_valid -> burst_adapter_025:sink0_valid
	wire          cmd_xbar_mux_026_src_startofpacket;                                                                  // cmd_xbar_mux_026:src_startofpacket -> burst_adapter_025:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_026_src_data;                                                                           // cmd_xbar_mux_026:src_data -> burst_adapter_025:sink0_data
	wire   [33:0] cmd_xbar_mux_026_src_channel;                                                                        // cmd_xbar_mux_026:src_channel -> burst_adapter_025:sink0_channel
	wire          cmd_xbar_mux_026_src_ready;                                                                          // burst_adapter_025:sink0_ready -> cmd_xbar_mux_026:src_ready
	wire          burst_adapter_025_source0_endofpacket;                                                               // burst_adapter_025:source0_endofpacket -> x2_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_025_source0_valid;                                                                     // burst_adapter_025:source0_valid -> x2_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_025_source0_startofpacket;                                                             // burst_adapter_025:source0_startofpacket -> x2_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_025_source0_data;                                                                      // burst_adapter_025:source0_data -> x2_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_025_source0_ready;                                                                     // x2_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_025:source0_ready
	wire   [33:0] burst_adapter_025_source0_channel;                                                                   // burst_adapter_025:source0_channel -> x2_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_027_src_endofpacket;                                                                    // cmd_xbar_mux_027:src_endofpacket -> burst_adapter_026:sink0_endofpacket
	wire          cmd_xbar_mux_027_src_valid;                                                                          // cmd_xbar_mux_027:src_valid -> burst_adapter_026:sink0_valid
	wire          cmd_xbar_mux_027_src_startofpacket;                                                                  // cmd_xbar_mux_027:src_startofpacket -> burst_adapter_026:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_027_src_data;                                                                           // cmd_xbar_mux_027:src_data -> burst_adapter_026:sink0_data
	wire   [33:0] cmd_xbar_mux_027_src_channel;                                                                        // cmd_xbar_mux_027:src_channel -> burst_adapter_026:sink0_channel
	wire          cmd_xbar_mux_027_src_ready;                                                                          // burst_adapter_026:sink0_ready -> cmd_xbar_mux_027:src_ready
	wire          burst_adapter_026_source0_endofpacket;                                                               // burst_adapter_026:source0_endofpacket -> y1_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_026_source0_valid;                                                                     // burst_adapter_026:source0_valid -> y1_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_026_source0_startofpacket;                                                             // burst_adapter_026:source0_startofpacket -> y1_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_026_source0_data;                                                                      // burst_adapter_026:source0_data -> y1_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_026_source0_ready;                                                                     // y1_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_026:source0_ready
	wire   [33:0] burst_adapter_026_source0_channel;                                                                   // burst_adapter_026:source0_channel -> y1_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_028_src_endofpacket;                                                                    // cmd_xbar_mux_028:src_endofpacket -> burst_adapter_027:sink0_endofpacket
	wire          cmd_xbar_mux_028_src_valid;                                                                          // cmd_xbar_mux_028:src_valid -> burst_adapter_027:sink0_valid
	wire          cmd_xbar_mux_028_src_startofpacket;                                                                  // cmd_xbar_mux_028:src_startofpacket -> burst_adapter_027:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_028_src_data;                                                                           // cmd_xbar_mux_028:src_data -> burst_adapter_027:sink0_data
	wire   [33:0] cmd_xbar_mux_028_src_channel;                                                                        // cmd_xbar_mux_028:src_channel -> burst_adapter_027:sink0_channel
	wire          cmd_xbar_mux_028_src_ready;                                                                          // burst_adapter_027:sink0_ready -> cmd_xbar_mux_028:src_ready
	wire          burst_adapter_027_source0_endofpacket;                                                               // burst_adapter_027:source0_endofpacket -> y2_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_027_source0_valid;                                                                     // burst_adapter_027:source0_valid -> y2_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_027_source0_startofpacket;                                                             // burst_adapter_027:source0_startofpacket -> y2_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_027_source0_data;                                                                      // burst_adapter_027:source0_data -> y2_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_027_source0_ready;                                                                     // y2_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_027:source0_ready
	wire   [33:0] burst_adapter_027_source0_channel;                                                                   // burst_adapter_027:source0_channel -> y2_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_029_src_endofpacket;                                                                    // cmd_xbar_mux_029:src_endofpacket -> burst_adapter_028:sink0_endofpacket
	wire          cmd_xbar_mux_029_src_valid;                                                                          // cmd_xbar_mux_029:src_valid -> burst_adapter_028:sink0_valid
	wire          cmd_xbar_mux_029_src_startofpacket;                                                                  // cmd_xbar_mux_029:src_startofpacket -> burst_adapter_028:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_029_src_data;                                                                           // cmd_xbar_mux_029:src_data -> burst_adapter_028:sink0_data
	wire   [33:0] cmd_xbar_mux_029_src_channel;                                                                        // cmd_xbar_mux_029:src_channel -> burst_adapter_028:sink0_channel
	wire          cmd_xbar_mux_029_src_ready;                                                                          // burst_adapter_028:sink0_ready -> cmd_xbar_mux_029:src_ready
	wire          burst_adapter_028_source0_endofpacket;                                                               // burst_adapter_028:source0_endofpacket -> del_x_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_028_source0_valid;                                                                     // burst_adapter_028:source0_valid -> del_x_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_028_source0_startofpacket;                                                             // burst_adapter_028:source0_startofpacket -> del_x_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_028_source0_data;                                                                      // burst_adapter_028:source0_data -> del_x_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_028_source0_ready;                                                                     // del_x_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_028:source0_ready
	wire   [33:0] burst_adapter_028_source0_channel;                                                                   // burst_adapter_028:source0_channel -> del_x_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_030_src_endofpacket;                                                                    // cmd_xbar_mux_030:src_endofpacket -> burst_adapter_029:sink0_endofpacket
	wire          cmd_xbar_mux_030_src_valid;                                                                          // cmd_xbar_mux_030:src_valid -> burst_adapter_029:sink0_valid
	wire          cmd_xbar_mux_030_src_startofpacket;                                                                  // cmd_xbar_mux_030:src_startofpacket -> burst_adapter_029:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_030_src_data;                                                                           // cmd_xbar_mux_030:src_data -> burst_adapter_029:sink0_data
	wire   [33:0] cmd_xbar_mux_030_src_channel;                                                                        // cmd_xbar_mux_030:src_channel -> burst_adapter_029:sink0_channel
	wire          cmd_xbar_mux_030_src_ready;                                                                          // burst_adapter_029:sink0_ready -> cmd_xbar_mux_030:src_ready
	wire          burst_adapter_029_source0_endofpacket;                                                               // burst_adapter_029:source0_endofpacket -> del_y_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_029_source0_valid;                                                                     // burst_adapter_029:source0_valid -> del_y_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_029_source0_startofpacket;                                                             // burst_adapter_029:source0_startofpacket -> del_y_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_029_source0_data;                                                                      // burst_adapter_029:source0_data -> del_y_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_029_source0_ready;                                                                     // del_y_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_029:source0_ready
	wire   [33:0] burst_adapter_029_source0_channel;                                                                   // burst_adapter_029:source0_channel -> del_y_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_031_src_endofpacket;                                                                    // cmd_xbar_mux_031:src_endofpacket -> burst_adapter_030:sink0_endofpacket
	wire          cmd_xbar_mux_031_src_valid;                                                                          // cmd_xbar_mux_031:src_valid -> burst_adapter_030:sink0_valid
	wire          cmd_xbar_mux_031_src_startofpacket;                                                                  // cmd_xbar_mux_031:src_startofpacket -> burst_adapter_030:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_031_src_data;                                                                           // cmd_xbar_mux_031:src_data -> burst_adapter_030:sink0_data
	wire   [33:0] cmd_xbar_mux_031_src_channel;                                                                        // cmd_xbar_mux_031:src_channel -> burst_adapter_030:sink0_channel
	wire          cmd_xbar_mux_031_src_ready;                                                                          // burst_adapter_030:sink0_ready -> cmd_xbar_mux_031:src_ready
	wire          burst_adapter_030_source0_endofpacket;                                                               // burst_adapter_030:source0_endofpacket -> x_cat_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_030_source0_valid;                                                                     // burst_adapter_030:source0_valid -> x_cat_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_030_source0_startofpacket;                                                             // burst_adapter_030:source0_startofpacket -> x_cat_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_030_source0_data;                                                                      // burst_adapter_030:source0_data -> x_cat_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_030_source0_ready;                                                                     // x_cat_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_030:source0_ready
	wire   [33:0] burst_adapter_030_source0_channel;                                                                   // burst_adapter_030:source0_channel -> x_cat_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_032_src_endofpacket;                                                                    // cmd_xbar_mux_032:src_endofpacket -> burst_adapter_031:sink0_endofpacket
	wire          cmd_xbar_mux_032_src_valid;                                                                          // cmd_xbar_mux_032:src_valid -> burst_adapter_031:sink0_valid
	wire          cmd_xbar_mux_032_src_startofpacket;                                                                  // cmd_xbar_mux_032:src_startofpacket -> burst_adapter_031:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_032_src_data;                                                                           // cmd_xbar_mux_032:src_data -> burst_adapter_031:sink0_data
	wire   [33:0] cmd_xbar_mux_032_src_channel;                                                                        // cmd_xbar_mux_032:src_channel -> burst_adapter_031:sink0_channel
	wire          cmd_xbar_mux_032_src_ready;                                                                          // burst_adapter_031:sink0_ready -> cmd_xbar_mux_032:src_ready
	wire          burst_adapter_031_source0_endofpacket;                                                               // burst_adapter_031:source0_endofpacket -> dx_corr_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_031_source0_valid;                                                                     // burst_adapter_031:source0_valid -> dx_corr_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_031_source0_startofpacket;                                                             // burst_adapter_031:source0_startofpacket -> dx_corr_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_031_source0_data;                                                                      // burst_adapter_031:source0_data -> dx_corr_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_031_source0_ready;                                                                     // dx_corr_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_031:source0_ready
	wire   [33:0] burst_adapter_031_source0_channel;                                                                   // burst_adapter_031:source0_channel -> dx_corr_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_033_src_endofpacket;                                                                    // cmd_xbar_mux_033:src_endofpacket -> burst_adapter_032:sink0_endofpacket
	wire          cmd_xbar_mux_033_src_valid;                                                                          // cmd_xbar_mux_033:src_valid -> burst_adapter_032:sink0_valid
	wire          cmd_xbar_mux_033_src_startofpacket;                                                                  // cmd_xbar_mux_033:src_startofpacket -> burst_adapter_032:sink0_startofpacket
	wire  [134:0] cmd_xbar_mux_033_src_data;                                                                           // cmd_xbar_mux_033:src_data -> burst_adapter_032:sink0_data
	wire   [33:0] cmd_xbar_mux_033_src_channel;                                                                        // cmd_xbar_mux_033:src_channel -> burst_adapter_032:sink0_channel
	wire          cmd_xbar_mux_033_src_ready;                                                                          // burst_adapter_032:sink0_ready -> cmd_xbar_mux_033:src_ready
	wire          burst_adapter_032_source0_endofpacket;                                                               // burst_adapter_032:source0_endofpacket -> y_cut_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_032_source0_valid;                                                                     // burst_adapter_032:source0_valid -> y_cut_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_032_source0_startofpacket;                                                             // burst_adapter_032:source0_startofpacket -> y_cut_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [134:0] burst_adapter_032_source0_data;                                                                      // burst_adapter_032:source0_data -> y_cut_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_032_source0_ready;                                                                     // y_cut_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_032:source0_ready
	wire   [33:0] burst_adapter_032_source0_channel;                                                                   // burst_adapter_032:source0_channel -> y_cut_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                                     // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                           // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                   // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [170:0] cmd_xbar_demux_src0_data;                                                                            // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [33:0] cmd_xbar_demux_src0_channel;                                                                         // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                           // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                                 // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                       // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                               // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [170:0] cmd_xbar_demux_001_src0_data;                                                                        // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [33:0] cmd_xbar_demux_001_src0_channel;                                                                     // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                       // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_002_src1_endofpacket;                                                                 // cmd_xbar_demux_002:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_002_src1_valid;                                                                       // cmd_xbar_demux_002:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_002_src1_startofpacket;                                                               // cmd_xbar_demux_002:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src1_data;                                                                        // cmd_xbar_demux_002:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src1_channel;                                                                     // cmd_xbar_demux_002:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_002_src1_ready;                                                                       // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux_002:src1_ready
	wire          cmd_xbar_demux_002_src2_endofpacket;                                                                 // cmd_xbar_demux_002:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_002_src2_valid;                                                                       // cmd_xbar_demux_002:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_002_src2_startofpacket;                                                               // cmd_xbar_demux_002:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src2_data;                                                                        // cmd_xbar_demux_002:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src2_channel;                                                                     // cmd_xbar_demux_002:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_002_src2_ready;                                                                       // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux_002:src2_ready
	wire          cmd_xbar_demux_002_src3_endofpacket;                                                                 // cmd_xbar_demux_002:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          cmd_xbar_demux_002_src3_valid;                                                                       // cmd_xbar_demux_002:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire          cmd_xbar_demux_002_src3_startofpacket;                                                               // cmd_xbar_demux_002:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src3_data;                                                                        // cmd_xbar_demux_002:src3_data -> cmd_xbar_mux_003:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src3_channel;                                                                     // cmd_xbar_demux_002:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire          cmd_xbar_demux_002_src3_ready;                                                                       // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux_002:src3_ready
	wire          cmd_xbar_demux_002_src4_endofpacket;                                                                 // cmd_xbar_demux_002:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire          cmd_xbar_demux_002_src4_valid;                                                                       // cmd_xbar_demux_002:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire          cmd_xbar_demux_002_src4_startofpacket;                                                               // cmd_xbar_demux_002:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src4_data;                                                                        // cmd_xbar_demux_002:src4_data -> cmd_xbar_mux_004:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src4_channel;                                                                     // cmd_xbar_demux_002:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire          cmd_xbar_demux_002_src4_ready;                                                                       // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux_002:src4_ready
	wire          cmd_xbar_demux_002_src5_endofpacket;                                                                 // cmd_xbar_demux_002:src5_endofpacket -> cmd_xbar_mux_005:sink0_endofpacket
	wire          cmd_xbar_demux_002_src5_valid;                                                                       // cmd_xbar_demux_002:src5_valid -> cmd_xbar_mux_005:sink0_valid
	wire          cmd_xbar_demux_002_src5_startofpacket;                                                               // cmd_xbar_demux_002:src5_startofpacket -> cmd_xbar_mux_005:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src5_data;                                                                        // cmd_xbar_demux_002:src5_data -> cmd_xbar_mux_005:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src5_channel;                                                                     // cmd_xbar_demux_002:src5_channel -> cmd_xbar_mux_005:sink0_channel
	wire          cmd_xbar_demux_002_src5_ready;                                                                       // cmd_xbar_mux_005:sink0_ready -> cmd_xbar_demux_002:src5_ready
	wire          cmd_xbar_demux_002_src6_endofpacket;                                                                 // cmd_xbar_demux_002:src6_endofpacket -> cmd_xbar_mux_006:sink0_endofpacket
	wire          cmd_xbar_demux_002_src6_valid;                                                                       // cmd_xbar_demux_002:src6_valid -> cmd_xbar_mux_006:sink0_valid
	wire          cmd_xbar_demux_002_src6_startofpacket;                                                               // cmd_xbar_demux_002:src6_startofpacket -> cmd_xbar_mux_006:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src6_data;                                                                        // cmd_xbar_demux_002:src6_data -> cmd_xbar_mux_006:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src6_channel;                                                                     // cmd_xbar_demux_002:src6_channel -> cmd_xbar_mux_006:sink0_channel
	wire          cmd_xbar_demux_002_src6_ready;                                                                       // cmd_xbar_mux_006:sink0_ready -> cmd_xbar_demux_002:src6_ready
	wire          cmd_xbar_demux_002_src7_endofpacket;                                                                 // cmd_xbar_demux_002:src7_endofpacket -> cmd_xbar_mux_007:sink0_endofpacket
	wire          cmd_xbar_demux_002_src7_valid;                                                                       // cmd_xbar_demux_002:src7_valid -> cmd_xbar_mux_007:sink0_valid
	wire          cmd_xbar_demux_002_src7_startofpacket;                                                               // cmd_xbar_demux_002:src7_startofpacket -> cmd_xbar_mux_007:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src7_data;                                                                        // cmd_xbar_demux_002:src7_data -> cmd_xbar_mux_007:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src7_channel;                                                                     // cmd_xbar_demux_002:src7_channel -> cmd_xbar_mux_007:sink0_channel
	wire          cmd_xbar_demux_002_src7_ready;                                                                       // cmd_xbar_mux_007:sink0_ready -> cmd_xbar_demux_002:src7_ready
	wire          cmd_xbar_demux_002_src8_endofpacket;                                                                 // cmd_xbar_demux_002:src8_endofpacket -> cmd_xbar_mux_008:sink0_endofpacket
	wire          cmd_xbar_demux_002_src8_valid;                                                                       // cmd_xbar_demux_002:src8_valid -> cmd_xbar_mux_008:sink0_valid
	wire          cmd_xbar_demux_002_src8_startofpacket;                                                               // cmd_xbar_demux_002:src8_startofpacket -> cmd_xbar_mux_008:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src8_data;                                                                        // cmd_xbar_demux_002:src8_data -> cmd_xbar_mux_008:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src8_channel;                                                                     // cmd_xbar_demux_002:src8_channel -> cmd_xbar_mux_008:sink0_channel
	wire          cmd_xbar_demux_002_src8_ready;                                                                       // cmd_xbar_mux_008:sink0_ready -> cmd_xbar_demux_002:src8_ready
	wire          cmd_xbar_demux_002_src9_endofpacket;                                                                 // cmd_xbar_demux_002:src9_endofpacket -> cmd_xbar_mux_009:sink0_endofpacket
	wire          cmd_xbar_demux_002_src9_valid;                                                                       // cmd_xbar_demux_002:src9_valid -> cmd_xbar_mux_009:sink0_valid
	wire          cmd_xbar_demux_002_src9_startofpacket;                                                               // cmd_xbar_demux_002:src9_startofpacket -> cmd_xbar_mux_009:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src9_data;                                                                        // cmd_xbar_demux_002:src9_data -> cmd_xbar_mux_009:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src9_channel;                                                                     // cmd_xbar_demux_002:src9_channel -> cmd_xbar_mux_009:sink0_channel
	wire          cmd_xbar_demux_002_src9_ready;                                                                       // cmd_xbar_mux_009:sink0_ready -> cmd_xbar_demux_002:src9_ready
	wire          cmd_xbar_demux_002_src10_endofpacket;                                                                // cmd_xbar_demux_002:src10_endofpacket -> cmd_xbar_mux_010:sink0_endofpacket
	wire          cmd_xbar_demux_002_src10_valid;                                                                      // cmd_xbar_demux_002:src10_valid -> cmd_xbar_mux_010:sink0_valid
	wire          cmd_xbar_demux_002_src10_startofpacket;                                                              // cmd_xbar_demux_002:src10_startofpacket -> cmd_xbar_mux_010:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src10_data;                                                                       // cmd_xbar_demux_002:src10_data -> cmd_xbar_mux_010:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src10_channel;                                                                    // cmd_xbar_demux_002:src10_channel -> cmd_xbar_mux_010:sink0_channel
	wire          cmd_xbar_demux_002_src10_ready;                                                                      // cmd_xbar_mux_010:sink0_ready -> cmd_xbar_demux_002:src10_ready
	wire          cmd_xbar_demux_002_src11_endofpacket;                                                                // cmd_xbar_demux_002:src11_endofpacket -> cmd_xbar_mux_011:sink0_endofpacket
	wire          cmd_xbar_demux_002_src11_valid;                                                                      // cmd_xbar_demux_002:src11_valid -> cmd_xbar_mux_011:sink0_valid
	wire          cmd_xbar_demux_002_src11_startofpacket;                                                              // cmd_xbar_demux_002:src11_startofpacket -> cmd_xbar_mux_011:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src11_data;                                                                       // cmd_xbar_demux_002:src11_data -> cmd_xbar_mux_011:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src11_channel;                                                                    // cmd_xbar_demux_002:src11_channel -> cmd_xbar_mux_011:sink0_channel
	wire          cmd_xbar_demux_002_src11_ready;                                                                      // cmd_xbar_mux_011:sink0_ready -> cmd_xbar_demux_002:src11_ready
	wire          cmd_xbar_demux_002_src12_endofpacket;                                                                // cmd_xbar_demux_002:src12_endofpacket -> cmd_xbar_mux_012:sink0_endofpacket
	wire          cmd_xbar_demux_002_src12_valid;                                                                      // cmd_xbar_demux_002:src12_valid -> cmd_xbar_mux_012:sink0_valid
	wire          cmd_xbar_demux_002_src12_startofpacket;                                                              // cmd_xbar_demux_002:src12_startofpacket -> cmd_xbar_mux_012:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src12_data;                                                                       // cmd_xbar_demux_002:src12_data -> cmd_xbar_mux_012:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src12_channel;                                                                    // cmd_xbar_demux_002:src12_channel -> cmd_xbar_mux_012:sink0_channel
	wire          cmd_xbar_demux_002_src12_ready;                                                                      // cmd_xbar_mux_012:sink0_ready -> cmd_xbar_demux_002:src12_ready
	wire          cmd_xbar_demux_002_src13_endofpacket;                                                                // cmd_xbar_demux_002:src13_endofpacket -> cmd_xbar_mux_013:sink0_endofpacket
	wire          cmd_xbar_demux_002_src13_valid;                                                                      // cmd_xbar_demux_002:src13_valid -> cmd_xbar_mux_013:sink0_valid
	wire          cmd_xbar_demux_002_src13_startofpacket;                                                              // cmd_xbar_demux_002:src13_startofpacket -> cmd_xbar_mux_013:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src13_data;                                                                       // cmd_xbar_demux_002:src13_data -> cmd_xbar_mux_013:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src13_channel;                                                                    // cmd_xbar_demux_002:src13_channel -> cmd_xbar_mux_013:sink0_channel
	wire          cmd_xbar_demux_002_src13_ready;                                                                      // cmd_xbar_mux_013:sink0_ready -> cmd_xbar_demux_002:src13_ready
	wire          cmd_xbar_demux_002_src14_endofpacket;                                                                // cmd_xbar_demux_002:src14_endofpacket -> cmd_xbar_mux_014:sink0_endofpacket
	wire          cmd_xbar_demux_002_src14_valid;                                                                      // cmd_xbar_demux_002:src14_valid -> cmd_xbar_mux_014:sink0_valid
	wire          cmd_xbar_demux_002_src14_startofpacket;                                                              // cmd_xbar_demux_002:src14_startofpacket -> cmd_xbar_mux_014:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src14_data;                                                                       // cmd_xbar_demux_002:src14_data -> cmd_xbar_mux_014:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src14_channel;                                                                    // cmd_xbar_demux_002:src14_channel -> cmd_xbar_mux_014:sink0_channel
	wire          cmd_xbar_demux_002_src14_ready;                                                                      // cmd_xbar_mux_014:sink0_ready -> cmd_xbar_demux_002:src14_ready
	wire          cmd_xbar_demux_002_src15_endofpacket;                                                                // cmd_xbar_demux_002:src15_endofpacket -> cmd_xbar_mux_015:sink0_endofpacket
	wire          cmd_xbar_demux_002_src15_valid;                                                                      // cmd_xbar_demux_002:src15_valid -> cmd_xbar_mux_015:sink0_valid
	wire          cmd_xbar_demux_002_src15_startofpacket;                                                              // cmd_xbar_demux_002:src15_startofpacket -> cmd_xbar_mux_015:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src15_data;                                                                       // cmd_xbar_demux_002:src15_data -> cmd_xbar_mux_015:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src15_channel;                                                                    // cmd_xbar_demux_002:src15_channel -> cmd_xbar_mux_015:sink0_channel
	wire          cmd_xbar_demux_002_src15_ready;                                                                      // cmd_xbar_mux_015:sink0_ready -> cmd_xbar_demux_002:src15_ready
	wire          cmd_xbar_demux_002_src16_endofpacket;                                                                // cmd_xbar_demux_002:src16_endofpacket -> cmd_xbar_mux_016:sink0_endofpacket
	wire          cmd_xbar_demux_002_src16_valid;                                                                      // cmd_xbar_demux_002:src16_valid -> cmd_xbar_mux_016:sink0_valid
	wire          cmd_xbar_demux_002_src16_startofpacket;                                                              // cmd_xbar_demux_002:src16_startofpacket -> cmd_xbar_mux_016:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src16_data;                                                                       // cmd_xbar_demux_002:src16_data -> cmd_xbar_mux_016:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src16_channel;                                                                    // cmd_xbar_demux_002:src16_channel -> cmd_xbar_mux_016:sink0_channel
	wire          cmd_xbar_demux_002_src16_ready;                                                                      // cmd_xbar_mux_016:sink0_ready -> cmd_xbar_demux_002:src16_ready
	wire          cmd_xbar_demux_002_src17_endofpacket;                                                                // cmd_xbar_demux_002:src17_endofpacket -> cmd_xbar_mux_017:sink0_endofpacket
	wire          cmd_xbar_demux_002_src17_valid;                                                                      // cmd_xbar_demux_002:src17_valid -> cmd_xbar_mux_017:sink0_valid
	wire          cmd_xbar_demux_002_src17_startofpacket;                                                              // cmd_xbar_demux_002:src17_startofpacket -> cmd_xbar_mux_017:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src17_data;                                                                       // cmd_xbar_demux_002:src17_data -> cmd_xbar_mux_017:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src17_channel;                                                                    // cmd_xbar_demux_002:src17_channel -> cmd_xbar_mux_017:sink0_channel
	wire          cmd_xbar_demux_002_src17_ready;                                                                      // cmd_xbar_mux_017:sink0_ready -> cmd_xbar_demux_002:src17_ready
	wire          cmd_xbar_demux_002_src18_endofpacket;                                                                // cmd_xbar_demux_002:src18_endofpacket -> cmd_xbar_mux_018:sink0_endofpacket
	wire          cmd_xbar_demux_002_src18_valid;                                                                      // cmd_xbar_demux_002:src18_valid -> cmd_xbar_mux_018:sink0_valid
	wire          cmd_xbar_demux_002_src18_startofpacket;                                                              // cmd_xbar_demux_002:src18_startofpacket -> cmd_xbar_mux_018:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src18_data;                                                                       // cmd_xbar_demux_002:src18_data -> cmd_xbar_mux_018:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src18_channel;                                                                    // cmd_xbar_demux_002:src18_channel -> cmd_xbar_mux_018:sink0_channel
	wire          cmd_xbar_demux_002_src18_ready;                                                                      // cmd_xbar_mux_018:sink0_ready -> cmd_xbar_demux_002:src18_ready
	wire          cmd_xbar_demux_002_src19_endofpacket;                                                                // cmd_xbar_demux_002:src19_endofpacket -> cmd_xbar_mux_019:sink0_endofpacket
	wire          cmd_xbar_demux_002_src19_valid;                                                                      // cmd_xbar_demux_002:src19_valid -> cmd_xbar_mux_019:sink0_valid
	wire          cmd_xbar_demux_002_src19_startofpacket;                                                              // cmd_xbar_demux_002:src19_startofpacket -> cmd_xbar_mux_019:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src19_data;                                                                       // cmd_xbar_demux_002:src19_data -> cmd_xbar_mux_019:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src19_channel;                                                                    // cmd_xbar_demux_002:src19_channel -> cmd_xbar_mux_019:sink0_channel
	wire          cmd_xbar_demux_002_src19_ready;                                                                      // cmd_xbar_mux_019:sink0_ready -> cmd_xbar_demux_002:src19_ready
	wire          cmd_xbar_demux_002_src20_endofpacket;                                                                // cmd_xbar_demux_002:src20_endofpacket -> cmd_xbar_mux_020:sink0_endofpacket
	wire          cmd_xbar_demux_002_src20_valid;                                                                      // cmd_xbar_demux_002:src20_valid -> cmd_xbar_mux_020:sink0_valid
	wire          cmd_xbar_demux_002_src20_startofpacket;                                                              // cmd_xbar_demux_002:src20_startofpacket -> cmd_xbar_mux_020:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src20_data;                                                                       // cmd_xbar_demux_002:src20_data -> cmd_xbar_mux_020:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src20_channel;                                                                    // cmd_xbar_demux_002:src20_channel -> cmd_xbar_mux_020:sink0_channel
	wire          cmd_xbar_demux_002_src20_ready;                                                                      // cmd_xbar_mux_020:sink0_ready -> cmd_xbar_demux_002:src20_ready
	wire          cmd_xbar_demux_002_src21_endofpacket;                                                                // cmd_xbar_demux_002:src21_endofpacket -> cmd_xbar_mux_021:sink0_endofpacket
	wire          cmd_xbar_demux_002_src21_valid;                                                                      // cmd_xbar_demux_002:src21_valid -> cmd_xbar_mux_021:sink0_valid
	wire          cmd_xbar_demux_002_src21_startofpacket;                                                              // cmd_xbar_demux_002:src21_startofpacket -> cmd_xbar_mux_021:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src21_data;                                                                       // cmd_xbar_demux_002:src21_data -> cmd_xbar_mux_021:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src21_channel;                                                                    // cmd_xbar_demux_002:src21_channel -> cmd_xbar_mux_021:sink0_channel
	wire          cmd_xbar_demux_002_src21_ready;                                                                      // cmd_xbar_mux_021:sink0_ready -> cmd_xbar_demux_002:src21_ready
	wire          cmd_xbar_demux_002_src22_endofpacket;                                                                // cmd_xbar_demux_002:src22_endofpacket -> cmd_xbar_mux_022:sink0_endofpacket
	wire          cmd_xbar_demux_002_src22_valid;                                                                      // cmd_xbar_demux_002:src22_valid -> cmd_xbar_mux_022:sink0_valid
	wire          cmd_xbar_demux_002_src22_startofpacket;                                                              // cmd_xbar_demux_002:src22_startofpacket -> cmd_xbar_mux_022:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src22_data;                                                                       // cmd_xbar_demux_002:src22_data -> cmd_xbar_mux_022:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src22_channel;                                                                    // cmd_xbar_demux_002:src22_channel -> cmd_xbar_mux_022:sink0_channel
	wire          cmd_xbar_demux_002_src22_ready;                                                                      // cmd_xbar_mux_022:sink0_ready -> cmd_xbar_demux_002:src22_ready
	wire          cmd_xbar_demux_002_src23_endofpacket;                                                                // cmd_xbar_demux_002:src23_endofpacket -> cmd_xbar_mux_023:sink0_endofpacket
	wire          cmd_xbar_demux_002_src23_valid;                                                                      // cmd_xbar_demux_002:src23_valid -> cmd_xbar_mux_023:sink0_valid
	wire          cmd_xbar_demux_002_src23_startofpacket;                                                              // cmd_xbar_demux_002:src23_startofpacket -> cmd_xbar_mux_023:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src23_data;                                                                       // cmd_xbar_demux_002:src23_data -> cmd_xbar_mux_023:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src23_channel;                                                                    // cmd_xbar_demux_002:src23_channel -> cmd_xbar_mux_023:sink0_channel
	wire          cmd_xbar_demux_002_src23_ready;                                                                      // cmd_xbar_mux_023:sink0_ready -> cmd_xbar_demux_002:src23_ready
	wire          cmd_xbar_demux_002_src24_endofpacket;                                                                // cmd_xbar_demux_002:src24_endofpacket -> cmd_xbar_mux_024:sink0_endofpacket
	wire          cmd_xbar_demux_002_src24_valid;                                                                      // cmd_xbar_demux_002:src24_valid -> cmd_xbar_mux_024:sink0_valid
	wire          cmd_xbar_demux_002_src24_startofpacket;                                                              // cmd_xbar_demux_002:src24_startofpacket -> cmd_xbar_mux_024:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src24_data;                                                                       // cmd_xbar_demux_002:src24_data -> cmd_xbar_mux_024:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src24_channel;                                                                    // cmd_xbar_demux_002:src24_channel -> cmd_xbar_mux_024:sink0_channel
	wire          cmd_xbar_demux_002_src24_ready;                                                                      // cmd_xbar_mux_024:sink0_ready -> cmd_xbar_demux_002:src24_ready
	wire          cmd_xbar_demux_002_src25_endofpacket;                                                                // cmd_xbar_demux_002:src25_endofpacket -> cmd_xbar_mux_025:sink0_endofpacket
	wire          cmd_xbar_demux_002_src25_valid;                                                                      // cmd_xbar_demux_002:src25_valid -> cmd_xbar_mux_025:sink0_valid
	wire          cmd_xbar_demux_002_src25_startofpacket;                                                              // cmd_xbar_demux_002:src25_startofpacket -> cmd_xbar_mux_025:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src25_data;                                                                       // cmd_xbar_demux_002:src25_data -> cmd_xbar_mux_025:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src25_channel;                                                                    // cmd_xbar_demux_002:src25_channel -> cmd_xbar_mux_025:sink0_channel
	wire          cmd_xbar_demux_002_src25_ready;                                                                      // cmd_xbar_mux_025:sink0_ready -> cmd_xbar_demux_002:src25_ready
	wire          cmd_xbar_demux_002_src26_endofpacket;                                                                // cmd_xbar_demux_002:src26_endofpacket -> cmd_xbar_mux_026:sink0_endofpacket
	wire          cmd_xbar_demux_002_src26_valid;                                                                      // cmd_xbar_demux_002:src26_valid -> cmd_xbar_mux_026:sink0_valid
	wire          cmd_xbar_demux_002_src26_startofpacket;                                                              // cmd_xbar_demux_002:src26_startofpacket -> cmd_xbar_mux_026:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src26_data;                                                                       // cmd_xbar_demux_002:src26_data -> cmd_xbar_mux_026:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src26_channel;                                                                    // cmd_xbar_demux_002:src26_channel -> cmd_xbar_mux_026:sink0_channel
	wire          cmd_xbar_demux_002_src26_ready;                                                                      // cmd_xbar_mux_026:sink0_ready -> cmd_xbar_demux_002:src26_ready
	wire          cmd_xbar_demux_002_src27_endofpacket;                                                                // cmd_xbar_demux_002:src27_endofpacket -> cmd_xbar_mux_027:sink0_endofpacket
	wire          cmd_xbar_demux_002_src27_valid;                                                                      // cmd_xbar_demux_002:src27_valid -> cmd_xbar_mux_027:sink0_valid
	wire          cmd_xbar_demux_002_src27_startofpacket;                                                              // cmd_xbar_demux_002:src27_startofpacket -> cmd_xbar_mux_027:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src27_data;                                                                       // cmd_xbar_demux_002:src27_data -> cmd_xbar_mux_027:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src27_channel;                                                                    // cmd_xbar_demux_002:src27_channel -> cmd_xbar_mux_027:sink0_channel
	wire          cmd_xbar_demux_002_src27_ready;                                                                      // cmd_xbar_mux_027:sink0_ready -> cmd_xbar_demux_002:src27_ready
	wire          cmd_xbar_demux_002_src28_endofpacket;                                                                // cmd_xbar_demux_002:src28_endofpacket -> cmd_xbar_mux_028:sink0_endofpacket
	wire          cmd_xbar_demux_002_src28_valid;                                                                      // cmd_xbar_demux_002:src28_valid -> cmd_xbar_mux_028:sink0_valid
	wire          cmd_xbar_demux_002_src28_startofpacket;                                                              // cmd_xbar_demux_002:src28_startofpacket -> cmd_xbar_mux_028:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src28_data;                                                                       // cmd_xbar_demux_002:src28_data -> cmd_xbar_mux_028:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src28_channel;                                                                    // cmd_xbar_demux_002:src28_channel -> cmd_xbar_mux_028:sink0_channel
	wire          cmd_xbar_demux_002_src28_ready;                                                                      // cmd_xbar_mux_028:sink0_ready -> cmd_xbar_demux_002:src28_ready
	wire          cmd_xbar_demux_002_src29_endofpacket;                                                                // cmd_xbar_demux_002:src29_endofpacket -> cmd_xbar_mux_029:sink0_endofpacket
	wire          cmd_xbar_demux_002_src29_valid;                                                                      // cmd_xbar_demux_002:src29_valid -> cmd_xbar_mux_029:sink0_valid
	wire          cmd_xbar_demux_002_src29_startofpacket;                                                              // cmd_xbar_demux_002:src29_startofpacket -> cmd_xbar_mux_029:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src29_data;                                                                       // cmd_xbar_demux_002:src29_data -> cmd_xbar_mux_029:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src29_channel;                                                                    // cmd_xbar_demux_002:src29_channel -> cmd_xbar_mux_029:sink0_channel
	wire          cmd_xbar_demux_002_src29_ready;                                                                      // cmd_xbar_mux_029:sink0_ready -> cmd_xbar_demux_002:src29_ready
	wire          cmd_xbar_demux_002_src30_endofpacket;                                                                // cmd_xbar_demux_002:src30_endofpacket -> cmd_xbar_mux_030:sink0_endofpacket
	wire          cmd_xbar_demux_002_src30_valid;                                                                      // cmd_xbar_demux_002:src30_valid -> cmd_xbar_mux_030:sink0_valid
	wire          cmd_xbar_demux_002_src30_startofpacket;                                                              // cmd_xbar_demux_002:src30_startofpacket -> cmd_xbar_mux_030:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src30_data;                                                                       // cmd_xbar_demux_002:src30_data -> cmd_xbar_mux_030:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src30_channel;                                                                    // cmd_xbar_demux_002:src30_channel -> cmd_xbar_mux_030:sink0_channel
	wire          cmd_xbar_demux_002_src30_ready;                                                                      // cmd_xbar_mux_030:sink0_ready -> cmd_xbar_demux_002:src30_ready
	wire          cmd_xbar_demux_002_src31_endofpacket;                                                                // cmd_xbar_demux_002:src31_endofpacket -> cmd_xbar_mux_031:sink0_endofpacket
	wire          cmd_xbar_demux_002_src31_valid;                                                                      // cmd_xbar_demux_002:src31_valid -> cmd_xbar_mux_031:sink0_valid
	wire          cmd_xbar_demux_002_src31_startofpacket;                                                              // cmd_xbar_demux_002:src31_startofpacket -> cmd_xbar_mux_031:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src31_data;                                                                       // cmd_xbar_demux_002:src31_data -> cmd_xbar_mux_031:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src31_channel;                                                                    // cmd_xbar_demux_002:src31_channel -> cmd_xbar_mux_031:sink0_channel
	wire          cmd_xbar_demux_002_src31_ready;                                                                      // cmd_xbar_mux_031:sink0_ready -> cmd_xbar_demux_002:src31_ready
	wire          cmd_xbar_demux_002_src32_endofpacket;                                                                // cmd_xbar_demux_002:src32_endofpacket -> cmd_xbar_mux_032:sink0_endofpacket
	wire          cmd_xbar_demux_002_src32_valid;                                                                      // cmd_xbar_demux_002:src32_valid -> cmd_xbar_mux_032:sink0_valid
	wire          cmd_xbar_demux_002_src32_startofpacket;                                                              // cmd_xbar_demux_002:src32_startofpacket -> cmd_xbar_mux_032:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src32_data;                                                                       // cmd_xbar_demux_002:src32_data -> cmd_xbar_mux_032:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src32_channel;                                                                    // cmd_xbar_demux_002:src32_channel -> cmd_xbar_mux_032:sink0_channel
	wire          cmd_xbar_demux_002_src32_ready;                                                                      // cmd_xbar_mux_032:sink0_ready -> cmd_xbar_demux_002:src32_ready
	wire          cmd_xbar_demux_002_src33_endofpacket;                                                                // cmd_xbar_demux_002:src33_endofpacket -> cmd_xbar_mux_033:sink0_endofpacket
	wire          cmd_xbar_demux_002_src33_valid;                                                                      // cmd_xbar_demux_002:src33_valid -> cmd_xbar_mux_033:sink0_valid
	wire          cmd_xbar_demux_002_src33_startofpacket;                                                              // cmd_xbar_demux_002:src33_startofpacket -> cmd_xbar_mux_033:sink0_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src33_data;                                                                       // cmd_xbar_demux_002:src33_data -> cmd_xbar_mux_033:sink0_data
	wire   [33:0] cmd_xbar_demux_002_src33_channel;                                                                    // cmd_xbar_demux_002:src33_channel -> cmd_xbar_mux_033:sink0_channel
	wire          cmd_xbar_demux_002_src33_ready;                                                                      // cmd_xbar_mux_033:sink0_ready -> cmd_xbar_demux_002:src33_ready
	wire          cmd_xbar_demux_003_src0_endofpacket;                                                                 // cmd_xbar_demux_003:src0_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_003_src0_valid;                                                                       // cmd_xbar_demux_003:src0_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_003_src0_startofpacket;                                                               // cmd_xbar_demux_003:src0_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src0_data;                                                                        // cmd_xbar_demux_003:src0_data -> cmd_xbar_mux_001:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src0_channel;                                                                     // cmd_xbar_demux_003:src0_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_003_src0_ready;                                                                       // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_003:src0_ready
	wire          cmd_xbar_demux_003_src1_endofpacket;                                                                 // cmd_xbar_demux_003:src1_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire          cmd_xbar_demux_003_src1_valid;                                                                       // cmd_xbar_demux_003:src1_valid -> cmd_xbar_mux_003:sink1_valid
	wire          cmd_xbar_demux_003_src1_startofpacket;                                                               // cmd_xbar_demux_003:src1_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src1_data;                                                                        // cmd_xbar_demux_003:src1_data -> cmd_xbar_mux_003:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src1_channel;                                                                     // cmd_xbar_demux_003:src1_channel -> cmd_xbar_mux_003:sink1_channel
	wire          cmd_xbar_demux_003_src1_ready;                                                                       // cmd_xbar_mux_003:sink1_ready -> cmd_xbar_demux_003:src1_ready
	wire          cmd_xbar_demux_003_src2_endofpacket;                                                                 // cmd_xbar_demux_003:src2_endofpacket -> cmd_xbar_mux_004:sink1_endofpacket
	wire          cmd_xbar_demux_003_src2_valid;                                                                       // cmd_xbar_demux_003:src2_valid -> cmd_xbar_mux_004:sink1_valid
	wire          cmd_xbar_demux_003_src2_startofpacket;                                                               // cmd_xbar_demux_003:src2_startofpacket -> cmd_xbar_mux_004:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src2_data;                                                                        // cmd_xbar_demux_003:src2_data -> cmd_xbar_mux_004:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src2_channel;                                                                     // cmd_xbar_demux_003:src2_channel -> cmd_xbar_mux_004:sink1_channel
	wire          cmd_xbar_demux_003_src2_ready;                                                                       // cmd_xbar_mux_004:sink1_ready -> cmd_xbar_demux_003:src2_ready
	wire          cmd_xbar_demux_003_src3_endofpacket;                                                                 // cmd_xbar_demux_003:src3_endofpacket -> cmd_xbar_mux_005:sink1_endofpacket
	wire          cmd_xbar_demux_003_src3_valid;                                                                       // cmd_xbar_demux_003:src3_valid -> cmd_xbar_mux_005:sink1_valid
	wire          cmd_xbar_demux_003_src3_startofpacket;                                                               // cmd_xbar_demux_003:src3_startofpacket -> cmd_xbar_mux_005:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src3_data;                                                                        // cmd_xbar_demux_003:src3_data -> cmd_xbar_mux_005:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src3_channel;                                                                     // cmd_xbar_demux_003:src3_channel -> cmd_xbar_mux_005:sink1_channel
	wire          cmd_xbar_demux_003_src3_ready;                                                                       // cmd_xbar_mux_005:sink1_ready -> cmd_xbar_demux_003:src3_ready
	wire          cmd_xbar_demux_003_src4_endofpacket;                                                                 // cmd_xbar_demux_003:src4_endofpacket -> cmd_xbar_mux_006:sink1_endofpacket
	wire          cmd_xbar_demux_003_src4_valid;                                                                       // cmd_xbar_demux_003:src4_valid -> cmd_xbar_mux_006:sink1_valid
	wire          cmd_xbar_demux_003_src4_startofpacket;                                                               // cmd_xbar_demux_003:src4_startofpacket -> cmd_xbar_mux_006:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src4_data;                                                                        // cmd_xbar_demux_003:src4_data -> cmd_xbar_mux_006:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src4_channel;                                                                     // cmd_xbar_demux_003:src4_channel -> cmd_xbar_mux_006:sink1_channel
	wire          cmd_xbar_demux_003_src4_ready;                                                                       // cmd_xbar_mux_006:sink1_ready -> cmd_xbar_demux_003:src4_ready
	wire          cmd_xbar_demux_003_src5_endofpacket;                                                                 // cmd_xbar_demux_003:src5_endofpacket -> cmd_xbar_mux_007:sink1_endofpacket
	wire          cmd_xbar_demux_003_src5_valid;                                                                       // cmd_xbar_demux_003:src5_valid -> cmd_xbar_mux_007:sink1_valid
	wire          cmd_xbar_demux_003_src5_startofpacket;                                                               // cmd_xbar_demux_003:src5_startofpacket -> cmd_xbar_mux_007:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src5_data;                                                                        // cmd_xbar_demux_003:src5_data -> cmd_xbar_mux_007:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src5_channel;                                                                     // cmd_xbar_demux_003:src5_channel -> cmd_xbar_mux_007:sink1_channel
	wire          cmd_xbar_demux_003_src5_ready;                                                                       // cmd_xbar_mux_007:sink1_ready -> cmd_xbar_demux_003:src5_ready
	wire          cmd_xbar_demux_003_src6_endofpacket;                                                                 // cmd_xbar_demux_003:src6_endofpacket -> cmd_xbar_mux_008:sink1_endofpacket
	wire          cmd_xbar_demux_003_src6_valid;                                                                       // cmd_xbar_demux_003:src6_valid -> cmd_xbar_mux_008:sink1_valid
	wire          cmd_xbar_demux_003_src6_startofpacket;                                                               // cmd_xbar_demux_003:src6_startofpacket -> cmd_xbar_mux_008:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src6_data;                                                                        // cmd_xbar_demux_003:src6_data -> cmd_xbar_mux_008:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src6_channel;                                                                     // cmd_xbar_demux_003:src6_channel -> cmd_xbar_mux_008:sink1_channel
	wire          cmd_xbar_demux_003_src6_ready;                                                                       // cmd_xbar_mux_008:sink1_ready -> cmd_xbar_demux_003:src6_ready
	wire          cmd_xbar_demux_003_src7_endofpacket;                                                                 // cmd_xbar_demux_003:src7_endofpacket -> cmd_xbar_mux_009:sink1_endofpacket
	wire          cmd_xbar_demux_003_src7_valid;                                                                       // cmd_xbar_demux_003:src7_valid -> cmd_xbar_mux_009:sink1_valid
	wire          cmd_xbar_demux_003_src7_startofpacket;                                                               // cmd_xbar_demux_003:src7_startofpacket -> cmd_xbar_mux_009:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src7_data;                                                                        // cmd_xbar_demux_003:src7_data -> cmd_xbar_mux_009:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src7_channel;                                                                     // cmd_xbar_demux_003:src7_channel -> cmd_xbar_mux_009:sink1_channel
	wire          cmd_xbar_demux_003_src7_ready;                                                                       // cmd_xbar_mux_009:sink1_ready -> cmd_xbar_demux_003:src7_ready
	wire          cmd_xbar_demux_003_src8_endofpacket;                                                                 // cmd_xbar_demux_003:src8_endofpacket -> cmd_xbar_mux_010:sink1_endofpacket
	wire          cmd_xbar_demux_003_src8_valid;                                                                       // cmd_xbar_demux_003:src8_valid -> cmd_xbar_mux_010:sink1_valid
	wire          cmd_xbar_demux_003_src8_startofpacket;                                                               // cmd_xbar_demux_003:src8_startofpacket -> cmd_xbar_mux_010:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src8_data;                                                                        // cmd_xbar_demux_003:src8_data -> cmd_xbar_mux_010:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src8_channel;                                                                     // cmd_xbar_demux_003:src8_channel -> cmd_xbar_mux_010:sink1_channel
	wire          cmd_xbar_demux_003_src8_ready;                                                                       // cmd_xbar_mux_010:sink1_ready -> cmd_xbar_demux_003:src8_ready
	wire          cmd_xbar_demux_003_src9_endofpacket;                                                                 // cmd_xbar_demux_003:src9_endofpacket -> cmd_xbar_mux_011:sink1_endofpacket
	wire          cmd_xbar_demux_003_src9_valid;                                                                       // cmd_xbar_demux_003:src9_valid -> cmd_xbar_mux_011:sink1_valid
	wire          cmd_xbar_demux_003_src9_startofpacket;                                                               // cmd_xbar_demux_003:src9_startofpacket -> cmd_xbar_mux_011:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src9_data;                                                                        // cmd_xbar_demux_003:src9_data -> cmd_xbar_mux_011:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src9_channel;                                                                     // cmd_xbar_demux_003:src9_channel -> cmd_xbar_mux_011:sink1_channel
	wire          cmd_xbar_demux_003_src9_ready;                                                                       // cmd_xbar_mux_011:sink1_ready -> cmd_xbar_demux_003:src9_ready
	wire          cmd_xbar_demux_003_src10_endofpacket;                                                                // cmd_xbar_demux_003:src10_endofpacket -> cmd_xbar_mux_012:sink1_endofpacket
	wire          cmd_xbar_demux_003_src10_valid;                                                                      // cmd_xbar_demux_003:src10_valid -> cmd_xbar_mux_012:sink1_valid
	wire          cmd_xbar_demux_003_src10_startofpacket;                                                              // cmd_xbar_demux_003:src10_startofpacket -> cmd_xbar_mux_012:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src10_data;                                                                       // cmd_xbar_demux_003:src10_data -> cmd_xbar_mux_012:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src10_channel;                                                                    // cmd_xbar_demux_003:src10_channel -> cmd_xbar_mux_012:sink1_channel
	wire          cmd_xbar_demux_003_src10_ready;                                                                      // cmd_xbar_mux_012:sink1_ready -> cmd_xbar_demux_003:src10_ready
	wire          cmd_xbar_demux_003_src11_endofpacket;                                                                // cmd_xbar_demux_003:src11_endofpacket -> cmd_xbar_mux_013:sink1_endofpacket
	wire          cmd_xbar_demux_003_src11_valid;                                                                      // cmd_xbar_demux_003:src11_valid -> cmd_xbar_mux_013:sink1_valid
	wire          cmd_xbar_demux_003_src11_startofpacket;                                                              // cmd_xbar_demux_003:src11_startofpacket -> cmd_xbar_mux_013:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src11_data;                                                                       // cmd_xbar_demux_003:src11_data -> cmd_xbar_mux_013:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src11_channel;                                                                    // cmd_xbar_demux_003:src11_channel -> cmd_xbar_mux_013:sink1_channel
	wire          cmd_xbar_demux_003_src11_ready;                                                                      // cmd_xbar_mux_013:sink1_ready -> cmd_xbar_demux_003:src11_ready
	wire          cmd_xbar_demux_003_src12_endofpacket;                                                                // cmd_xbar_demux_003:src12_endofpacket -> cmd_xbar_mux_014:sink1_endofpacket
	wire          cmd_xbar_demux_003_src12_valid;                                                                      // cmd_xbar_demux_003:src12_valid -> cmd_xbar_mux_014:sink1_valid
	wire          cmd_xbar_demux_003_src12_startofpacket;                                                              // cmd_xbar_demux_003:src12_startofpacket -> cmd_xbar_mux_014:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src12_data;                                                                       // cmd_xbar_demux_003:src12_data -> cmd_xbar_mux_014:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src12_channel;                                                                    // cmd_xbar_demux_003:src12_channel -> cmd_xbar_mux_014:sink1_channel
	wire          cmd_xbar_demux_003_src12_ready;                                                                      // cmd_xbar_mux_014:sink1_ready -> cmd_xbar_demux_003:src12_ready
	wire          cmd_xbar_demux_003_src13_endofpacket;                                                                // cmd_xbar_demux_003:src13_endofpacket -> cmd_xbar_mux_015:sink1_endofpacket
	wire          cmd_xbar_demux_003_src13_valid;                                                                      // cmd_xbar_demux_003:src13_valid -> cmd_xbar_mux_015:sink1_valid
	wire          cmd_xbar_demux_003_src13_startofpacket;                                                              // cmd_xbar_demux_003:src13_startofpacket -> cmd_xbar_mux_015:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src13_data;                                                                       // cmd_xbar_demux_003:src13_data -> cmd_xbar_mux_015:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src13_channel;                                                                    // cmd_xbar_demux_003:src13_channel -> cmd_xbar_mux_015:sink1_channel
	wire          cmd_xbar_demux_003_src13_ready;                                                                      // cmd_xbar_mux_015:sink1_ready -> cmd_xbar_demux_003:src13_ready
	wire          cmd_xbar_demux_003_src14_endofpacket;                                                                // cmd_xbar_demux_003:src14_endofpacket -> cmd_xbar_mux_016:sink1_endofpacket
	wire          cmd_xbar_demux_003_src14_valid;                                                                      // cmd_xbar_demux_003:src14_valid -> cmd_xbar_mux_016:sink1_valid
	wire          cmd_xbar_demux_003_src14_startofpacket;                                                              // cmd_xbar_demux_003:src14_startofpacket -> cmd_xbar_mux_016:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src14_data;                                                                       // cmd_xbar_demux_003:src14_data -> cmd_xbar_mux_016:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src14_channel;                                                                    // cmd_xbar_demux_003:src14_channel -> cmd_xbar_mux_016:sink1_channel
	wire          cmd_xbar_demux_003_src14_ready;                                                                      // cmd_xbar_mux_016:sink1_ready -> cmd_xbar_demux_003:src14_ready
	wire          cmd_xbar_demux_003_src15_endofpacket;                                                                // cmd_xbar_demux_003:src15_endofpacket -> cmd_xbar_mux_017:sink1_endofpacket
	wire          cmd_xbar_demux_003_src15_valid;                                                                      // cmd_xbar_demux_003:src15_valid -> cmd_xbar_mux_017:sink1_valid
	wire          cmd_xbar_demux_003_src15_startofpacket;                                                              // cmd_xbar_demux_003:src15_startofpacket -> cmd_xbar_mux_017:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src15_data;                                                                       // cmd_xbar_demux_003:src15_data -> cmd_xbar_mux_017:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src15_channel;                                                                    // cmd_xbar_demux_003:src15_channel -> cmd_xbar_mux_017:sink1_channel
	wire          cmd_xbar_demux_003_src15_ready;                                                                      // cmd_xbar_mux_017:sink1_ready -> cmd_xbar_demux_003:src15_ready
	wire          cmd_xbar_demux_003_src16_endofpacket;                                                                // cmd_xbar_demux_003:src16_endofpacket -> cmd_xbar_mux_018:sink1_endofpacket
	wire          cmd_xbar_demux_003_src16_valid;                                                                      // cmd_xbar_demux_003:src16_valid -> cmd_xbar_mux_018:sink1_valid
	wire          cmd_xbar_demux_003_src16_startofpacket;                                                              // cmd_xbar_demux_003:src16_startofpacket -> cmd_xbar_mux_018:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src16_data;                                                                       // cmd_xbar_demux_003:src16_data -> cmd_xbar_mux_018:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src16_channel;                                                                    // cmd_xbar_demux_003:src16_channel -> cmd_xbar_mux_018:sink1_channel
	wire          cmd_xbar_demux_003_src16_ready;                                                                      // cmd_xbar_mux_018:sink1_ready -> cmd_xbar_demux_003:src16_ready
	wire          cmd_xbar_demux_003_src17_endofpacket;                                                                // cmd_xbar_demux_003:src17_endofpacket -> cmd_xbar_mux_019:sink1_endofpacket
	wire          cmd_xbar_demux_003_src17_valid;                                                                      // cmd_xbar_demux_003:src17_valid -> cmd_xbar_mux_019:sink1_valid
	wire          cmd_xbar_demux_003_src17_startofpacket;                                                              // cmd_xbar_demux_003:src17_startofpacket -> cmd_xbar_mux_019:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src17_data;                                                                       // cmd_xbar_demux_003:src17_data -> cmd_xbar_mux_019:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src17_channel;                                                                    // cmd_xbar_demux_003:src17_channel -> cmd_xbar_mux_019:sink1_channel
	wire          cmd_xbar_demux_003_src17_ready;                                                                      // cmd_xbar_mux_019:sink1_ready -> cmd_xbar_demux_003:src17_ready
	wire          cmd_xbar_demux_003_src18_endofpacket;                                                                // cmd_xbar_demux_003:src18_endofpacket -> cmd_xbar_mux_020:sink1_endofpacket
	wire          cmd_xbar_demux_003_src18_valid;                                                                      // cmd_xbar_demux_003:src18_valid -> cmd_xbar_mux_020:sink1_valid
	wire          cmd_xbar_demux_003_src18_startofpacket;                                                              // cmd_xbar_demux_003:src18_startofpacket -> cmd_xbar_mux_020:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src18_data;                                                                       // cmd_xbar_demux_003:src18_data -> cmd_xbar_mux_020:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src18_channel;                                                                    // cmd_xbar_demux_003:src18_channel -> cmd_xbar_mux_020:sink1_channel
	wire          cmd_xbar_demux_003_src18_ready;                                                                      // cmd_xbar_mux_020:sink1_ready -> cmd_xbar_demux_003:src18_ready
	wire          cmd_xbar_demux_003_src19_endofpacket;                                                                // cmd_xbar_demux_003:src19_endofpacket -> cmd_xbar_mux_021:sink1_endofpacket
	wire          cmd_xbar_demux_003_src19_valid;                                                                      // cmd_xbar_demux_003:src19_valid -> cmd_xbar_mux_021:sink1_valid
	wire          cmd_xbar_demux_003_src19_startofpacket;                                                              // cmd_xbar_demux_003:src19_startofpacket -> cmd_xbar_mux_021:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src19_data;                                                                       // cmd_xbar_demux_003:src19_data -> cmd_xbar_mux_021:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src19_channel;                                                                    // cmd_xbar_demux_003:src19_channel -> cmd_xbar_mux_021:sink1_channel
	wire          cmd_xbar_demux_003_src19_ready;                                                                      // cmd_xbar_mux_021:sink1_ready -> cmd_xbar_demux_003:src19_ready
	wire          cmd_xbar_demux_003_src20_endofpacket;                                                                // cmd_xbar_demux_003:src20_endofpacket -> cmd_xbar_mux_022:sink1_endofpacket
	wire          cmd_xbar_demux_003_src20_valid;                                                                      // cmd_xbar_demux_003:src20_valid -> cmd_xbar_mux_022:sink1_valid
	wire          cmd_xbar_demux_003_src20_startofpacket;                                                              // cmd_xbar_demux_003:src20_startofpacket -> cmd_xbar_mux_022:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src20_data;                                                                       // cmd_xbar_demux_003:src20_data -> cmd_xbar_mux_022:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src20_channel;                                                                    // cmd_xbar_demux_003:src20_channel -> cmd_xbar_mux_022:sink1_channel
	wire          cmd_xbar_demux_003_src20_ready;                                                                      // cmd_xbar_mux_022:sink1_ready -> cmd_xbar_demux_003:src20_ready
	wire          cmd_xbar_demux_003_src21_endofpacket;                                                                // cmd_xbar_demux_003:src21_endofpacket -> cmd_xbar_mux_023:sink1_endofpacket
	wire          cmd_xbar_demux_003_src21_valid;                                                                      // cmd_xbar_demux_003:src21_valid -> cmd_xbar_mux_023:sink1_valid
	wire          cmd_xbar_demux_003_src21_startofpacket;                                                              // cmd_xbar_demux_003:src21_startofpacket -> cmd_xbar_mux_023:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src21_data;                                                                       // cmd_xbar_demux_003:src21_data -> cmd_xbar_mux_023:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src21_channel;                                                                    // cmd_xbar_demux_003:src21_channel -> cmd_xbar_mux_023:sink1_channel
	wire          cmd_xbar_demux_003_src21_ready;                                                                      // cmd_xbar_mux_023:sink1_ready -> cmd_xbar_demux_003:src21_ready
	wire          cmd_xbar_demux_003_src22_endofpacket;                                                                // cmd_xbar_demux_003:src22_endofpacket -> cmd_xbar_mux_024:sink1_endofpacket
	wire          cmd_xbar_demux_003_src22_valid;                                                                      // cmd_xbar_demux_003:src22_valid -> cmd_xbar_mux_024:sink1_valid
	wire          cmd_xbar_demux_003_src22_startofpacket;                                                              // cmd_xbar_demux_003:src22_startofpacket -> cmd_xbar_mux_024:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src22_data;                                                                       // cmd_xbar_demux_003:src22_data -> cmd_xbar_mux_024:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src22_channel;                                                                    // cmd_xbar_demux_003:src22_channel -> cmd_xbar_mux_024:sink1_channel
	wire          cmd_xbar_demux_003_src22_ready;                                                                      // cmd_xbar_mux_024:sink1_ready -> cmd_xbar_demux_003:src22_ready
	wire          cmd_xbar_demux_003_src23_endofpacket;                                                                // cmd_xbar_demux_003:src23_endofpacket -> cmd_xbar_mux_025:sink1_endofpacket
	wire          cmd_xbar_demux_003_src23_valid;                                                                      // cmd_xbar_demux_003:src23_valid -> cmd_xbar_mux_025:sink1_valid
	wire          cmd_xbar_demux_003_src23_startofpacket;                                                              // cmd_xbar_demux_003:src23_startofpacket -> cmd_xbar_mux_025:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src23_data;                                                                       // cmd_xbar_demux_003:src23_data -> cmd_xbar_mux_025:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src23_channel;                                                                    // cmd_xbar_demux_003:src23_channel -> cmd_xbar_mux_025:sink1_channel
	wire          cmd_xbar_demux_003_src23_ready;                                                                      // cmd_xbar_mux_025:sink1_ready -> cmd_xbar_demux_003:src23_ready
	wire          cmd_xbar_demux_003_src24_endofpacket;                                                                // cmd_xbar_demux_003:src24_endofpacket -> cmd_xbar_mux_026:sink1_endofpacket
	wire          cmd_xbar_demux_003_src24_valid;                                                                      // cmd_xbar_demux_003:src24_valid -> cmd_xbar_mux_026:sink1_valid
	wire          cmd_xbar_demux_003_src24_startofpacket;                                                              // cmd_xbar_demux_003:src24_startofpacket -> cmd_xbar_mux_026:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src24_data;                                                                       // cmd_xbar_demux_003:src24_data -> cmd_xbar_mux_026:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src24_channel;                                                                    // cmd_xbar_demux_003:src24_channel -> cmd_xbar_mux_026:sink1_channel
	wire          cmd_xbar_demux_003_src24_ready;                                                                      // cmd_xbar_mux_026:sink1_ready -> cmd_xbar_demux_003:src24_ready
	wire          cmd_xbar_demux_003_src25_endofpacket;                                                                // cmd_xbar_demux_003:src25_endofpacket -> cmd_xbar_mux_027:sink1_endofpacket
	wire          cmd_xbar_demux_003_src25_valid;                                                                      // cmd_xbar_demux_003:src25_valid -> cmd_xbar_mux_027:sink1_valid
	wire          cmd_xbar_demux_003_src25_startofpacket;                                                              // cmd_xbar_demux_003:src25_startofpacket -> cmd_xbar_mux_027:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src25_data;                                                                       // cmd_xbar_demux_003:src25_data -> cmd_xbar_mux_027:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src25_channel;                                                                    // cmd_xbar_demux_003:src25_channel -> cmd_xbar_mux_027:sink1_channel
	wire          cmd_xbar_demux_003_src25_ready;                                                                      // cmd_xbar_mux_027:sink1_ready -> cmd_xbar_demux_003:src25_ready
	wire          cmd_xbar_demux_003_src26_endofpacket;                                                                // cmd_xbar_demux_003:src26_endofpacket -> cmd_xbar_mux_028:sink1_endofpacket
	wire          cmd_xbar_demux_003_src26_valid;                                                                      // cmd_xbar_demux_003:src26_valid -> cmd_xbar_mux_028:sink1_valid
	wire          cmd_xbar_demux_003_src26_startofpacket;                                                              // cmd_xbar_demux_003:src26_startofpacket -> cmd_xbar_mux_028:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src26_data;                                                                       // cmd_xbar_demux_003:src26_data -> cmd_xbar_mux_028:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src26_channel;                                                                    // cmd_xbar_demux_003:src26_channel -> cmd_xbar_mux_028:sink1_channel
	wire          cmd_xbar_demux_003_src26_ready;                                                                      // cmd_xbar_mux_028:sink1_ready -> cmd_xbar_demux_003:src26_ready
	wire          cmd_xbar_demux_003_src27_endofpacket;                                                                // cmd_xbar_demux_003:src27_endofpacket -> cmd_xbar_mux_029:sink1_endofpacket
	wire          cmd_xbar_demux_003_src27_valid;                                                                      // cmd_xbar_demux_003:src27_valid -> cmd_xbar_mux_029:sink1_valid
	wire          cmd_xbar_demux_003_src27_startofpacket;                                                              // cmd_xbar_demux_003:src27_startofpacket -> cmd_xbar_mux_029:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src27_data;                                                                       // cmd_xbar_demux_003:src27_data -> cmd_xbar_mux_029:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src27_channel;                                                                    // cmd_xbar_demux_003:src27_channel -> cmd_xbar_mux_029:sink1_channel
	wire          cmd_xbar_demux_003_src27_ready;                                                                      // cmd_xbar_mux_029:sink1_ready -> cmd_xbar_demux_003:src27_ready
	wire          cmd_xbar_demux_003_src28_endofpacket;                                                                // cmd_xbar_demux_003:src28_endofpacket -> cmd_xbar_mux_030:sink1_endofpacket
	wire          cmd_xbar_demux_003_src28_valid;                                                                      // cmd_xbar_demux_003:src28_valid -> cmd_xbar_mux_030:sink1_valid
	wire          cmd_xbar_demux_003_src28_startofpacket;                                                              // cmd_xbar_demux_003:src28_startofpacket -> cmd_xbar_mux_030:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src28_data;                                                                       // cmd_xbar_demux_003:src28_data -> cmd_xbar_mux_030:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src28_channel;                                                                    // cmd_xbar_demux_003:src28_channel -> cmd_xbar_mux_030:sink1_channel
	wire          cmd_xbar_demux_003_src28_ready;                                                                      // cmd_xbar_mux_030:sink1_ready -> cmd_xbar_demux_003:src28_ready
	wire          cmd_xbar_demux_003_src29_endofpacket;                                                                // cmd_xbar_demux_003:src29_endofpacket -> cmd_xbar_mux_031:sink1_endofpacket
	wire          cmd_xbar_demux_003_src29_valid;                                                                      // cmd_xbar_demux_003:src29_valid -> cmd_xbar_mux_031:sink1_valid
	wire          cmd_xbar_demux_003_src29_startofpacket;                                                              // cmd_xbar_demux_003:src29_startofpacket -> cmd_xbar_mux_031:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src29_data;                                                                       // cmd_xbar_demux_003:src29_data -> cmd_xbar_mux_031:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src29_channel;                                                                    // cmd_xbar_demux_003:src29_channel -> cmd_xbar_mux_031:sink1_channel
	wire          cmd_xbar_demux_003_src29_ready;                                                                      // cmd_xbar_mux_031:sink1_ready -> cmd_xbar_demux_003:src29_ready
	wire          cmd_xbar_demux_003_src30_endofpacket;                                                                // cmd_xbar_demux_003:src30_endofpacket -> cmd_xbar_mux_032:sink1_endofpacket
	wire          cmd_xbar_demux_003_src30_valid;                                                                      // cmd_xbar_demux_003:src30_valid -> cmd_xbar_mux_032:sink1_valid
	wire          cmd_xbar_demux_003_src30_startofpacket;                                                              // cmd_xbar_demux_003:src30_startofpacket -> cmd_xbar_mux_032:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src30_data;                                                                       // cmd_xbar_demux_003:src30_data -> cmd_xbar_mux_032:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src30_channel;                                                                    // cmd_xbar_demux_003:src30_channel -> cmd_xbar_mux_032:sink1_channel
	wire          cmd_xbar_demux_003_src30_ready;                                                                      // cmd_xbar_mux_032:sink1_ready -> cmd_xbar_demux_003:src30_ready
	wire          cmd_xbar_demux_003_src31_endofpacket;                                                                // cmd_xbar_demux_003:src31_endofpacket -> cmd_xbar_mux_033:sink1_endofpacket
	wire          cmd_xbar_demux_003_src31_valid;                                                                      // cmd_xbar_demux_003:src31_valid -> cmd_xbar_mux_033:sink1_valid
	wire          cmd_xbar_demux_003_src31_startofpacket;                                                              // cmd_xbar_demux_003:src31_startofpacket -> cmd_xbar_mux_033:sink1_startofpacket
	wire  [134:0] cmd_xbar_demux_003_src31_data;                                                                       // cmd_xbar_demux_003:src31_data -> cmd_xbar_mux_033:sink1_data
	wire   [33:0] cmd_xbar_demux_003_src31_channel;                                                                    // cmd_xbar_demux_003:src31_channel -> cmd_xbar_mux_033:sink1_channel
	wire          cmd_xbar_demux_003_src31_ready;                                                                      // cmd_xbar_mux_033:sink1_ready -> cmd_xbar_demux_003:src31_ready
	wire          cmd_xbar_demux_004_src0_endofpacket;                                                                 // cmd_xbar_demux_004:src0_endofpacket -> cmd_xbar_mux_001:sink2_endofpacket
	wire          cmd_xbar_demux_004_src0_valid;                                                                       // cmd_xbar_demux_004:src0_valid -> cmd_xbar_mux_001:sink2_valid
	wire          cmd_xbar_demux_004_src0_startofpacket;                                                               // cmd_xbar_demux_004:src0_startofpacket -> cmd_xbar_mux_001:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src0_data;                                                                        // cmd_xbar_demux_004:src0_data -> cmd_xbar_mux_001:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src0_channel;                                                                     // cmd_xbar_demux_004:src0_channel -> cmd_xbar_mux_001:sink2_channel
	wire          cmd_xbar_demux_004_src0_ready;                                                                       // cmd_xbar_mux_001:sink2_ready -> cmd_xbar_demux_004:src0_ready
	wire          cmd_xbar_demux_004_src1_endofpacket;                                                                 // cmd_xbar_demux_004:src1_endofpacket -> cmd_xbar_mux_003:sink2_endofpacket
	wire          cmd_xbar_demux_004_src1_valid;                                                                       // cmd_xbar_demux_004:src1_valid -> cmd_xbar_mux_003:sink2_valid
	wire          cmd_xbar_demux_004_src1_startofpacket;                                                               // cmd_xbar_demux_004:src1_startofpacket -> cmd_xbar_mux_003:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src1_data;                                                                        // cmd_xbar_demux_004:src1_data -> cmd_xbar_mux_003:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src1_channel;                                                                     // cmd_xbar_demux_004:src1_channel -> cmd_xbar_mux_003:sink2_channel
	wire          cmd_xbar_demux_004_src1_ready;                                                                       // cmd_xbar_mux_003:sink2_ready -> cmd_xbar_demux_004:src1_ready
	wire          cmd_xbar_demux_004_src2_endofpacket;                                                                 // cmd_xbar_demux_004:src2_endofpacket -> cmd_xbar_mux_004:sink2_endofpacket
	wire          cmd_xbar_demux_004_src2_valid;                                                                       // cmd_xbar_demux_004:src2_valid -> cmd_xbar_mux_004:sink2_valid
	wire          cmd_xbar_demux_004_src2_startofpacket;                                                               // cmd_xbar_demux_004:src2_startofpacket -> cmd_xbar_mux_004:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src2_data;                                                                        // cmd_xbar_demux_004:src2_data -> cmd_xbar_mux_004:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src2_channel;                                                                     // cmd_xbar_demux_004:src2_channel -> cmd_xbar_mux_004:sink2_channel
	wire          cmd_xbar_demux_004_src2_ready;                                                                       // cmd_xbar_mux_004:sink2_ready -> cmd_xbar_demux_004:src2_ready
	wire          cmd_xbar_demux_004_src3_endofpacket;                                                                 // cmd_xbar_demux_004:src3_endofpacket -> cmd_xbar_mux_005:sink2_endofpacket
	wire          cmd_xbar_demux_004_src3_valid;                                                                       // cmd_xbar_demux_004:src3_valid -> cmd_xbar_mux_005:sink2_valid
	wire          cmd_xbar_demux_004_src3_startofpacket;                                                               // cmd_xbar_demux_004:src3_startofpacket -> cmd_xbar_mux_005:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src3_data;                                                                        // cmd_xbar_demux_004:src3_data -> cmd_xbar_mux_005:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src3_channel;                                                                     // cmd_xbar_demux_004:src3_channel -> cmd_xbar_mux_005:sink2_channel
	wire          cmd_xbar_demux_004_src3_ready;                                                                       // cmd_xbar_mux_005:sink2_ready -> cmd_xbar_demux_004:src3_ready
	wire          cmd_xbar_demux_004_src4_endofpacket;                                                                 // cmd_xbar_demux_004:src4_endofpacket -> cmd_xbar_mux_006:sink2_endofpacket
	wire          cmd_xbar_demux_004_src4_valid;                                                                       // cmd_xbar_demux_004:src4_valid -> cmd_xbar_mux_006:sink2_valid
	wire          cmd_xbar_demux_004_src4_startofpacket;                                                               // cmd_xbar_demux_004:src4_startofpacket -> cmd_xbar_mux_006:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src4_data;                                                                        // cmd_xbar_demux_004:src4_data -> cmd_xbar_mux_006:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src4_channel;                                                                     // cmd_xbar_demux_004:src4_channel -> cmd_xbar_mux_006:sink2_channel
	wire          cmd_xbar_demux_004_src4_ready;                                                                       // cmd_xbar_mux_006:sink2_ready -> cmd_xbar_demux_004:src4_ready
	wire          cmd_xbar_demux_004_src5_endofpacket;                                                                 // cmd_xbar_demux_004:src5_endofpacket -> cmd_xbar_mux_007:sink2_endofpacket
	wire          cmd_xbar_demux_004_src5_valid;                                                                       // cmd_xbar_demux_004:src5_valid -> cmd_xbar_mux_007:sink2_valid
	wire          cmd_xbar_demux_004_src5_startofpacket;                                                               // cmd_xbar_demux_004:src5_startofpacket -> cmd_xbar_mux_007:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src5_data;                                                                        // cmd_xbar_demux_004:src5_data -> cmd_xbar_mux_007:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src5_channel;                                                                     // cmd_xbar_demux_004:src5_channel -> cmd_xbar_mux_007:sink2_channel
	wire          cmd_xbar_demux_004_src5_ready;                                                                       // cmd_xbar_mux_007:sink2_ready -> cmd_xbar_demux_004:src5_ready
	wire          cmd_xbar_demux_004_src6_endofpacket;                                                                 // cmd_xbar_demux_004:src6_endofpacket -> cmd_xbar_mux_008:sink2_endofpacket
	wire          cmd_xbar_demux_004_src6_valid;                                                                       // cmd_xbar_demux_004:src6_valid -> cmd_xbar_mux_008:sink2_valid
	wire          cmd_xbar_demux_004_src6_startofpacket;                                                               // cmd_xbar_demux_004:src6_startofpacket -> cmd_xbar_mux_008:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src6_data;                                                                        // cmd_xbar_demux_004:src6_data -> cmd_xbar_mux_008:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src6_channel;                                                                     // cmd_xbar_demux_004:src6_channel -> cmd_xbar_mux_008:sink2_channel
	wire          cmd_xbar_demux_004_src6_ready;                                                                       // cmd_xbar_mux_008:sink2_ready -> cmd_xbar_demux_004:src6_ready
	wire          cmd_xbar_demux_004_src7_endofpacket;                                                                 // cmd_xbar_demux_004:src7_endofpacket -> cmd_xbar_mux_009:sink2_endofpacket
	wire          cmd_xbar_demux_004_src7_valid;                                                                       // cmd_xbar_demux_004:src7_valid -> cmd_xbar_mux_009:sink2_valid
	wire          cmd_xbar_demux_004_src7_startofpacket;                                                               // cmd_xbar_demux_004:src7_startofpacket -> cmd_xbar_mux_009:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src7_data;                                                                        // cmd_xbar_demux_004:src7_data -> cmd_xbar_mux_009:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src7_channel;                                                                     // cmd_xbar_demux_004:src7_channel -> cmd_xbar_mux_009:sink2_channel
	wire          cmd_xbar_demux_004_src7_ready;                                                                       // cmd_xbar_mux_009:sink2_ready -> cmd_xbar_demux_004:src7_ready
	wire          cmd_xbar_demux_004_src8_endofpacket;                                                                 // cmd_xbar_demux_004:src8_endofpacket -> cmd_xbar_mux_010:sink2_endofpacket
	wire          cmd_xbar_demux_004_src8_valid;                                                                       // cmd_xbar_demux_004:src8_valid -> cmd_xbar_mux_010:sink2_valid
	wire          cmd_xbar_demux_004_src8_startofpacket;                                                               // cmd_xbar_demux_004:src8_startofpacket -> cmd_xbar_mux_010:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src8_data;                                                                        // cmd_xbar_demux_004:src8_data -> cmd_xbar_mux_010:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src8_channel;                                                                     // cmd_xbar_demux_004:src8_channel -> cmd_xbar_mux_010:sink2_channel
	wire          cmd_xbar_demux_004_src8_ready;                                                                       // cmd_xbar_mux_010:sink2_ready -> cmd_xbar_demux_004:src8_ready
	wire          cmd_xbar_demux_004_src9_endofpacket;                                                                 // cmd_xbar_demux_004:src9_endofpacket -> cmd_xbar_mux_011:sink2_endofpacket
	wire          cmd_xbar_demux_004_src9_valid;                                                                       // cmd_xbar_demux_004:src9_valid -> cmd_xbar_mux_011:sink2_valid
	wire          cmd_xbar_demux_004_src9_startofpacket;                                                               // cmd_xbar_demux_004:src9_startofpacket -> cmd_xbar_mux_011:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src9_data;                                                                        // cmd_xbar_demux_004:src9_data -> cmd_xbar_mux_011:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src9_channel;                                                                     // cmd_xbar_demux_004:src9_channel -> cmd_xbar_mux_011:sink2_channel
	wire          cmd_xbar_demux_004_src9_ready;                                                                       // cmd_xbar_mux_011:sink2_ready -> cmd_xbar_demux_004:src9_ready
	wire          cmd_xbar_demux_004_src10_endofpacket;                                                                // cmd_xbar_demux_004:src10_endofpacket -> cmd_xbar_mux_012:sink2_endofpacket
	wire          cmd_xbar_demux_004_src10_valid;                                                                      // cmd_xbar_demux_004:src10_valid -> cmd_xbar_mux_012:sink2_valid
	wire          cmd_xbar_demux_004_src10_startofpacket;                                                              // cmd_xbar_demux_004:src10_startofpacket -> cmd_xbar_mux_012:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src10_data;                                                                       // cmd_xbar_demux_004:src10_data -> cmd_xbar_mux_012:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src10_channel;                                                                    // cmd_xbar_demux_004:src10_channel -> cmd_xbar_mux_012:sink2_channel
	wire          cmd_xbar_demux_004_src10_ready;                                                                      // cmd_xbar_mux_012:sink2_ready -> cmd_xbar_demux_004:src10_ready
	wire          cmd_xbar_demux_004_src11_endofpacket;                                                                // cmd_xbar_demux_004:src11_endofpacket -> cmd_xbar_mux_013:sink2_endofpacket
	wire          cmd_xbar_demux_004_src11_valid;                                                                      // cmd_xbar_demux_004:src11_valid -> cmd_xbar_mux_013:sink2_valid
	wire          cmd_xbar_demux_004_src11_startofpacket;                                                              // cmd_xbar_demux_004:src11_startofpacket -> cmd_xbar_mux_013:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src11_data;                                                                       // cmd_xbar_demux_004:src11_data -> cmd_xbar_mux_013:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src11_channel;                                                                    // cmd_xbar_demux_004:src11_channel -> cmd_xbar_mux_013:sink2_channel
	wire          cmd_xbar_demux_004_src11_ready;                                                                      // cmd_xbar_mux_013:sink2_ready -> cmd_xbar_demux_004:src11_ready
	wire          cmd_xbar_demux_004_src12_endofpacket;                                                                // cmd_xbar_demux_004:src12_endofpacket -> cmd_xbar_mux_014:sink2_endofpacket
	wire          cmd_xbar_demux_004_src12_valid;                                                                      // cmd_xbar_demux_004:src12_valid -> cmd_xbar_mux_014:sink2_valid
	wire          cmd_xbar_demux_004_src12_startofpacket;                                                              // cmd_xbar_demux_004:src12_startofpacket -> cmd_xbar_mux_014:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src12_data;                                                                       // cmd_xbar_demux_004:src12_data -> cmd_xbar_mux_014:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src12_channel;                                                                    // cmd_xbar_demux_004:src12_channel -> cmd_xbar_mux_014:sink2_channel
	wire          cmd_xbar_demux_004_src12_ready;                                                                      // cmd_xbar_mux_014:sink2_ready -> cmd_xbar_demux_004:src12_ready
	wire          cmd_xbar_demux_004_src13_endofpacket;                                                                // cmd_xbar_demux_004:src13_endofpacket -> cmd_xbar_mux_015:sink2_endofpacket
	wire          cmd_xbar_demux_004_src13_valid;                                                                      // cmd_xbar_demux_004:src13_valid -> cmd_xbar_mux_015:sink2_valid
	wire          cmd_xbar_demux_004_src13_startofpacket;                                                              // cmd_xbar_demux_004:src13_startofpacket -> cmd_xbar_mux_015:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src13_data;                                                                       // cmd_xbar_demux_004:src13_data -> cmd_xbar_mux_015:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src13_channel;                                                                    // cmd_xbar_demux_004:src13_channel -> cmd_xbar_mux_015:sink2_channel
	wire          cmd_xbar_demux_004_src13_ready;                                                                      // cmd_xbar_mux_015:sink2_ready -> cmd_xbar_demux_004:src13_ready
	wire          cmd_xbar_demux_004_src14_endofpacket;                                                                // cmd_xbar_demux_004:src14_endofpacket -> cmd_xbar_mux_016:sink2_endofpacket
	wire          cmd_xbar_demux_004_src14_valid;                                                                      // cmd_xbar_demux_004:src14_valid -> cmd_xbar_mux_016:sink2_valid
	wire          cmd_xbar_demux_004_src14_startofpacket;                                                              // cmd_xbar_demux_004:src14_startofpacket -> cmd_xbar_mux_016:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src14_data;                                                                       // cmd_xbar_demux_004:src14_data -> cmd_xbar_mux_016:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src14_channel;                                                                    // cmd_xbar_demux_004:src14_channel -> cmd_xbar_mux_016:sink2_channel
	wire          cmd_xbar_demux_004_src14_ready;                                                                      // cmd_xbar_mux_016:sink2_ready -> cmd_xbar_demux_004:src14_ready
	wire          cmd_xbar_demux_004_src15_endofpacket;                                                                // cmd_xbar_demux_004:src15_endofpacket -> cmd_xbar_mux_017:sink2_endofpacket
	wire          cmd_xbar_demux_004_src15_valid;                                                                      // cmd_xbar_demux_004:src15_valid -> cmd_xbar_mux_017:sink2_valid
	wire          cmd_xbar_demux_004_src15_startofpacket;                                                              // cmd_xbar_demux_004:src15_startofpacket -> cmd_xbar_mux_017:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src15_data;                                                                       // cmd_xbar_demux_004:src15_data -> cmd_xbar_mux_017:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src15_channel;                                                                    // cmd_xbar_demux_004:src15_channel -> cmd_xbar_mux_017:sink2_channel
	wire          cmd_xbar_demux_004_src15_ready;                                                                      // cmd_xbar_mux_017:sink2_ready -> cmd_xbar_demux_004:src15_ready
	wire          cmd_xbar_demux_004_src16_endofpacket;                                                                // cmd_xbar_demux_004:src16_endofpacket -> cmd_xbar_mux_018:sink2_endofpacket
	wire          cmd_xbar_demux_004_src16_valid;                                                                      // cmd_xbar_demux_004:src16_valid -> cmd_xbar_mux_018:sink2_valid
	wire          cmd_xbar_demux_004_src16_startofpacket;                                                              // cmd_xbar_demux_004:src16_startofpacket -> cmd_xbar_mux_018:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src16_data;                                                                       // cmd_xbar_demux_004:src16_data -> cmd_xbar_mux_018:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src16_channel;                                                                    // cmd_xbar_demux_004:src16_channel -> cmd_xbar_mux_018:sink2_channel
	wire          cmd_xbar_demux_004_src16_ready;                                                                      // cmd_xbar_mux_018:sink2_ready -> cmd_xbar_demux_004:src16_ready
	wire          cmd_xbar_demux_004_src17_endofpacket;                                                                // cmd_xbar_demux_004:src17_endofpacket -> cmd_xbar_mux_019:sink2_endofpacket
	wire          cmd_xbar_demux_004_src17_valid;                                                                      // cmd_xbar_demux_004:src17_valid -> cmd_xbar_mux_019:sink2_valid
	wire          cmd_xbar_demux_004_src17_startofpacket;                                                              // cmd_xbar_demux_004:src17_startofpacket -> cmd_xbar_mux_019:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src17_data;                                                                       // cmd_xbar_demux_004:src17_data -> cmd_xbar_mux_019:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src17_channel;                                                                    // cmd_xbar_demux_004:src17_channel -> cmd_xbar_mux_019:sink2_channel
	wire          cmd_xbar_demux_004_src17_ready;                                                                      // cmd_xbar_mux_019:sink2_ready -> cmd_xbar_demux_004:src17_ready
	wire          cmd_xbar_demux_004_src18_endofpacket;                                                                // cmd_xbar_demux_004:src18_endofpacket -> cmd_xbar_mux_020:sink2_endofpacket
	wire          cmd_xbar_demux_004_src18_valid;                                                                      // cmd_xbar_demux_004:src18_valid -> cmd_xbar_mux_020:sink2_valid
	wire          cmd_xbar_demux_004_src18_startofpacket;                                                              // cmd_xbar_demux_004:src18_startofpacket -> cmd_xbar_mux_020:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src18_data;                                                                       // cmd_xbar_demux_004:src18_data -> cmd_xbar_mux_020:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src18_channel;                                                                    // cmd_xbar_demux_004:src18_channel -> cmd_xbar_mux_020:sink2_channel
	wire          cmd_xbar_demux_004_src18_ready;                                                                      // cmd_xbar_mux_020:sink2_ready -> cmd_xbar_demux_004:src18_ready
	wire          cmd_xbar_demux_004_src19_endofpacket;                                                                // cmd_xbar_demux_004:src19_endofpacket -> cmd_xbar_mux_021:sink2_endofpacket
	wire          cmd_xbar_demux_004_src19_valid;                                                                      // cmd_xbar_demux_004:src19_valid -> cmd_xbar_mux_021:sink2_valid
	wire          cmd_xbar_demux_004_src19_startofpacket;                                                              // cmd_xbar_demux_004:src19_startofpacket -> cmd_xbar_mux_021:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src19_data;                                                                       // cmd_xbar_demux_004:src19_data -> cmd_xbar_mux_021:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src19_channel;                                                                    // cmd_xbar_demux_004:src19_channel -> cmd_xbar_mux_021:sink2_channel
	wire          cmd_xbar_demux_004_src19_ready;                                                                      // cmd_xbar_mux_021:sink2_ready -> cmd_xbar_demux_004:src19_ready
	wire          cmd_xbar_demux_004_src20_endofpacket;                                                                // cmd_xbar_demux_004:src20_endofpacket -> cmd_xbar_mux_022:sink2_endofpacket
	wire          cmd_xbar_demux_004_src20_valid;                                                                      // cmd_xbar_demux_004:src20_valid -> cmd_xbar_mux_022:sink2_valid
	wire          cmd_xbar_demux_004_src20_startofpacket;                                                              // cmd_xbar_demux_004:src20_startofpacket -> cmd_xbar_mux_022:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src20_data;                                                                       // cmd_xbar_demux_004:src20_data -> cmd_xbar_mux_022:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src20_channel;                                                                    // cmd_xbar_demux_004:src20_channel -> cmd_xbar_mux_022:sink2_channel
	wire          cmd_xbar_demux_004_src20_ready;                                                                      // cmd_xbar_mux_022:sink2_ready -> cmd_xbar_demux_004:src20_ready
	wire          cmd_xbar_demux_004_src21_endofpacket;                                                                // cmd_xbar_demux_004:src21_endofpacket -> cmd_xbar_mux_023:sink2_endofpacket
	wire          cmd_xbar_demux_004_src21_valid;                                                                      // cmd_xbar_demux_004:src21_valid -> cmd_xbar_mux_023:sink2_valid
	wire          cmd_xbar_demux_004_src21_startofpacket;                                                              // cmd_xbar_demux_004:src21_startofpacket -> cmd_xbar_mux_023:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src21_data;                                                                       // cmd_xbar_demux_004:src21_data -> cmd_xbar_mux_023:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src21_channel;                                                                    // cmd_xbar_demux_004:src21_channel -> cmd_xbar_mux_023:sink2_channel
	wire          cmd_xbar_demux_004_src21_ready;                                                                      // cmd_xbar_mux_023:sink2_ready -> cmd_xbar_demux_004:src21_ready
	wire          cmd_xbar_demux_004_src22_endofpacket;                                                                // cmd_xbar_demux_004:src22_endofpacket -> cmd_xbar_mux_024:sink2_endofpacket
	wire          cmd_xbar_demux_004_src22_valid;                                                                      // cmd_xbar_demux_004:src22_valid -> cmd_xbar_mux_024:sink2_valid
	wire          cmd_xbar_demux_004_src22_startofpacket;                                                              // cmd_xbar_demux_004:src22_startofpacket -> cmd_xbar_mux_024:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src22_data;                                                                       // cmd_xbar_demux_004:src22_data -> cmd_xbar_mux_024:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src22_channel;                                                                    // cmd_xbar_demux_004:src22_channel -> cmd_xbar_mux_024:sink2_channel
	wire          cmd_xbar_demux_004_src22_ready;                                                                      // cmd_xbar_mux_024:sink2_ready -> cmd_xbar_demux_004:src22_ready
	wire          cmd_xbar_demux_004_src23_endofpacket;                                                                // cmd_xbar_demux_004:src23_endofpacket -> cmd_xbar_mux_025:sink2_endofpacket
	wire          cmd_xbar_demux_004_src23_valid;                                                                      // cmd_xbar_demux_004:src23_valid -> cmd_xbar_mux_025:sink2_valid
	wire          cmd_xbar_demux_004_src23_startofpacket;                                                              // cmd_xbar_demux_004:src23_startofpacket -> cmd_xbar_mux_025:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src23_data;                                                                       // cmd_xbar_demux_004:src23_data -> cmd_xbar_mux_025:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src23_channel;                                                                    // cmd_xbar_demux_004:src23_channel -> cmd_xbar_mux_025:sink2_channel
	wire          cmd_xbar_demux_004_src23_ready;                                                                      // cmd_xbar_mux_025:sink2_ready -> cmd_xbar_demux_004:src23_ready
	wire          cmd_xbar_demux_004_src24_endofpacket;                                                                // cmd_xbar_demux_004:src24_endofpacket -> cmd_xbar_mux_026:sink2_endofpacket
	wire          cmd_xbar_demux_004_src24_valid;                                                                      // cmd_xbar_demux_004:src24_valid -> cmd_xbar_mux_026:sink2_valid
	wire          cmd_xbar_demux_004_src24_startofpacket;                                                              // cmd_xbar_demux_004:src24_startofpacket -> cmd_xbar_mux_026:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src24_data;                                                                       // cmd_xbar_demux_004:src24_data -> cmd_xbar_mux_026:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src24_channel;                                                                    // cmd_xbar_demux_004:src24_channel -> cmd_xbar_mux_026:sink2_channel
	wire          cmd_xbar_demux_004_src24_ready;                                                                      // cmd_xbar_mux_026:sink2_ready -> cmd_xbar_demux_004:src24_ready
	wire          cmd_xbar_demux_004_src25_endofpacket;                                                                // cmd_xbar_demux_004:src25_endofpacket -> cmd_xbar_mux_027:sink2_endofpacket
	wire          cmd_xbar_demux_004_src25_valid;                                                                      // cmd_xbar_demux_004:src25_valid -> cmd_xbar_mux_027:sink2_valid
	wire          cmd_xbar_demux_004_src25_startofpacket;                                                              // cmd_xbar_demux_004:src25_startofpacket -> cmd_xbar_mux_027:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src25_data;                                                                       // cmd_xbar_demux_004:src25_data -> cmd_xbar_mux_027:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src25_channel;                                                                    // cmd_xbar_demux_004:src25_channel -> cmd_xbar_mux_027:sink2_channel
	wire          cmd_xbar_demux_004_src25_ready;                                                                      // cmd_xbar_mux_027:sink2_ready -> cmd_xbar_demux_004:src25_ready
	wire          cmd_xbar_demux_004_src26_endofpacket;                                                                // cmd_xbar_demux_004:src26_endofpacket -> cmd_xbar_mux_028:sink2_endofpacket
	wire          cmd_xbar_demux_004_src26_valid;                                                                      // cmd_xbar_demux_004:src26_valid -> cmd_xbar_mux_028:sink2_valid
	wire          cmd_xbar_demux_004_src26_startofpacket;                                                              // cmd_xbar_demux_004:src26_startofpacket -> cmd_xbar_mux_028:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src26_data;                                                                       // cmd_xbar_demux_004:src26_data -> cmd_xbar_mux_028:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src26_channel;                                                                    // cmd_xbar_demux_004:src26_channel -> cmd_xbar_mux_028:sink2_channel
	wire          cmd_xbar_demux_004_src26_ready;                                                                      // cmd_xbar_mux_028:sink2_ready -> cmd_xbar_demux_004:src26_ready
	wire          cmd_xbar_demux_004_src27_endofpacket;                                                                // cmd_xbar_demux_004:src27_endofpacket -> cmd_xbar_mux_029:sink2_endofpacket
	wire          cmd_xbar_demux_004_src27_valid;                                                                      // cmd_xbar_demux_004:src27_valid -> cmd_xbar_mux_029:sink2_valid
	wire          cmd_xbar_demux_004_src27_startofpacket;                                                              // cmd_xbar_demux_004:src27_startofpacket -> cmd_xbar_mux_029:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src27_data;                                                                       // cmd_xbar_demux_004:src27_data -> cmd_xbar_mux_029:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src27_channel;                                                                    // cmd_xbar_demux_004:src27_channel -> cmd_xbar_mux_029:sink2_channel
	wire          cmd_xbar_demux_004_src27_ready;                                                                      // cmd_xbar_mux_029:sink2_ready -> cmd_xbar_demux_004:src27_ready
	wire          cmd_xbar_demux_004_src28_endofpacket;                                                                // cmd_xbar_demux_004:src28_endofpacket -> cmd_xbar_mux_030:sink2_endofpacket
	wire          cmd_xbar_demux_004_src28_valid;                                                                      // cmd_xbar_demux_004:src28_valid -> cmd_xbar_mux_030:sink2_valid
	wire          cmd_xbar_demux_004_src28_startofpacket;                                                              // cmd_xbar_demux_004:src28_startofpacket -> cmd_xbar_mux_030:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src28_data;                                                                       // cmd_xbar_demux_004:src28_data -> cmd_xbar_mux_030:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src28_channel;                                                                    // cmd_xbar_demux_004:src28_channel -> cmd_xbar_mux_030:sink2_channel
	wire          cmd_xbar_demux_004_src28_ready;                                                                      // cmd_xbar_mux_030:sink2_ready -> cmd_xbar_demux_004:src28_ready
	wire          cmd_xbar_demux_004_src29_endofpacket;                                                                // cmd_xbar_demux_004:src29_endofpacket -> cmd_xbar_mux_031:sink2_endofpacket
	wire          cmd_xbar_demux_004_src29_valid;                                                                      // cmd_xbar_demux_004:src29_valid -> cmd_xbar_mux_031:sink2_valid
	wire          cmd_xbar_demux_004_src29_startofpacket;                                                              // cmd_xbar_demux_004:src29_startofpacket -> cmd_xbar_mux_031:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src29_data;                                                                       // cmd_xbar_demux_004:src29_data -> cmd_xbar_mux_031:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src29_channel;                                                                    // cmd_xbar_demux_004:src29_channel -> cmd_xbar_mux_031:sink2_channel
	wire          cmd_xbar_demux_004_src29_ready;                                                                      // cmd_xbar_mux_031:sink2_ready -> cmd_xbar_demux_004:src29_ready
	wire          cmd_xbar_demux_004_src30_endofpacket;                                                                // cmd_xbar_demux_004:src30_endofpacket -> cmd_xbar_mux_032:sink2_endofpacket
	wire          cmd_xbar_demux_004_src30_valid;                                                                      // cmd_xbar_demux_004:src30_valid -> cmd_xbar_mux_032:sink2_valid
	wire          cmd_xbar_demux_004_src30_startofpacket;                                                              // cmd_xbar_demux_004:src30_startofpacket -> cmd_xbar_mux_032:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src30_data;                                                                       // cmd_xbar_demux_004:src30_data -> cmd_xbar_mux_032:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src30_channel;                                                                    // cmd_xbar_demux_004:src30_channel -> cmd_xbar_mux_032:sink2_channel
	wire          cmd_xbar_demux_004_src30_ready;                                                                      // cmd_xbar_mux_032:sink2_ready -> cmd_xbar_demux_004:src30_ready
	wire          cmd_xbar_demux_004_src31_endofpacket;                                                                // cmd_xbar_demux_004:src31_endofpacket -> cmd_xbar_mux_033:sink2_endofpacket
	wire          cmd_xbar_demux_004_src31_valid;                                                                      // cmd_xbar_demux_004:src31_valid -> cmd_xbar_mux_033:sink2_valid
	wire          cmd_xbar_demux_004_src31_startofpacket;                                                              // cmd_xbar_demux_004:src31_startofpacket -> cmd_xbar_mux_033:sink2_startofpacket
	wire  [134:0] cmd_xbar_demux_004_src31_data;                                                                       // cmd_xbar_demux_004:src31_data -> cmd_xbar_mux_033:sink2_data
	wire   [33:0] cmd_xbar_demux_004_src31_channel;                                                                    // cmd_xbar_demux_004:src31_channel -> cmd_xbar_mux_033:sink2_channel
	wire          cmd_xbar_demux_004_src31_ready;                                                                      // cmd_xbar_mux_033:sink2_ready -> cmd_xbar_demux_004:src31_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                     // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                           // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                   // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [170:0] rsp_xbar_demux_src0_data;                                                                            // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [33:0] rsp_xbar_demux_src0_channel;                                                                         // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                           // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                     // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                           // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                   // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [170:0] rsp_xbar_demux_src1_data;                                                                            // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [33:0] rsp_xbar_demux_src1_channel;                                                                         // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                           // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                                 // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux_002:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                       // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux_002:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                               // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux_002:sink1_startofpacket
	wire  [134:0] rsp_xbar_demux_001_src0_data;                                                                        // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux_002:sink1_data
	wire   [33:0] rsp_xbar_demux_001_src0_channel;                                                                     // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux_002:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                       // rsp_xbar_mux_002:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                                 // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_003:sink0_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                       // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_003:sink0_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                               // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_003:sink0_startofpacket
	wire  [134:0] rsp_xbar_demux_001_src1_data;                                                                        // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_003:sink0_data
	wire   [33:0] rsp_xbar_demux_001_src1_channel;                                                                     // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_003:sink0_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                       // rsp_xbar_mux_003:sink0_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_001_src2_endofpacket;                                                                 // rsp_xbar_demux_001:src2_endofpacket -> rsp_xbar_mux_004:sink0_endofpacket
	wire          rsp_xbar_demux_001_src2_valid;                                                                       // rsp_xbar_demux_001:src2_valid -> rsp_xbar_mux_004:sink0_valid
	wire          rsp_xbar_demux_001_src2_startofpacket;                                                               // rsp_xbar_demux_001:src2_startofpacket -> rsp_xbar_mux_004:sink0_startofpacket
	wire  [134:0] rsp_xbar_demux_001_src2_data;                                                                        // rsp_xbar_demux_001:src2_data -> rsp_xbar_mux_004:sink0_data
	wire   [33:0] rsp_xbar_demux_001_src2_channel;                                                                     // rsp_xbar_demux_001:src2_channel -> rsp_xbar_mux_004:sink0_channel
	wire          rsp_xbar_demux_001_src2_ready;                                                                       // rsp_xbar_mux_004:sink0_ready -> rsp_xbar_demux_001:src2_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                                 // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux_002:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                       // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux_002:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                               // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux_002:sink2_startofpacket
	wire  [134:0] rsp_xbar_demux_002_src0_data;                                                                        // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux_002:sink2_data
	wire   [33:0] rsp_xbar_demux_002_src0_channel;                                                                     // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux_002:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                       // rsp_xbar_mux_002:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                                 // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux_002:sink3_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                       // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux_002:sink3_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                               // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux_002:sink3_startofpacket
	wire  [134:0] rsp_xbar_demux_003_src0_data;                                                                        // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux_002:sink3_data
	wire   [33:0] rsp_xbar_demux_003_src0_channel;                                                                     // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux_002:sink3_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                       // rsp_xbar_mux_002:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_003_src1_endofpacket;                                                                 // rsp_xbar_demux_003:src1_endofpacket -> rsp_xbar_mux_003:sink1_endofpacket
	wire          rsp_xbar_demux_003_src1_valid;                                                                       // rsp_xbar_demux_003:src1_valid -> rsp_xbar_mux_003:sink1_valid
	wire          rsp_xbar_demux_003_src1_startofpacket;                                                               // rsp_xbar_demux_003:src1_startofpacket -> rsp_xbar_mux_003:sink1_startofpacket
	wire  [134:0] rsp_xbar_demux_003_src1_data;                                                                        // rsp_xbar_demux_003:src1_data -> rsp_xbar_mux_003:sink1_data
	wire   [33:0] rsp_xbar_demux_003_src1_channel;                                                                     // rsp_xbar_demux_003:src1_channel -> rsp_xbar_mux_003:sink1_channel
	wire          rsp_xbar_demux_003_src1_ready;                                                                       // rsp_xbar_mux_003:sink1_ready -> rsp_xbar_demux_003:src1_ready
	wire          rsp_xbar_demux_003_src2_endofpacket;                                                                 // rsp_xbar_demux_003:src2_endofpacket -> rsp_xbar_mux_004:sink1_endofpacket
	wire          rsp_xbar_demux_003_src2_valid;                                                                       // rsp_xbar_demux_003:src2_valid -> rsp_xbar_mux_004:sink1_valid
	wire          rsp_xbar_demux_003_src2_startofpacket;                                                               // rsp_xbar_demux_003:src2_startofpacket -> rsp_xbar_mux_004:sink1_startofpacket
	wire  [134:0] rsp_xbar_demux_003_src2_data;                                                                        // rsp_xbar_demux_003:src2_data -> rsp_xbar_mux_004:sink1_data
	wire   [33:0] rsp_xbar_demux_003_src2_channel;                                                                     // rsp_xbar_demux_003:src2_channel -> rsp_xbar_mux_004:sink1_channel
	wire          rsp_xbar_demux_003_src2_ready;                                                                       // rsp_xbar_mux_004:sink1_ready -> rsp_xbar_demux_003:src2_ready
	wire          rsp_xbar_demux_004_src0_endofpacket;                                                                 // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux_002:sink4_endofpacket
	wire          rsp_xbar_demux_004_src0_valid;                                                                       // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux_002:sink4_valid
	wire          rsp_xbar_demux_004_src0_startofpacket;                                                               // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux_002:sink4_startofpacket
	wire  [134:0] rsp_xbar_demux_004_src0_data;                                                                        // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux_002:sink4_data
	wire   [33:0] rsp_xbar_demux_004_src0_channel;                                                                     // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux_002:sink4_channel
	wire          rsp_xbar_demux_004_src0_ready;                                                                       // rsp_xbar_mux_002:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_004_src1_endofpacket;                                                                 // rsp_xbar_demux_004:src1_endofpacket -> rsp_xbar_mux_003:sink2_endofpacket
	wire          rsp_xbar_demux_004_src1_valid;                                                                       // rsp_xbar_demux_004:src1_valid -> rsp_xbar_mux_003:sink2_valid
	wire          rsp_xbar_demux_004_src1_startofpacket;                                                               // rsp_xbar_demux_004:src1_startofpacket -> rsp_xbar_mux_003:sink2_startofpacket
	wire  [134:0] rsp_xbar_demux_004_src1_data;                                                                        // rsp_xbar_demux_004:src1_data -> rsp_xbar_mux_003:sink2_data
	wire   [33:0] rsp_xbar_demux_004_src1_channel;                                                                     // rsp_xbar_demux_004:src1_channel -> rsp_xbar_mux_003:sink2_channel
	wire          rsp_xbar_demux_004_src1_ready;                                                                       // rsp_xbar_mux_003:sink2_ready -> rsp_xbar_demux_004:src1_ready
	wire          rsp_xbar_demux_004_src2_endofpacket;                                                                 // rsp_xbar_demux_004:src2_endofpacket -> rsp_xbar_mux_004:sink2_endofpacket
	wire          rsp_xbar_demux_004_src2_valid;                                                                       // rsp_xbar_demux_004:src2_valid -> rsp_xbar_mux_004:sink2_valid
	wire          rsp_xbar_demux_004_src2_startofpacket;                                                               // rsp_xbar_demux_004:src2_startofpacket -> rsp_xbar_mux_004:sink2_startofpacket
	wire  [134:0] rsp_xbar_demux_004_src2_data;                                                                        // rsp_xbar_demux_004:src2_data -> rsp_xbar_mux_004:sink2_data
	wire   [33:0] rsp_xbar_demux_004_src2_channel;                                                                     // rsp_xbar_demux_004:src2_channel -> rsp_xbar_mux_004:sink2_channel
	wire          rsp_xbar_demux_004_src2_ready;                                                                       // rsp_xbar_mux_004:sink2_ready -> rsp_xbar_demux_004:src2_ready
	wire          rsp_xbar_demux_005_src0_endofpacket;                                                                 // rsp_xbar_demux_005:src0_endofpacket -> rsp_xbar_mux_002:sink5_endofpacket
	wire          rsp_xbar_demux_005_src0_valid;                                                                       // rsp_xbar_demux_005:src0_valid -> rsp_xbar_mux_002:sink5_valid
	wire          rsp_xbar_demux_005_src0_startofpacket;                                                               // rsp_xbar_demux_005:src0_startofpacket -> rsp_xbar_mux_002:sink5_startofpacket
	wire  [134:0] rsp_xbar_demux_005_src0_data;                                                                        // rsp_xbar_demux_005:src0_data -> rsp_xbar_mux_002:sink5_data
	wire   [33:0] rsp_xbar_demux_005_src0_channel;                                                                     // rsp_xbar_demux_005:src0_channel -> rsp_xbar_mux_002:sink5_channel
	wire          rsp_xbar_demux_005_src0_ready;                                                                       // rsp_xbar_mux_002:sink5_ready -> rsp_xbar_demux_005:src0_ready
	wire          rsp_xbar_demux_005_src1_endofpacket;                                                                 // rsp_xbar_demux_005:src1_endofpacket -> rsp_xbar_mux_003:sink3_endofpacket
	wire          rsp_xbar_demux_005_src1_valid;                                                                       // rsp_xbar_demux_005:src1_valid -> rsp_xbar_mux_003:sink3_valid
	wire          rsp_xbar_demux_005_src1_startofpacket;                                                               // rsp_xbar_demux_005:src1_startofpacket -> rsp_xbar_mux_003:sink3_startofpacket
	wire  [134:0] rsp_xbar_demux_005_src1_data;                                                                        // rsp_xbar_demux_005:src1_data -> rsp_xbar_mux_003:sink3_data
	wire   [33:0] rsp_xbar_demux_005_src1_channel;                                                                     // rsp_xbar_demux_005:src1_channel -> rsp_xbar_mux_003:sink3_channel
	wire          rsp_xbar_demux_005_src1_ready;                                                                       // rsp_xbar_mux_003:sink3_ready -> rsp_xbar_demux_005:src1_ready
	wire          rsp_xbar_demux_005_src2_endofpacket;                                                                 // rsp_xbar_demux_005:src2_endofpacket -> rsp_xbar_mux_004:sink3_endofpacket
	wire          rsp_xbar_demux_005_src2_valid;                                                                       // rsp_xbar_demux_005:src2_valid -> rsp_xbar_mux_004:sink3_valid
	wire          rsp_xbar_demux_005_src2_startofpacket;                                                               // rsp_xbar_demux_005:src2_startofpacket -> rsp_xbar_mux_004:sink3_startofpacket
	wire  [134:0] rsp_xbar_demux_005_src2_data;                                                                        // rsp_xbar_demux_005:src2_data -> rsp_xbar_mux_004:sink3_data
	wire   [33:0] rsp_xbar_demux_005_src2_channel;                                                                     // rsp_xbar_demux_005:src2_channel -> rsp_xbar_mux_004:sink3_channel
	wire          rsp_xbar_demux_005_src2_ready;                                                                       // rsp_xbar_mux_004:sink3_ready -> rsp_xbar_demux_005:src2_ready
	wire          rsp_xbar_demux_006_src0_endofpacket;                                                                 // rsp_xbar_demux_006:src0_endofpacket -> rsp_xbar_mux_002:sink6_endofpacket
	wire          rsp_xbar_demux_006_src0_valid;                                                                       // rsp_xbar_demux_006:src0_valid -> rsp_xbar_mux_002:sink6_valid
	wire          rsp_xbar_demux_006_src0_startofpacket;                                                               // rsp_xbar_demux_006:src0_startofpacket -> rsp_xbar_mux_002:sink6_startofpacket
	wire  [134:0] rsp_xbar_demux_006_src0_data;                                                                        // rsp_xbar_demux_006:src0_data -> rsp_xbar_mux_002:sink6_data
	wire   [33:0] rsp_xbar_demux_006_src0_channel;                                                                     // rsp_xbar_demux_006:src0_channel -> rsp_xbar_mux_002:sink6_channel
	wire          rsp_xbar_demux_006_src0_ready;                                                                       // rsp_xbar_mux_002:sink6_ready -> rsp_xbar_demux_006:src0_ready
	wire          rsp_xbar_demux_006_src1_endofpacket;                                                                 // rsp_xbar_demux_006:src1_endofpacket -> rsp_xbar_mux_003:sink4_endofpacket
	wire          rsp_xbar_demux_006_src1_valid;                                                                       // rsp_xbar_demux_006:src1_valid -> rsp_xbar_mux_003:sink4_valid
	wire          rsp_xbar_demux_006_src1_startofpacket;                                                               // rsp_xbar_demux_006:src1_startofpacket -> rsp_xbar_mux_003:sink4_startofpacket
	wire  [134:0] rsp_xbar_demux_006_src1_data;                                                                        // rsp_xbar_demux_006:src1_data -> rsp_xbar_mux_003:sink4_data
	wire   [33:0] rsp_xbar_demux_006_src1_channel;                                                                     // rsp_xbar_demux_006:src1_channel -> rsp_xbar_mux_003:sink4_channel
	wire          rsp_xbar_demux_006_src1_ready;                                                                       // rsp_xbar_mux_003:sink4_ready -> rsp_xbar_demux_006:src1_ready
	wire          rsp_xbar_demux_006_src2_endofpacket;                                                                 // rsp_xbar_demux_006:src2_endofpacket -> rsp_xbar_mux_004:sink4_endofpacket
	wire          rsp_xbar_demux_006_src2_valid;                                                                       // rsp_xbar_demux_006:src2_valid -> rsp_xbar_mux_004:sink4_valid
	wire          rsp_xbar_demux_006_src2_startofpacket;                                                               // rsp_xbar_demux_006:src2_startofpacket -> rsp_xbar_mux_004:sink4_startofpacket
	wire  [134:0] rsp_xbar_demux_006_src2_data;                                                                        // rsp_xbar_demux_006:src2_data -> rsp_xbar_mux_004:sink4_data
	wire   [33:0] rsp_xbar_demux_006_src2_channel;                                                                     // rsp_xbar_demux_006:src2_channel -> rsp_xbar_mux_004:sink4_channel
	wire          rsp_xbar_demux_006_src2_ready;                                                                       // rsp_xbar_mux_004:sink4_ready -> rsp_xbar_demux_006:src2_ready
	wire          rsp_xbar_demux_007_src0_endofpacket;                                                                 // rsp_xbar_demux_007:src0_endofpacket -> rsp_xbar_mux_002:sink7_endofpacket
	wire          rsp_xbar_demux_007_src0_valid;                                                                       // rsp_xbar_demux_007:src0_valid -> rsp_xbar_mux_002:sink7_valid
	wire          rsp_xbar_demux_007_src0_startofpacket;                                                               // rsp_xbar_demux_007:src0_startofpacket -> rsp_xbar_mux_002:sink7_startofpacket
	wire  [134:0] rsp_xbar_demux_007_src0_data;                                                                        // rsp_xbar_demux_007:src0_data -> rsp_xbar_mux_002:sink7_data
	wire   [33:0] rsp_xbar_demux_007_src0_channel;                                                                     // rsp_xbar_demux_007:src0_channel -> rsp_xbar_mux_002:sink7_channel
	wire          rsp_xbar_demux_007_src0_ready;                                                                       // rsp_xbar_mux_002:sink7_ready -> rsp_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_007_src1_endofpacket;                                                                 // rsp_xbar_demux_007:src1_endofpacket -> rsp_xbar_mux_003:sink5_endofpacket
	wire          rsp_xbar_demux_007_src1_valid;                                                                       // rsp_xbar_demux_007:src1_valid -> rsp_xbar_mux_003:sink5_valid
	wire          rsp_xbar_demux_007_src1_startofpacket;                                                               // rsp_xbar_demux_007:src1_startofpacket -> rsp_xbar_mux_003:sink5_startofpacket
	wire  [134:0] rsp_xbar_demux_007_src1_data;                                                                        // rsp_xbar_demux_007:src1_data -> rsp_xbar_mux_003:sink5_data
	wire   [33:0] rsp_xbar_demux_007_src1_channel;                                                                     // rsp_xbar_demux_007:src1_channel -> rsp_xbar_mux_003:sink5_channel
	wire          rsp_xbar_demux_007_src1_ready;                                                                       // rsp_xbar_mux_003:sink5_ready -> rsp_xbar_demux_007:src1_ready
	wire          rsp_xbar_demux_007_src2_endofpacket;                                                                 // rsp_xbar_demux_007:src2_endofpacket -> rsp_xbar_mux_004:sink5_endofpacket
	wire          rsp_xbar_demux_007_src2_valid;                                                                       // rsp_xbar_demux_007:src2_valid -> rsp_xbar_mux_004:sink5_valid
	wire          rsp_xbar_demux_007_src2_startofpacket;                                                               // rsp_xbar_demux_007:src2_startofpacket -> rsp_xbar_mux_004:sink5_startofpacket
	wire  [134:0] rsp_xbar_demux_007_src2_data;                                                                        // rsp_xbar_demux_007:src2_data -> rsp_xbar_mux_004:sink5_data
	wire   [33:0] rsp_xbar_demux_007_src2_channel;                                                                     // rsp_xbar_demux_007:src2_channel -> rsp_xbar_mux_004:sink5_channel
	wire          rsp_xbar_demux_007_src2_ready;                                                                       // rsp_xbar_mux_004:sink5_ready -> rsp_xbar_demux_007:src2_ready
	wire          rsp_xbar_demux_008_src0_endofpacket;                                                                 // rsp_xbar_demux_008:src0_endofpacket -> rsp_xbar_mux_002:sink8_endofpacket
	wire          rsp_xbar_demux_008_src0_valid;                                                                       // rsp_xbar_demux_008:src0_valid -> rsp_xbar_mux_002:sink8_valid
	wire          rsp_xbar_demux_008_src0_startofpacket;                                                               // rsp_xbar_demux_008:src0_startofpacket -> rsp_xbar_mux_002:sink8_startofpacket
	wire  [134:0] rsp_xbar_demux_008_src0_data;                                                                        // rsp_xbar_demux_008:src0_data -> rsp_xbar_mux_002:sink8_data
	wire   [33:0] rsp_xbar_demux_008_src0_channel;                                                                     // rsp_xbar_demux_008:src0_channel -> rsp_xbar_mux_002:sink8_channel
	wire          rsp_xbar_demux_008_src0_ready;                                                                       // rsp_xbar_mux_002:sink8_ready -> rsp_xbar_demux_008:src0_ready
	wire          rsp_xbar_demux_008_src1_endofpacket;                                                                 // rsp_xbar_demux_008:src1_endofpacket -> rsp_xbar_mux_003:sink6_endofpacket
	wire          rsp_xbar_demux_008_src1_valid;                                                                       // rsp_xbar_demux_008:src1_valid -> rsp_xbar_mux_003:sink6_valid
	wire          rsp_xbar_demux_008_src1_startofpacket;                                                               // rsp_xbar_demux_008:src1_startofpacket -> rsp_xbar_mux_003:sink6_startofpacket
	wire  [134:0] rsp_xbar_demux_008_src1_data;                                                                        // rsp_xbar_demux_008:src1_data -> rsp_xbar_mux_003:sink6_data
	wire   [33:0] rsp_xbar_demux_008_src1_channel;                                                                     // rsp_xbar_demux_008:src1_channel -> rsp_xbar_mux_003:sink6_channel
	wire          rsp_xbar_demux_008_src1_ready;                                                                       // rsp_xbar_mux_003:sink6_ready -> rsp_xbar_demux_008:src1_ready
	wire          rsp_xbar_demux_008_src2_endofpacket;                                                                 // rsp_xbar_demux_008:src2_endofpacket -> rsp_xbar_mux_004:sink6_endofpacket
	wire          rsp_xbar_demux_008_src2_valid;                                                                       // rsp_xbar_demux_008:src2_valid -> rsp_xbar_mux_004:sink6_valid
	wire          rsp_xbar_demux_008_src2_startofpacket;                                                               // rsp_xbar_demux_008:src2_startofpacket -> rsp_xbar_mux_004:sink6_startofpacket
	wire  [134:0] rsp_xbar_demux_008_src2_data;                                                                        // rsp_xbar_demux_008:src2_data -> rsp_xbar_mux_004:sink6_data
	wire   [33:0] rsp_xbar_demux_008_src2_channel;                                                                     // rsp_xbar_demux_008:src2_channel -> rsp_xbar_mux_004:sink6_channel
	wire          rsp_xbar_demux_008_src2_ready;                                                                       // rsp_xbar_mux_004:sink6_ready -> rsp_xbar_demux_008:src2_ready
	wire          rsp_xbar_demux_009_src0_endofpacket;                                                                 // rsp_xbar_demux_009:src0_endofpacket -> rsp_xbar_mux_002:sink9_endofpacket
	wire          rsp_xbar_demux_009_src0_valid;                                                                       // rsp_xbar_demux_009:src0_valid -> rsp_xbar_mux_002:sink9_valid
	wire          rsp_xbar_demux_009_src0_startofpacket;                                                               // rsp_xbar_demux_009:src0_startofpacket -> rsp_xbar_mux_002:sink9_startofpacket
	wire  [134:0] rsp_xbar_demux_009_src0_data;                                                                        // rsp_xbar_demux_009:src0_data -> rsp_xbar_mux_002:sink9_data
	wire   [33:0] rsp_xbar_demux_009_src0_channel;                                                                     // rsp_xbar_demux_009:src0_channel -> rsp_xbar_mux_002:sink9_channel
	wire          rsp_xbar_demux_009_src0_ready;                                                                       // rsp_xbar_mux_002:sink9_ready -> rsp_xbar_demux_009:src0_ready
	wire          rsp_xbar_demux_009_src1_endofpacket;                                                                 // rsp_xbar_demux_009:src1_endofpacket -> rsp_xbar_mux_003:sink7_endofpacket
	wire          rsp_xbar_demux_009_src1_valid;                                                                       // rsp_xbar_demux_009:src1_valid -> rsp_xbar_mux_003:sink7_valid
	wire          rsp_xbar_demux_009_src1_startofpacket;                                                               // rsp_xbar_demux_009:src1_startofpacket -> rsp_xbar_mux_003:sink7_startofpacket
	wire  [134:0] rsp_xbar_demux_009_src1_data;                                                                        // rsp_xbar_demux_009:src1_data -> rsp_xbar_mux_003:sink7_data
	wire   [33:0] rsp_xbar_demux_009_src1_channel;                                                                     // rsp_xbar_demux_009:src1_channel -> rsp_xbar_mux_003:sink7_channel
	wire          rsp_xbar_demux_009_src1_ready;                                                                       // rsp_xbar_mux_003:sink7_ready -> rsp_xbar_demux_009:src1_ready
	wire          rsp_xbar_demux_009_src2_endofpacket;                                                                 // rsp_xbar_demux_009:src2_endofpacket -> rsp_xbar_mux_004:sink7_endofpacket
	wire          rsp_xbar_demux_009_src2_valid;                                                                       // rsp_xbar_demux_009:src2_valid -> rsp_xbar_mux_004:sink7_valid
	wire          rsp_xbar_demux_009_src2_startofpacket;                                                               // rsp_xbar_demux_009:src2_startofpacket -> rsp_xbar_mux_004:sink7_startofpacket
	wire  [134:0] rsp_xbar_demux_009_src2_data;                                                                        // rsp_xbar_demux_009:src2_data -> rsp_xbar_mux_004:sink7_data
	wire   [33:0] rsp_xbar_demux_009_src2_channel;                                                                     // rsp_xbar_demux_009:src2_channel -> rsp_xbar_mux_004:sink7_channel
	wire          rsp_xbar_demux_009_src2_ready;                                                                       // rsp_xbar_mux_004:sink7_ready -> rsp_xbar_demux_009:src2_ready
	wire          rsp_xbar_demux_010_src0_endofpacket;                                                                 // rsp_xbar_demux_010:src0_endofpacket -> rsp_xbar_mux_002:sink10_endofpacket
	wire          rsp_xbar_demux_010_src0_valid;                                                                       // rsp_xbar_demux_010:src0_valid -> rsp_xbar_mux_002:sink10_valid
	wire          rsp_xbar_demux_010_src0_startofpacket;                                                               // rsp_xbar_demux_010:src0_startofpacket -> rsp_xbar_mux_002:sink10_startofpacket
	wire  [134:0] rsp_xbar_demux_010_src0_data;                                                                        // rsp_xbar_demux_010:src0_data -> rsp_xbar_mux_002:sink10_data
	wire   [33:0] rsp_xbar_demux_010_src0_channel;                                                                     // rsp_xbar_demux_010:src0_channel -> rsp_xbar_mux_002:sink10_channel
	wire          rsp_xbar_demux_010_src0_ready;                                                                       // rsp_xbar_mux_002:sink10_ready -> rsp_xbar_demux_010:src0_ready
	wire          rsp_xbar_demux_010_src1_endofpacket;                                                                 // rsp_xbar_demux_010:src1_endofpacket -> rsp_xbar_mux_003:sink8_endofpacket
	wire          rsp_xbar_demux_010_src1_valid;                                                                       // rsp_xbar_demux_010:src1_valid -> rsp_xbar_mux_003:sink8_valid
	wire          rsp_xbar_demux_010_src1_startofpacket;                                                               // rsp_xbar_demux_010:src1_startofpacket -> rsp_xbar_mux_003:sink8_startofpacket
	wire  [134:0] rsp_xbar_demux_010_src1_data;                                                                        // rsp_xbar_demux_010:src1_data -> rsp_xbar_mux_003:sink8_data
	wire   [33:0] rsp_xbar_demux_010_src1_channel;                                                                     // rsp_xbar_demux_010:src1_channel -> rsp_xbar_mux_003:sink8_channel
	wire          rsp_xbar_demux_010_src1_ready;                                                                       // rsp_xbar_mux_003:sink8_ready -> rsp_xbar_demux_010:src1_ready
	wire          rsp_xbar_demux_010_src2_endofpacket;                                                                 // rsp_xbar_demux_010:src2_endofpacket -> rsp_xbar_mux_004:sink8_endofpacket
	wire          rsp_xbar_demux_010_src2_valid;                                                                       // rsp_xbar_demux_010:src2_valid -> rsp_xbar_mux_004:sink8_valid
	wire          rsp_xbar_demux_010_src2_startofpacket;                                                               // rsp_xbar_demux_010:src2_startofpacket -> rsp_xbar_mux_004:sink8_startofpacket
	wire  [134:0] rsp_xbar_demux_010_src2_data;                                                                        // rsp_xbar_demux_010:src2_data -> rsp_xbar_mux_004:sink8_data
	wire   [33:0] rsp_xbar_demux_010_src2_channel;                                                                     // rsp_xbar_demux_010:src2_channel -> rsp_xbar_mux_004:sink8_channel
	wire          rsp_xbar_demux_010_src2_ready;                                                                       // rsp_xbar_mux_004:sink8_ready -> rsp_xbar_demux_010:src2_ready
	wire          rsp_xbar_demux_011_src0_endofpacket;                                                                 // rsp_xbar_demux_011:src0_endofpacket -> rsp_xbar_mux_002:sink11_endofpacket
	wire          rsp_xbar_demux_011_src0_valid;                                                                       // rsp_xbar_demux_011:src0_valid -> rsp_xbar_mux_002:sink11_valid
	wire          rsp_xbar_demux_011_src0_startofpacket;                                                               // rsp_xbar_demux_011:src0_startofpacket -> rsp_xbar_mux_002:sink11_startofpacket
	wire  [134:0] rsp_xbar_demux_011_src0_data;                                                                        // rsp_xbar_demux_011:src0_data -> rsp_xbar_mux_002:sink11_data
	wire   [33:0] rsp_xbar_demux_011_src0_channel;                                                                     // rsp_xbar_demux_011:src0_channel -> rsp_xbar_mux_002:sink11_channel
	wire          rsp_xbar_demux_011_src0_ready;                                                                       // rsp_xbar_mux_002:sink11_ready -> rsp_xbar_demux_011:src0_ready
	wire          rsp_xbar_demux_011_src1_endofpacket;                                                                 // rsp_xbar_demux_011:src1_endofpacket -> rsp_xbar_mux_003:sink9_endofpacket
	wire          rsp_xbar_demux_011_src1_valid;                                                                       // rsp_xbar_demux_011:src1_valid -> rsp_xbar_mux_003:sink9_valid
	wire          rsp_xbar_demux_011_src1_startofpacket;                                                               // rsp_xbar_demux_011:src1_startofpacket -> rsp_xbar_mux_003:sink9_startofpacket
	wire  [134:0] rsp_xbar_demux_011_src1_data;                                                                        // rsp_xbar_demux_011:src1_data -> rsp_xbar_mux_003:sink9_data
	wire   [33:0] rsp_xbar_demux_011_src1_channel;                                                                     // rsp_xbar_demux_011:src1_channel -> rsp_xbar_mux_003:sink9_channel
	wire          rsp_xbar_demux_011_src1_ready;                                                                       // rsp_xbar_mux_003:sink9_ready -> rsp_xbar_demux_011:src1_ready
	wire          rsp_xbar_demux_011_src2_endofpacket;                                                                 // rsp_xbar_demux_011:src2_endofpacket -> rsp_xbar_mux_004:sink9_endofpacket
	wire          rsp_xbar_demux_011_src2_valid;                                                                       // rsp_xbar_demux_011:src2_valid -> rsp_xbar_mux_004:sink9_valid
	wire          rsp_xbar_demux_011_src2_startofpacket;                                                               // rsp_xbar_demux_011:src2_startofpacket -> rsp_xbar_mux_004:sink9_startofpacket
	wire  [134:0] rsp_xbar_demux_011_src2_data;                                                                        // rsp_xbar_demux_011:src2_data -> rsp_xbar_mux_004:sink9_data
	wire   [33:0] rsp_xbar_demux_011_src2_channel;                                                                     // rsp_xbar_demux_011:src2_channel -> rsp_xbar_mux_004:sink9_channel
	wire          rsp_xbar_demux_011_src2_ready;                                                                       // rsp_xbar_mux_004:sink9_ready -> rsp_xbar_demux_011:src2_ready
	wire          rsp_xbar_demux_012_src0_endofpacket;                                                                 // rsp_xbar_demux_012:src0_endofpacket -> rsp_xbar_mux_002:sink12_endofpacket
	wire          rsp_xbar_demux_012_src0_valid;                                                                       // rsp_xbar_demux_012:src0_valid -> rsp_xbar_mux_002:sink12_valid
	wire          rsp_xbar_demux_012_src0_startofpacket;                                                               // rsp_xbar_demux_012:src0_startofpacket -> rsp_xbar_mux_002:sink12_startofpacket
	wire  [134:0] rsp_xbar_demux_012_src0_data;                                                                        // rsp_xbar_demux_012:src0_data -> rsp_xbar_mux_002:sink12_data
	wire   [33:0] rsp_xbar_demux_012_src0_channel;                                                                     // rsp_xbar_demux_012:src0_channel -> rsp_xbar_mux_002:sink12_channel
	wire          rsp_xbar_demux_012_src0_ready;                                                                       // rsp_xbar_mux_002:sink12_ready -> rsp_xbar_demux_012:src0_ready
	wire          rsp_xbar_demux_012_src1_endofpacket;                                                                 // rsp_xbar_demux_012:src1_endofpacket -> rsp_xbar_mux_003:sink10_endofpacket
	wire          rsp_xbar_demux_012_src1_valid;                                                                       // rsp_xbar_demux_012:src1_valid -> rsp_xbar_mux_003:sink10_valid
	wire          rsp_xbar_demux_012_src1_startofpacket;                                                               // rsp_xbar_demux_012:src1_startofpacket -> rsp_xbar_mux_003:sink10_startofpacket
	wire  [134:0] rsp_xbar_demux_012_src1_data;                                                                        // rsp_xbar_demux_012:src1_data -> rsp_xbar_mux_003:sink10_data
	wire   [33:0] rsp_xbar_demux_012_src1_channel;                                                                     // rsp_xbar_demux_012:src1_channel -> rsp_xbar_mux_003:sink10_channel
	wire          rsp_xbar_demux_012_src1_ready;                                                                       // rsp_xbar_mux_003:sink10_ready -> rsp_xbar_demux_012:src1_ready
	wire          rsp_xbar_demux_012_src2_endofpacket;                                                                 // rsp_xbar_demux_012:src2_endofpacket -> rsp_xbar_mux_004:sink10_endofpacket
	wire          rsp_xbar_demux_012_src2_valid;                                                                       // rsp_xbar_demux_012:src2_valid -> rsp_xbar_mux_004:sink10_valid
	wire          rsp_xbar_demux_012_src2_startofpacket;                                                               // rsp_xbar_demux_012:src2_startofpacket -> rsp_xbar_mux_004:sink10_startofpacket
	wire  [134:0] rsp_xbar_demux_012_src2_data;                                                                        // rsp_xbar_demux_012:src2_data -> rsp_xbar_mux_004:sink10_data
	wire   [33:0] rsp_xbar_demux_012_src2_channel;                                                                     // rsp_xbar_demux_012:src2_channel -> rsp_xbar_mux_004:sink10_channel
	wire          rsp_xbar_demux_012_src2_ready;                                                                       // rsp_xbar_mux_004:sink10_ready -> rsp_xbar_demux_012:src2_ready
	wire          rsp_xbar_demux_013_src0_endofpacket;                                                                 // rsp_xbar_demux_013:src0_endofpacket -> rsp_xbar_mux_002:sink13_endofpacket
	wire          rsp_xbar_demux_013_src0_valid;                                                                       // rsp_xbar_demux_013:src0_valid -> rsp_xbar_mux_002:sink13_valid
	wire          rsp_xbar_demux_013_src0_startofpacket;                                                               // rsp_xbar_demux_013:src0_startofpacket -> rsp_xbar_mux_002:sink13_startofpacket
	wire  [134:0] rsp_xbar_demux_013_src0_data;                                                                        // rsp_xbar_demux_013:src0_data -> rsp_xbar_mux_002:sink13_data
	wire   [33:0] rsp_xbar_demux_013_src0_channel;                                                                     // rsp_xbar_demux_013:src0_channel -> rsp_xbar_mux_002:sink13_channel
	wire          rsp_xbar_demux_013_src0_ready;                                                                       // rsp_xbar_mux_002:sink13_ready -> rsp_xbar_demux_013:src0_ready
	wire          rsp_xbar_demux_013_src1_endofpacket;                                                                 // rsp_xbar_demux_013:src1_endofpacket -> rsp_xbar_mux_003:sink11_endofpacket
	wire          rsp_xbar_demux_013_src1_valid;                                                                       // rsp_xbar_demux_013:src1_valid -> rsp_xbar_mux_003:sink11_valid
	wire          rsp_xbar_demux_013_src1_startofpacket;                                                               // rsp_xbar_demux_013:src1_startofpacket -> rsp_xbar_mux_003:sink11_startofpacket
	wire  [134:0] rsp_xbar_demux_013_src1_data;                                                                        // rsp_xbar_demux_013:src1_data -> rsp_xbar_mux_003:sink11_data
	wire   [33:0] rsp_xbar_demux_013_src1_channel;                                                                     // rsp_xbar_demux_013:src1_channel -> rsp_xbar_mux_003:sink11_channel
	wire          rsp_xbar_demux_013_src1_ready;                                                                       // rsp_xbar_mux_003:sink11_ready -> rsp_xbar_demux_013:src1_ready
	wire          rsp_xbar_demux_013_src2_endofpacket;                                                                 // rsp_xbar_demux_013:src2_endofpacket -> rsp_xbar_mux_004:sink11_endofpacket
	wire          rsp_xbar_demux_013_src2_valid;                                                                       // rsp_xbar_demux_013:src2_valid -> rsp_xbar_mux_004:sink11_valid
	wire          rsp_xbar_demux_013_src2_startofpacket;                                                               // rsp_xbar_demux_013:src2_startofpacket -> rsp_xbar_mux_004:sink11_startofpacket
	wire  [134:0] rsp_xbar_demux_013_src2_data;                                                                        // rsp_xbar_demux_013:src2_data -> rsp_xbar_mux_004:sink11_data
	wire   [33:0] rsp_xbar_demux_013_src2_channel;                                                                     // rsp_xbar_demux_013:src2_channel -> rsp_xbar_mux_004:sink11_channel
	wire          rsp_xbar_demux_013_src2_ready;                                                                       // rsp_xbar_mux_004:sink11_ready -> rsp_xbar_demux_013:src2_ready
	wire          rsp_xbar_demux_014_src0_endofpacket;                                                                 // rsp_xbar_demux_014:src0_endofpacket -> rsp_xbar_mux_002:sink14_endofpacket
	wire          rsp_xbar_demux_014_src0_valid;                                                                       // rsp_xbar_demux_014:src0_valid -> rsp_xbar_mux_002:sink14_valid
	wire          rsp_xbar_demux_014_src0_startofpacket;                                                               // rsp_xbar_demux_014:src0_startofpacket -> rsp_xbar_mux_002:sink14_startofpacket
	wire  [134:0] rsp_xbar_demux_014_src0_data;                                                                        // rsp_xbar_demux_014:src0_data -> rsp_xbar_mux_002:sink14_data
	wire   [33:0] rsp_xbar_demux_014_src0_channel;                                                                     // rsp_xbar_demux_014:src0_channel -> rsp_xbar_mux_002:sink14_channel
	wire          rsp_xbar_demux_014_src0_ready;                                                                       // rsp_xbar_mux_002:sink14_ready -> rsp_xbar_demux_014:src0_ready
	wire          rsp_xbar_demux_014_src1_endofpacket;                                                                 // rsp_xbar_demux_014:src1_endofpacket -> rsp_xbar_mux_003:sink12_endofpacket
	wire          rsp_xbar_demux_014_src1_valid;                                                                       // rsp_xbar_demux_014:src1_valid -> rsp_xbar_mux_003:sink12_valid
	wire          rsp_xbar_demux_014_src1_startofpacket;                                                               // rsp_xbar_demux_014:src1_startofpacket -> rsp_xbar_mux_003:sink12_startofpacket
	wire  [134:0] rsp_xbar_demux_014_src1_data;                                                                        // rsp_xbar_demux_014:src1_data -> rsp_xbar_mux_003:sink12_data
	wire   [33:0] rsp_xbar_demux_014_src1_channel;                                                                     // rsp_xbar_demux_014:src1_channel -> rsp_xbar_mux_003:sink12_channel
	wire          rsp_xbar_demux_014_src1_ready;                                                                       // rsp_xbar_mux_003:sink12_ready -> rsp_xbar_demux_014:src1_ready
	wire          rsp_xbar_demux_014_src2_endofpacket;                                                                 // rsp_xbar_demux_014:src2_endofpacket -> rsp_xbar_mux_004:sink12_endofpacket
	wire          rsp_xbar_demux_014_src2_valid;                                                                       // rsp_xbar_demux_014:src2_valid -> rsp_xbar_mux_004:sink12_valid
	wire          rsp_xbar_demux_014_src2_startofpacket;                                                               // rsp_xbar_demux_014:src2_startofpacket -> rsp_xbar_mux_004:sink12_startofpacket
	wire  [134:0] rsp_xbar_demux_014_src2_data;                                                                        // rsp_xbar_demux_014:src2_data -> rsp_xbar_mux_004:sink12_data
	wire   [33:0] rsp_xbar_demux_014_src2_channel;                                                                     // rsp_xbar_demux_014:src2_channel -> rsp_xbar_mux_004:sink12_channel
	wire          rsp_xbar_demux_014_src2_ready;                                                                       // rsp_xbar_mux_004:sink12_ready -> rsp_xbar_demux_014:src2_ready
	wire          rsp_xbar_demux_015_src0_endofpacket;                                                                 // rsp_xbar_demux_015:src0_endofpacket -> rsp_xbar_mux_002:sink15_endofpacket
	wire          rsp_xbar_demux_015_src0_valid;                                                                       // rsp_xbar_demux_015:src0_valid -> rsp_xbar_mux_002:sink15_valid
	wire          rsp_xbar_demux_015_src0_startofpacket;                                                               // rsp_xbar_demux_015:src0_startofpacket -> rsp_xbar_mux_002:sink15_startofpacket
	wire  [134:0] rsp_xbar_demux_015_src0_data;                                                                        // rsp_xbar_demux_015:src0_data -> rsp_xbar_mux_002:sink15_data
	wire   [33:0] rsp_xbar_demux_015_src0_channel;                                                                     // rsp_xbar_demux_015:src0_channel -> rsp_xbar_mux_002:sink15_channel
	wire          rsp_xbar_demux_015_src0_ready;                                                                       // rsp_xbar_mux_002:sink15_ready -> rsp_xbar_demux_015:src0_ready
	wire          rsp_xbar_demux_015_src1_endofpacket;                                                                 // rsp_xbar_demux_015:src1_endofpacket -> rsp_xbar_mux_003:sink13_endofpacket
	wire          rsp_xbar_demux_015_src1_valid;                                                                       // rsp_xbar_demux_015:src1_valid -> rsp_xbar_mux_003:sink13_valid
	wire          rsp_xbar_demux_015_src1_startofpacket;                                                               // rsp_xbar_demux_015:src1_startofpacket -> rsp_xbar_mux_003:sink13_startofpacket
	wire  [134:0] rsp_xbar_demux_015_src1_data;                                                                        // rsp_xbar_demux_015:src1_data -> rsp_xbar_mux_003:sink13_data
	wire   [33:0] rsp_xbar_demux_015_src1_channel;                                                                     // rsp_xbar_demux_015:src1_channel -> rsp_xbar_mux_003:sink13_channel
	wire          rsp_xbar_demux_015_src1_ready;                                                                       // rsp_xbar_mux_003:sink13_ready -> rsp_xbar_demux_015:src1_ready
	wire          rsp_xbar_demux_015_src2_endofpacket;                                                                 // rsp_xbar_demux_015:src2_endofpacket -> rsp_xbar_mux_004:sink13_endofpacket
	wire          rsp_xbar_demux_015_src2_valid;                                                                       // rsp_xbar_demux_015:src2_valid -> rsp_xbar_mux_004:sink13_valid
	wire          rsp_xbar_demux_015_src2_startofpacket;                                                               // rsp_xbar_demux_015:src2_startofpacket -> rsp_xbar_mux_004:sink13_startofpacket
	wire  [134:0] rsp_xbar_demux_015_src2_data;                                                                        // rsp_xbar_demux_015:src2_data -> rsp_xbar_mux_004:sink13_data
	wire   [33:0] rsp_xbar_demux_015_src2_channel;                                                                     // rsp_xbar_demux_015:src2_channel -> rsp_xbar_mux_004:sink13_channel
	wire          rsp_xbar_demux_015_src2_ready;                                                                       // rsp_xbar_mux_004:sink13_ready -> rsp_xbar_demux_015:src2_ready
	wire          rsp_xbar_demux_016_src0_endofpacket;                                                                 // rsp_xbar_demux_016:src0_endofpacket -> rsp_xbar_mux_002:sink16_endofpacket
	wire          rsp_xbar_demux_016_src0_valid;                                                                       // rsp_xbar_demux_016:src0_valid -> rsp_xbar_mux_002:sink16_valid
	wire          rsp_xbar_demux_016_src0_startofpacket;                                                               // rsp_xbar_demux_016:src0_startofpacket -> rsp_xbar_mux_002:sink16_startofpacket
	wire  [134:0] rsp_xbar_demux_016_src0_data;                                                                        // rsp_xbar_demux_016:src0_data -> rsp_xbar_mux_002:sink16_data
	wire   [33:0] rsp_xbar_demux_016_src0_channel;                                                                     // rsp_xbar_demux_016:src0_channel -> rsp_xbar_mux_002:sink16_channel
	wire          rsp_xbar_demux_016_src0_ready;                                                                       // rsp_xbar_mux_002:sink16_ready -> rsp_xbar_demux_016:src0_ready
	wire          rsp_xbar_demux_016_src1_endofpacket;                                                                 // rsp_xbar_demux_016:src1_endofpacket -> rsp_xbar_mux_003:sink14_endofpacket
	wire          rsp_xbar_demux_016_src1_valid;                                                                       // rsp_xbar_demux_016:src1_valid -> rsp_xbar_mux_003:sink14_valid
	wire          rsp_xbar_demux_016_src1_startofpacket;                                                               // rsp_xbar_demux_016:src1_startofpacket -> rsp_xbar_mux_003:sink14_startofpacket
	wire  [134:0] rsp_xbar_demux_016_src1_data;                                                                        // rsp_xbar_demux_016:src1_data -> rsp_xbar_mux_003:sink14_data
	wire   [33:0] rsp_xbar_demux_016_src1_channel;                                                                     // rsp_xbar_demux_016:src1_channel -> rsp_xbar_mux_003:sink14_channel
	wire          rsp_xbar_demux_016_src1_ready;                                                                       // rsp_xbar_mux_003:sink14_ready -> rsp_xbar_demux_016:src1_ready
	wire          rsp_xbar_demux_016_src2_endofpacket;                                                                 // rsp_xbar_demux_016:src2_endofpacket -> rsp_xbar_mux_004:sink14_endofpacket
	wire          rsp_xbar_demux_016_src2_valid;                                                                       // rsp_xbar_demux_016:src2_valid -> rsp_xbar_mux_004:sink14_valid
	wire          rsp_xbar_demux_016_src2_startofpacket;                                                               // rsp_xbar_demux_016:src2_startofpacket -> rsp_xbar_mux_004:sink14_startofpacket
	wire  [134:0] rsp_xbar_demux_016_src2_data;                                                                        // rsp_xbar_demux_016:src2_data -> rsp_xbar_mux_004:sink14_data
	wire   [33:0] rsp_xbar_demux_016_src2_channel;                                                                     // rsp_xbar_demux_016:src2_channel -> rsp_xbar_mux_004:sink14_channel
	wire          rsp_xbar_demux_016_src2_ready;                                                                       // rsp_xbar_mux_004:sink14_ready -> rsp_xbar_demux_016:src2_ready
	wire          rsp_xbar_demux_017_src0_endofpacket;                                                                 // rsp_xbar_demux_017:src0_endofpacket -> rsp_xbar_mux_002:sink17_endofpacket
	wire          rsp_xbar_demux_017_src0_valid;                                                                       // rsp_xbar_demux_017:src0_valid -> rsp_xbar_mux_002:sink17_valid
	wire          rsp_xbar_demux_017_src0_startofpacket;                                                               // rsp_xbar_demux_017:src0_startofpacket -> rsp_xbar_mux_002:sink17_startofpacket
	wire  [134:0] rsp_xbar_demux_017_src0_data;                                                                        // rsp_xbar_demux_017:src0_data -> rsp_xbar_mux_002:sink17_data
	wire   [33:0] rsp_xbar_demux_017_src0_channel;                                                                     // rsp_xbar_demux_017:src0_channel -> rsp_xbar_mux_002:sink17_channel
	wire          rsp_xbar_demux_017_src0_ready;                                                                       // rsp_xbar_mux_002:sink17_ready -> rsp_xbar_demux_017:src0_ready
	wire          rsp_xbar_demux_017_src1_endofpacket;                                                                 // rsp_xbar_demux_017:src1_endofpacket -> rsp_xbar_mux_003:sink15_endofpacket
	wire          rsp_xbar_demux_017_src1_valid;                                                                       // rsp_xbar_demux_017:src1_valid -> rsp_xbar_mux_003:sink15_valid
	wire          rsp_xbar_demux_017_src1_startofpacket;                                                               // rsp_xbar_demux_017:src1_startofpacket -> rsp_xbar_mux_003:sink15_startofpacket
	wire  [134:0] rsp_xbar_demux_017_src1_data;                                                                        // rsp_xbar_demux_017:src1_data -> rsp_xbar_mux_003:sink15_data
	wire   [33:0] rsp_xbar_demux_017_src1_channel;                                                                     // rsp_xbar_demux_017:src1_channel -> rsp_xbar_mux_003:sink15_channel
	wire          rsp_xbar_demux_017_src1_ready;                                                                       // rsp_xbar_mux_003:sink15_ready -> rsp_xbar_demux_017:src1_ready
	wire          rsp_xbar_demux_017_src2_endofpacket;                                                                 // rsp_xbar_demux_017:src2_endofpacket -> rsp_xbar_mux_004:sink15_endofpacket
	wire          rsp_xbar_demux_017_src2_valid;                                                                       // rsp_xbar_demux_017:src2_valid -> rsp_xbar_mux_004:sink15_valid
	wire          rsp_xbar_demux_017_src2_startofpacket;                                                               // rsp_xbar_demux_017:src2_startofpacket -> rsp_xbar_mux_004:sink15_startofpacket
	wire  [134:0] rsp_xbar_demux_017_src2_data;                                                                        // rsp_xbar_demux_017:src2_data -> rsp_xbar_mux_004:sink15_data
	wire   [33:0] rsp_xbar_demux_017_src2_channel;                                                                     // rsp_xbar_demux_017:src2_channel -> rsp_xbar_mux_004:sink15_channel
	wire          rsp_xbar_demux_017_src2_ready;                                                                       // rsp_xbar_mux_004:sink15_ready -> rsp_xbar_demux_017:src2_ready
	wire          rsp_xbar_demux_018_src0_endofpacket;                                                                 // rsp_xbar_demux_018:src0_endofpacket -> rsp_xbar_mux_002:sink18_endofpacket
	wire          rsp_xbar_demux_018_src0_valid;                                                                       // rsp_xbar_demux_018:src0_valid -> rsp_xbar_mux_002:sink18_valid
	wire          rsp_xbar_demux_018_src0_startofpacket;                                                               // rsp_xbar_demux_018:src0_startofpacket -> rsp_xbar_mux_002:sink18_startofpacket
	wire  [134:0] rsp_xbar_demux_018_src0_data;                                                                        // rsp_xbar_demux_018:src0_data -> rsp_xbar_mux_002:sink18_data
	wire   [33:0] rsp_xbar_demux_018_src0_channel;                                                                     // rsp_xbar_demux_018:src0_channel -> rsp_xbar_mux_002:sink18_channel
	wire          rsp_xbar_demux_018_src0_ready;                                                                       // rsp_xbar_mux_002:sink18_ready -> rsp_xbar_demux_018:src0_ready
	wire          rsp_xbar_demux_018_src1_endofpacket;                                                                 // rsp_xbar_demux_018:src1_endofpacket -> rsp_xbar_mux_003:sink16_endofpacket
	wire          rsp_xbar_demux_018_src1_valid;                                                                       // rsp_xbar_demux_018:src1_valid -> rsp_xbar_mux_003:sink16_valid
	wire          rsp_xbar_demux_018_src1_startofpacket;                                                               // rsp_xbar_demux_018:src1_startofpacket -> rsp_xbar_mux_003:sink16_startofpacket
	wire  [134:0] rsp_xbar_demux_018_src1_data;                                                                        // rsp_xbar_demux_018:src1_data -> rsp_xbar_mux_003:sink16_data
	wire   [33:0] rsp_xbar_demux_018_src1_channel;                                                                     // rsp_xbar_demux_018:src1_channel -> rsp_xbar_mux_003:sink16_channel
	wire          rsp_xbar_demux_018_src1_ready;                                                                       // rsp_xbar_mux_003:sink16_ready -> rsp_xbar_demux_018:src1_ready
	wire          rsp_xbar_demux_018_src2_endofpacket;                                                                 // rsp_xbar_demux_018:src2_endofpacket -> rsp_xbar_mux_004:sink16_endofpacket
	wire          rsp_xbar_demux_018_src2_valid;                                                                       // rsp_xbar_demux_018:src2_valid -> rsp_xbar_mux_004:sink16_valid
	wire          rsp_xbar_demux_018_src2_startofpacket;                                                               // rsp_xbar_demux_018:src2_startofpacket -> rsp_xbar_mux_004:sink16_startofpacket
	wire  [134:0] rsp_xbar_demux_018_src2_data;                                                                        // rsp_xbar_demux_018:src2_data -> rsp_xbar_mux_004:sink16_data
	wire   [33:0] rsp_xbar_demux_018_src2_channel;                                                                     // rsp_xbar_demux_018:src2_channel -> rsp_xbar_mux_004:sink16_channel
	wire          rsp_xbar_demux_018_src2_ready;                                                                       // rsp_xbar_mux_004:sink16_ready -> rsp_xbar_demux_018:src2_ready
	wire          rsp_xbar_demux_019_src0_endofpacket;                                                                 // rsp_xbar_demux_019:src0_endofpacket -> rsp_xbar_mux_002:sink19_endofpacket
	wire          rsp_xbar_demux_019_src0_valid;                                                                       // rsp_xbar_demux_019:src0_valid -> rsp_xbar_mux_002:sink19_valid
	wire          rsp_xbar_demux_019_src0_startofpacket;                                                               // rsp_xbar_demux_019:src0_startofpacket -> rsp_xbar_mux_002:sink19_startofpacket
	wire  [134:0] rsp_xbar_demux_019_src0_data;                                                                        // rsp_xbar_demux_019:src0_data -> rsp_xbar_mux_002:sink19_data
	wire   [33:0] rsp_xbar_demux_019_src0_channel;                                                                     // rsp_xbar_demux_019:src0_channel -> rsp_xbar_mux_002:sink19_channel
	wire          rsp_xbar_demux_019_src0_ready;                                                                       // rsp_xbar_mux_002:sink19_ready -> rsp_xbar_demux_019:src0_ready
	wire          rsp_xbar_demux_019_src1_endofpacket;                                                                 // rsp_xbar_demux_019:src1_endofpacket -> rsp_xbar_mux_003:sink17_endofpacket
	wire          rsp_xbar_demux_019_src1_valid;                                                                       // rsp_xbar_demux_019:src1_valid -> rsp_xbar_mux_003:sink17_valid
	wire          rsp_xbar_demux_019_src1_startofpacket;                                                               // rsp_xbar_demux_019:src1_startofpacket -> rsp_xbar_mux_003:sink17_startofpacket
	wire  [134:0] rsp_xbar_demux_019_src1_data;                                                                        // rsp_xbar_demux_019:src1_data -> rsp_xbar_mux_003:sink17_data
	wire   [33:0] rsp_xbar_demux_019_src1_channel;                                                                     // rsp_xbar_demux_019:src1_channel -> rsp_xbar_mux_003:sink17_channel
	wire          rsp_xbar_demux_019_src1_ready;                                                                       // rsp_xbar_mux_003:sink17_ready -> rsp_xbar_demux_019:src1_ready
	wire          rsp_xbar_demux_019_src2_endofpacket;                                                                 // rsp_xbar_demux_019:src2_endofpacket -> rsp_xbar_mux_004:sink17_endofpacket
	wire          rsp_xbar_demux_019_src2_valid;                                                                       // rsp_xbar_demux_019:src2_valid -> rsp_xbar_mux_004:sink17_valid
	wire          rsp_xbar_demux_019_src2_startofpacket;                                                               // rsp_xbar_demux_019:src2_startofpacket -> rsp_xbar_mux_004:sink17_startofpacket
	wire  [134:0] rsp_xbar_demux_019_src2_data;                                                                        // rsp_xbar_demux_019:src2_data -> rsp_xbar_mux_004:sink17_data
	wire   [33:0] rsp_xbar_demux_019_src2_channel;                                                                     // rsp_xbar_demux_019:src2_channel -> rsp_xbar_mux_004:sink17_channel
	wire          rsp_xbar_demux_019_src2_ready;                                                                       // rsp_xbar_mux_004:sink17_ready -> rsp_xbar_demux_019:src2_ready
	wire          rsp_xbar_demux_020_src0_endofpacket;                                                                 // rsp_xbar_demux_020:src0_endofpacket -> rsp_xbar_mux_002:sink20_endofpacket
	wire          rsp_xbar_demux_020_src0_valid;                                                                       // rsp_xbar_demux_020:src0_valid -> rsp_xbar_mux_002:sink20_valid
	wire          rsp_xbar_demux_020_src0_startofpacket;                                                               // rsp_xbar_demux_020:src0_startofpacket -> rsp_xbar_mux_002:sink20_startofpacket
	wire  [134:0] rsp_xbar_demux_020_src0_data;                                                                        // rsp_xbar_demux_020:src0_data -> rsp_xbar_mux_002:sink20_data
	wire   [33:0] rsp_xbar_demux_020_src0_channel;                                                                     // rsp_xbar_demux_020:src0_channel -> rsp_xbar_mux_002:sink20_channel
	wire          rsp_xbar_demux_020_src0_ready;                                                                       // rsp_xbar_mux_002:sink20_ready -> rsp_xbar_demux_020:src0_ready
	wire          rsp_xbar_demux_020_src1_endofpacket;                                                                 // rsp_xbar_demux_020:src1_endofpacket -> rsp_xbar_mux_003:sink18_endofpacket
	wire          rsp_xbar_demux_020_src1_valid;                                                                       // rsp_xbar_demux_020:src1_valid -> rsp_xbar_mux_003:sink18_valid
	wire          rsp_xbar_demux_020_src1_startofpacket;                                                               // rsp_xbar_demux_020:src1_startofpacket -> rsp_xbar_mux_003:sink18_startofpacket
	wire  [134:0] rsp_xbar_demux_020_src1_data;                                                                        // rsp_xbar_demux_020:src1_data -> rsp_xbar_mux_003:sink18_data
	wire   [33:0] rsp_xbar_demux_020_src1_channel;                                                                     // rsp_xbar_demux_020:src1_channel -> rsp_xbar_mux_003:sink18_channel
	wire          rsp_xbar_demux_020_src1_ready;                                                                       // rsp_xbar_mux_003:sink18_ready -> rsp_xbar_demux_020:src1_ready
	wire          rsp_xbar_demux_020_src2_endofpacket;                                                                 // rsp_xbar_demux_020:src2_endofpacket -> rsp_xbar_mux_004:sink18_endofpacket
	wire          rsp_xbar_demux_020_src2_valid;                                                                       // rsp_xbar_demux_020:src2_valid -> rsp_xbar_mux_004:sink18_valid
	wire          rsp_xbar_demux_020_src2_startofpacket;                                                               // rsp_xbar_demux_020:src2_startofpacket -> rsp_xbar_mux_004:sink18_startofpacket
	wire  [134:0] rsp_xbar_demux_020_src2_data;                                                                        // rsp_xbar_demux_020:src2_data -> rsp_xbar_mux_004:sink18_data
	wire   [33:0] rsp_xbar_demux_020_src2_channel;                                                                     // rsp_xbar_demux_020:src2_channel -> rsp_xbar_mux_004:sink18_channel
	wire          rsp_xbar_demux_020_src2_ready;                                                                       // rsp_xbar_mux_004:sink18_ready -> rsp_xbar_demux_020:src2_ready
	wire          rsp_xbar_demux_021_src0_endofpacket;                                                                 // rsp_xbar_demux_021:src0_endofpacket -> rsp_xbar_mux_002:sink21_endofpacket
	wire          rsp_xbar_demux_021_src0_valid;                                                                       // rsp_xbar_demux_021:src0_valid -> rsp_xbar_mux_002:sink21_valid
	wire          rsp_xbar_demux_021_src0_startofpacket;                                                               // rsp_xbar_demux_021:src0_startofpacket -> rsp_xbar_mux_002:sink21_startofpacket
	wire  [134:0] rsp_xbar_demux_021_src0_data;                                                                        // rsp_xbar_demux_021:src0_data -> rsp_xbar_mux_002:sink21_data
	wire   [33:0] rsp_xbar_demux_021_src0_channel;                                                                     // rsp_xbar_demux_021:src0_channel -> rsp_xbar_mux_002:sink21_channel
	wire          rsp_xbar_demux_021_src0_ready;                                                                       // rsp_xbar_mux_002:sink21_ready -> rsp_xbar_demux_021:src0_ready
	wire          rsp_xbar_demux_021_src1_endofpacket;                                                                 // rsp_xbar_demux_021:src1_endofpacket -> rsp_xbar_mux_003:sink19_endofpacket
	wire          rsp_xbar_demux_021_src1_valid;                                                                       // rsp_xbar_demux_021:src1_valid -> rsp_xbar_mux_003:sink19_valid
	wire          rsp_xbar_demux_021_src1_startofpacket;                                                               // rsp_xbar_demux_021:src1_startofpacket -> rsp_xbar_mux_003:sink19_startofpacket
	wire  [134:0] rsp_xbar_demux_021_src1_data;                                                                        // rsp_xbar_demux_021:src1_data -> rsp_xbar_mux_003:sink19_data
	wire   [33:0] rsp_xbar_demux_021_src1_channel;                                                                     // rsp_xbar_demux_021:src1_channel -> rsp_xbar_mux_003:sink19_channel
	wire          rsp_xbar_demux_021_src1_ready;                                                                       // rsp_xbar_mux_003:sink19_ready -> rsp_xbar_demux_021:src1_ready
	wire          rsp_xbar_demux_021_src2_endofpacket;                                                                 // rsp_xbar_demux_021:src2_endofpacket -> rsp_xbar_mux_004:sink19_endofpacket
	wire          rsp_xbar_demux_021_src2_valid;                                                                       // rsp_xbar_demux_021:src2_valid -> rsp_xbar_mux_004:sink19_valid
	wire          rsp_xbar_demux_021_src2_startofpacket;                                                               // rsp_xbar_demux_021:src2_startofpacket -> rsp_xbar_mux_004:sink19_startofpacket
	wire  [134:0] rsp_xbar_demux_021_src2_data;                                                                        // rsp_xbar_demux_021:src2_data -> rsp_xbar_mux_004:sink19_data
	wire   [33:0] rsp_xbar_demux_021_src2_channel;                                                                     // rsp_xbar_demux_021:src2_channel -> rsp_xbar_mux_004:sink19_channel
	wire          rsp_xbar_demux_021_src2_ready;                                                                       // rsp_xbar_mux_004:sink19_ready -> rsp_xbar_demux_021:src2_ready
	wire          rsp_xbar_demux_022_src0_endofpacket;                                                                 // rsp_xbar_demux_022:src0_endofpacket -> rsp_xbar_mux_002:sink22_endofpacket
	wire          rsp_xbar_demux_022_src0_valid;                                                                       // rsp_xbar_demux_022:src0_valid -> rsp_xbar_mux_002:sink22_valid
	wire          rsp_xbar_demux_022_src0_startofpacket;                                                               // rsp_xbar_demux_022:src0_startofpacket -> rsp_xbar_mux_002:sink22_startofpacket
	wire  [134:0] rsp_xbar_demux_022_src0_data;                                                                        // rsp_xbar_demux_022:src0_data -> rsp_xbar_mux_002:sink22_data
	wire   [33:0] rsp_xbar_demux_022_src0_channel;                                                                     // rsp_xbar_demux_022:src0_channel -> rsp_xbar_mux_002:sink22_channel
	wire          rsp_xbar_demux_022_src0_ready;                                                                       // rsp_xbar_mux_002:sink22_ready -> rsp_xbar_demux_022:src0_ready
	wire          rsp_xbar_demux_022_src1_endofpacket;                                                                 // rsp_xbar_demux_022:src1_endofpacket -> rsp_xbar_mux_003:sink20_endofpacket
	wire          rsp_xbar_demux_022_src1_valid;                                                                       // rsp_xbar_demux_022:src1_valid -> rsp_xbar_mux_003:sink20_valid
	wire          rsp_xbar_demux_022_src1_startofpacket;                                                               // rsp_xbar_demux_022:src1_startofpacket -> rsp_xbar_mux_003:sink20_startofpacket
	wire  [134:0] rsp_xbar_demux_022_src1_data;                                                                        // rsp_xbar_demux_022:src1_data -> rsp_xbar_mux_003:sink20_data
	wire   [33:0] rsp_xbar_demux_022_src1_channel;                                                                     // rsp_xbar_demux_022:src1_channel -> rsp_xbar_mux_003:sink20_channel
	wire          rsp_xbar_demux_022_src1_ready;                                                                       // rsp_xbar_mux_003:sink20_ready -> rsp_xbar_demux_022:src1_ready
	wire          rsp_xbar_demux_022_src2_endofpacket;                                                                 // rsp_xbar_demux_022:src2_endofpacket -> rsp_xbar_mux_004:sink20_endofpacket
	wire          rsp_xbar_demux_022_src2_valid;                                                                       // rsp_xbar_demux_022:src2_valid -> rsp_xbar_mux_004:sink20_valid
	wire          rsp_xbar_demux_022_src2_startofpacket;                                                               // rsp_xbar_demux_022:src2_startofpacket -> rsp_xbar_mux_004:sink20_startofpacket
	wire  [134:0] rsp_xbar_demux_022_src2_data;                                                                        // rsp_xbar_demux_022:src2_data -> rsp_xbar_mux_004:sink20_data
	wire   [33:0] rsp_xbar_demux_022_src2_channel;                                                                     // rsp_xbar_demux_022:src2_channel -> rsp_xbar_mux_004:sink20_channel
	wire          rsp_xbar_demux_022_src2_ready;                                                                       // rsp_xbar_mux_004:sink20_ready -> rsp_xbar_demux_022:src2_ready
	wire          rsp_xbar_demux_023_src0_endofpacket;                                                                 // rsp_xbar_demux_023:src0_endofpacket -> rsp_xbar_mux_002:sink23_endofpacket
	wire          rsp_xbar_demux_023_src0_valid;                                                                       // rsp_xbar_demux_023:src0_valid -> rsp_xbar_mux_002:sink23_valid
	wire          rsp_xbar_demux_023_src0_startofpacket;                                                               // rsp_xbar_demux_023:src0_startofpacket -> rsp_xbar_mux_002:sink23_startofpacket
	wire  [134:0] rsp_xbar_demux_023_src0_data;                                                                        // rsp_xbar_demux_023:src0_data -> rsp_xbar_mux_002:sink23_data
	wire   [33:0] rsp_xbar_demux_023_src0_channel;                                                                     // rsp_xbar_demux_023:src0_channel -> rsp_xbar_mux_002:sink23_channel
	wire          rsp_xbar_demux_023_src0_ready;                                                                       // rsp_xbar_mux_002:sink23_ready -> rsp_xbar_demux_023:src0_ready
	wire          rsp_xbar_demux_023_src1_endofpacket;                                                                 // rsp_xbar_demux_023:src1_endofpacket -> rsp_xbar_mux_003:sink21_endofpacket
	wire          rsp_xbar_demux_023_src1_valid;                                                                       // rsp_xbar_demux_023:src1_valid -> rsp_xbar_mux_003:sink21_valid
	wire          rsp_xbar_demux_023_src1_startofpacket;                                                               // rsp_xbar_demux_023:src1_startofpacket -> rsp_xbar_mux_003:sink21_startofpacket
	wire  [134:0] rsp_xbar_demux_023_src1_data;                                                                        // rsp_xbar_demux_023:src1_data -> rsp_xbar_mux_003:sink21_data
	wire   [33:0] rsp_xbar_demux_023_src1_channel;                                                                     // rsp_xbar_demux_023:src1_channel -> rsp_xbar_mux_003:sink21_channel
	wire          rsp_xbar_demux_023_src1_ready;                                                                       // rsp_xbar_mux_003:sink21_ready -> rsp_xbar_demux_023:src1_ready
	wire          rsp_xbar_demux_023_src2_endofpacket;                                                                 // rsp_xbar_demux_023:src2_endofpacket -> rsp_xbar_mux_004:sink21_endofpacket
	wire          rsp_xbar_demux_023_src2_valid;                                                                       // rsp_xbar_demux_023:src2_valid -> rsp_xbar_mux_004:sink21_valid
	wire          rsp_xbar_demux_023_src2_startofpacket;                                                               // rsp_xbar_demux_023:src2_startofpacket -> rsp_xbar_mux_004:sink21_startofpacket
	wire  [134:0] rsp_xbar_demux_023_src2_data;                                                                        // rsp_xbar_demux_023:src2_data -> rsp_xbar_mux_004:sink21_data
	wire   [33:0] rsp_xbar_demux_023_src2_channel;                                                                     // rsp_xbar_demux_023:src2_channel -> rsp_xbar_mux_004:sink21_channel
	wire          rsp_xbar_demux_023_src2_ready;                                                                       // rsp_xbar_mux_004:sink21_ready -> rsp_xbar_demux_023:src2_ready
	wire          rsp_xbar_demux_024_src0_endofpacket;                                                                 // rsp_xbar_demux_024:src0_endofpacket -> rsp_xbar_mux_002:sink24_endofpacket
	wire          rsp_xbar_demux_024_src0_valid;                                                                       // rsp_xbar_demux_024:src0_valid -> rsp_xbar_mux_002:sink24_valid
	wire          rsp_xbar_demux_024_src0_startofpacket;                                                               // rsp_xbar_demux_024:src0_startofpacket -> rsp_xbar_mux_002:sink24_startofpacket
	wire  [134:0] rsp_xbar_demux_024_src0_data;                                                                        // rsp_xbar_demux_024:src0_data -> rsp_xbar_mux_002:sink24_data
	wire   [33:0] rsp_xbar_demux_024_src0_channel;                                                                     // rsp_xbar_demux_024:src0_channel -> rsp_xbar_mux_002:sink24_channel
	wire          rsp_xbar_demux_024_src0_ready;                                                                       // rsp_xbar_mux_002:sink24_ready -> rsp_xbar_demux_024:src0_ready
	wire          rsp_xbar_demux_024_src1_endofpacket;                                                                 // rsp_xbar_demux_024:src1_endofpacket -> rsp_xbar_mux_003:sink22_endofpacket
	wire          rsp_xbar_demux_024_src1_valid;                                                                       // rsp_xbar_demux_024:src1_valid -> rsp_xbar_mux_003:sink22_valid
	wire          rsp_xbar_demux_024_src1_startofpacket;                                                               // rsp_xbar_demux_024:src1_startofpacket -> rsp_xbar_mux_003:sink22_startofpacket
	wire  [134:0] rsp_xbar_demux_024_src1_data;                                                                        // rsp_xbar_demux_024:src1_data -> rsp_xbar_mux_003:sink22_data
	wire   [33:0] rsp_xbar_demux_024_src1_channel;                                                                     // rsp_xbar_demux_024:src1_channel -> rsp_xbar_mux_003:sink22_channel
	wire          rsp_xbar_demux_024_src1_ready;                                                                       // rsp_xbar_mux_003:sink22_ready -> rsp_xbar_demux_024:src1_ready
	wire          rsp_xbar_demux_024_src2_endofpacket;                                                                 // rsp_xbar_demux_024:src2_endofpacket -> rsp_xbar_mux_004:sink22_endofpacket
	wire          rsp_xbar_demux_024_src2_valid;                                                                       // rsp_xbar_demux_024:src2_valid -> rsp_xbar_mux_004:sink22_valid
	wire          rsp_xbar_demux_024_src2_startofpacket;                                                               // rsp_xbar_demux_024:src2_startofpacket -> rsp_xbar_mux_004:sink22_startofpacket
	wire  [134:0] rsp_xbar_demux_024_src2_data;                                                                        // rsp_xbar_demux_024:src2_data -> rsp_xbar_mux_004:sink22_data
	wire   [33:0] rsp_xbar_demux_024_src2_channel;                                                                     // rsp_xbar_demux_024:src2_channel -> rsp_xbar_mux_004:sink22_channel
	wire          rsp_xbar_demux_024_src2_ready;                                                                       // rsp_xbar_mux_004:sink22_ready -> rsp_xbar_demux_024:src2_ready
	wire          rsp_xbar_demux_025_src0_endofpacket;                                                                 // rsp_xbar_demux_025:src0_endofpacket -> rsp_xbar_mux_002:sink25_endofpacket
	wire          rsp_xbar_demux_025_src0_valid;                                                                       // rsp_xbar_demux_025:src0_valid -> rsp_xbar_mux_002:sink25_valid
	wire          rsp_xbar_demux_025_src0_startofpacket;                                                               // rsp_xbar_demux_025:src0_startofpacket -> rsp_xbar_mux_002:sink25_startofpacket
	wire  [134:0] rsp_xbar_demux_025_src0_data;                                                                        // rsp_xbar_demux_025:src0_data -> rsp_xbar_mux_002:sink25_data
	wire   [33:0] rsp_xbar_demux_025_src0_channel;                                                                     // rsp_xbar_demux_025:src0_channel -> rsp_xbar_mux_002:sink25_channel
	wire          rsp_xbar_demux_025_src0_ready;                                                                       // rsp_xbar_mux_002:sink25_ready -> rsp_xbar_demux_025:src0_ready
	wire          rsp_xbar_demux_025_src1_endofpacket;                                                                 // rsp_xbar_demux_025:src1_endofpacket -> rsp_xbar_mux_003:sink23_endofpacket
	wire          rsp_xbar_demux_025_src1_valid;                                                                       // rsp_xbar_demux_025:src1_valid -> rsp_xbar_mux_003:sink23_valid
	wire          rsp_xbar_demux_025_src1_startofpacket;                                                               // rsp_xbar_demux_025:src1_startofpacket -> rsp_xbar_mux_003:sink23_startofpacket
	wire  [134:0] rsp_xbar_demux_025_src1_data;                                                                        // rsp_xbar_demux_025:src1_data -> rsp_xbar_mux_003:sink23_data
	wire   [33:0] rsp_xbar_demux_025_src1_channel;                                                                     // rsp_xbar_demux_025:src1_channel -> rsp_xbar_mux_003:sink23_channel
	wire          rsp_xbar_demux_025_src1_ready;                                                                       // rsp_xbar_mux_003:sink23_ready -> rsp_xbar_demux_025:src1_ready
	wire          rsp_xbar_demux_025_src2_endofpacket;                                                                 // rsp_xbar_demux_025:src2_endofpacket -> rsp_xbar_mux_004:sink23_endofpacket
	wire          rsp_xbar_demux_025_src2_valid;                                                                       // rsp_xbar_demux_025:src2_valid -> rsp_xbar_mux_004:sink23_valid
	wire          rsp_xbar_demux_025_src2_startofpacket;                                                               // rsp_xbar_demux_025:src2_startofpacket -> rsp_xbar_mux_004:sink23_startofpacket
	wire  [134:0] rsp_xbar_demux_025_src2_data;                                                                        // rsp_xbar_demux_025:src2_data -> rsp_xbar_mux_004:sink23_data
	wire   [33:0] rsp_xbar_demux_025_src2_channel;                                                                     // rsp_xbar_demux_025:src2_channel -> rsp_xbar_mux_004:sink23_channel
	wire          rsp_xbar_demux_025_src2_ready;                                                                       // rsp_xbar_mux_004:sink23_ready -> rsp_xbar_demux_025:src2_ready
	wire          rsp_xbar_demux_026_src0_endofpacket;                                                                 // rsp_xbar_demux_026:src0_endofpacket -> rsp_xbar_mux_002:sink26_endofpacket
	wire          rsp_xbar_demux_026_src0_valid;                                                                       // rsp_xbar_demux_026:src0_valid -> rsp_xbar_mux_002:sink26_valid
	wire          rsp_xbar_demux_026_src0_startofpacket;                                                               // rsp_xbar_demux_026:src0_startofpacket -> rsp_xbar_mux_002:sink26_startofpacket
	wire  [134:0] rsp_xbar_demux_026_src0_data;                                                                        // rsp_xbar_demux_026:src0_data -> rsp_xbar_mux_002:sink26_data
	wire   [33:0] rsp_xbar_demux_026_src0_channel;                                                                     // rsp_xbar_demux_026:src0_channel -> rsp_xbar_mux_002:sink26_channel
	wire          rsp_xbar_demux_026_src0_ready;                                                                       // rsp_xbar_mux_002:sink26_ready -> rsp_xbar_demux_026:src0_ready
	wire          rsp_xbar_demux_026_src1_endofpacket;                                                                 // rsp_xbar_demux_026:src1_endofpacket -> rsp_xbar_mux_003:sink24_endofpacket
	wire          rsp_xbar_demux_026_src1_valid;                                                                       // rsp_xbar_demux_026:src1_valid -> rsp_xbar_mux_003:sink24_valid
	wire          rsp_xbar_demux_026_src1_startofpacket;                                                               // rsp_xbar_demux_026:src1_startofpacket -> rsp_xbar_mux_003:sink24_startofpacket
	wire  [134:0] rsp_xbar_demux_026_src1_data;                                                                        // rsp_xbar_demux_026:src1_data -> rsp_xbar_mux_003:sink24_data
	wire   [33:0] rsp_xbar_demux_026_src1_channel;                                                                     // rsp_xbar_demux_026:src1_channel -> rsp_xbar_mux_003:sink24_channel
	wire          rsp_xbar_demux_026_src1_ready;                                                                       // rsp_xbar_mux_003:sink24_ready -> rsp_xbar_demux_026:src1_ready
	wire          rsp_xbar_demux_026_src2_endofpacket;                                                                 // rsp_xbar_demux_026:src2_endofpacket -> rsp_xbar_mux_004:sink24_endofpacket
	wire          rsp_xbar_demux_026_src2_valid;                                                                       // rsp_xbar_demux_026:src2_valid -> rsp_xbar_mux_004:sink24_valid
	wire          rsp_xbar_demux_026_src2_startofpacket;                                                               // rsp_xbar_demux_026:src2_startofpacket -> rsp_xbar_mux_004:sink24_startofpacket
	wire  [134:0] rsp_xbar_demux_026_src2_data;                                                                        // rsp_xbar_demux_026:src2_data -> rsp_xbar_mux_004:sink24_data
	wire   [33:0] rsp_xbar_demux_026_src2_channel;                                                                     // rsp_xbar_demux_026:src2_channel -> rsp_xbar_mux_004:sink24_channel
	wire          rsp_xbar_demux_026_src2_ready;                                                                       // rsp_xbar_mux_004:sink24_ready -> rsp_xbar_demux_026:src2_ready
	wire          rsp_xbar_demux_027_src0_endofpacket;                                                                 // rsp_xbar_demux_027:src0_endofpacket -> rsp_xbar_mux_002:sink27_endofpacket
	wire          rsp_xbar_demux_027_src0_valid;                                                                       // rsp_xbar_demux_027:src0_valid -> rsp_xbar_mux_002:sink27_valid
	wire          rsp_xbar_demux_027_src0_startofpacket;                                                               // rsp_xbar_demux_027:src0_startofpacket -> rsp_xbar_mux_002:sink27_startofpacket
	wire  [134:0] rsp_xbar_demux_027_src0_data;                                                                        // rsp_xbar_demux_027:src0_data -> rsp_xbar_mux_002:sink27_data
	wire   [33:0] rsp_xbar_demux_027_src0_channel;                                                                     // rsp_xbar_demux_027:src0_channel -> rsp_xbar_mux_002:sink27_channel
	wire          rsp_xbar_demux_027_src0_ready;                                                                       // rsp_xbar_mux_002:sink27_ready -> rsp_xbar_demux_027:src0_ready
	wire          rsp_xbar_demux_027_src1_endofpacket;                                                                 // rsp_xbar_demux_027:src1_endofpacket -> rsp_xbar_mux_003:sink25_endofpacket
	wire          rsp_xbar_demux_027_src1_valid;                                                                       // rsp_xbar_demux_027:src1_valid -> rsp_xbar_mux_003:sink25_valid
	wire          rsp_xbar_demux_027_src1_startofpacket;                                                               // rsp_xbar_demux_027:src1_startofpacket -> rsp_xbar_mux_003:sink25_startofpacket
	wire  [134:0] rsp_xbar_demux_027_src1_data;                                                                        // rsp_xbar_demux_027:src1_data -> rsp_xbar_mux_003:sink25_data
	wire   [33:0] rsp_xbar_demux_027_src1_channel;                                                                     // rsp_xbar_demux_027:src1_channel -> rsp_xbar_mux_003:sink25_channel
	wire          rsp_xbar_demux_027_src1_ready;                                                                       // rsp_xbar_mux_003:sink25_ready -> rsp_xbar_demux_027:src1_ready
	wire          rsp_xbar_demux_027_src2_endofpacket;                                                                 // rsp_xbar_demux_027:src2_endofpacket -> rsp_xbar_mux_004:sink25_endofpacket
	wire          rsp_xbar_demux_027_src2_valid;                                                                       // rsp_xbar_demux_027:src2_valid -> rsp_xbar_mux_004:sink25_valid
	wire          rsp_xbar_demux_027_src2_startofpacket;                                                               // rsp_xbar_demux_027:src2_startofpacket -> rsp_xbar_mux_004:sink25_startofpacket
	wire  [134:0] rsp_xbar_demux_027_src2_data;                                                                        // rsp_xbar_demux_027:src2_data -> rsp_xbar_mux_004:sink25_data
	wire   [33:0] rsp_xbar_demux_027_src2_channel;                                                                     // rsp_xbar_demux_027:src2_channel -> rsp_xbar_mux_004:sink25_channel
	wire          rsp_xbar_demux_027_src2_ready;                                                                       // rsp_xbar_mux_004:sink25_ready -> rsp_xbar_demux_027:src2_ready
	wire          rsp_xbar_demux_028_src0_endofpacket;                                                                 // rsp_xbar_demux_028:src0_endofpacket -> rsp_xbar_mux_002:sink28_endofpacket
	wire          rsp_xbar_demux_028_src0_valid;                                                                       // rsp_xbar_demux_028:src0_valid -> rsp_xbar_mux_002:sink28_valid
	wire          rsp_xbar_demux_028_src0_startofpacket;                                                               // rsp_xbar_demux_028:src0_startofpacket -> rsp_xbar_mux_002:sink28_startofpacket
	wire  [134:0] rsp_xbar_demux_028_src0_data;                                                                        // rsp_xbar_demux_028:src0_data -> rsp_xbar_mux_002:sink28_data
	wire   [33:0] rsp_xbar_demux_028_src0_channel;                                                                     // rsp_xbar_demux_028:src0_channel -> rsp_xbar_mux_002:sink28_channel
	wire          rsp_xbar_demux_028_src0_ready;                                                                       // rsp_xbar_mux_002:sink28_ready -> rsp_xbar_demux_028:src0_ready
	wire          rsp_xbar_demux_028_src1_endofpacket;                                                                 // rsp_xbar_demux_028:src1_endofpacket -> rsp_xbar_mux_003:sink26_endofpacket
	wire          rsp_xbar_demux_028_src1_valid;                                                                       // rsp_xbar_demux_028:src1_valid -> rsp_xbar_mux_003:sink26_valid
	wire          rsp_xbar_demux_028_src1_startofpacket;                                                               // rsp_xbar_demux_028:src1_startofpacket -> rsp_xbar_mux_003:sink26_startofpacket
	wire  [134:0] rsp_xbar_demux_028_src1_data;                                                                        // rsp_xbar_demux_028:src1_data -> rsp_xbar_mux_003:sink26_data
	wire   [33:0] rsp_xbar_demux_028_src1_channel;                                                                     // rsp_xbar_demux_028:src1_channel -> rsp_xbar_mux_003:sink26_channel
	wire          rsp_xbar_demux_028_src1_ready;                                                                       // rsp_xbar_mux_003:sink26_ready -> rsp_xbar_demux_028:src1_ready
	wire          rsp_xbar_demux_028_src2_endofpacket;                                                                 // rsp_xbar_demux_028:src2_endofpacket -> rsp_xbar_mux_004:sink26_endofpacket
	wire          rsp_xbar_demux_028_src2_valid;                                                                       // rsp_xbar_demux_028:src2_valid -> rsp_xbar_mux_004:sink26_valid
	wire          rsp_xbar_demux_028_src2_startofpacket;                                                               // rsp_xbar_demux_028:src2_startofpacket -> rsp_xbar_mux_004:sink26_startofpacket
	wire  [134:0] rsp_xbar_demux_028_src2_data;                                                                        // rsp_xbar_demux_028:src2_data -> rsp_xbar_mux_004:sink26_data
	wire   [33:0] rsp_xbar_demux_028_src2_channel;                                                                     // rsp_xbar_demux_028:src2_channel -> rsp_xbar_mux_004:sink26_channel
	wire          rsp_xbar_demux_028_src2_ready;                                                                       // rsp_xbar_mux_004:sink26_ready -> rsp_xbar_demux_028:src2_ready
	wire          rsp_xbar_demux_029_src0_endofpacket;                                                                 // rsp_xbar_demux_029:src0_endofpacket -> rsp_xbar_mux_002:sink29_endofpacket
	wire          rsp_xbar_demux_029_src0_valid;                                                                       // rsp_xbar_demux_029:src0_valid -> rsp_xbar_mux_002:sink29_valid
	wire          rsp_xbar_demux_029_src0_startofpacket;                                                               // rsp_xbar_demux_029:src0_startofpacket -> rsp_xbar_mux_002:sink29_startofpacket
	wire  [134:0] rsp_xbar_demux_029_src0_data;                                                                        // rsp_xbar_demux_029:src0_data -> rsp_xbar_mux_002:sink29_data
	wire   [33:0] rsp_xbar_demux_029_src0_channel;                                                                     // rsp_xbar_demux_029:src0_channel -> rsp_xbar_mux_002:sink29_channel
	wire          rsp_xbar_demux_029_src0_ready;                                                                       // rsp_xbar_mux_002:sink29_ready -> rsp_xbar_demux_029:src0_ready
	wire          rsp_xbar_demux_029_src1_endofpacket;                                                                 // rsp_xbar_demux_029:src1_endofpacket -> rsp_xbar_mux_003:sink27_endofpacket
	wire          rsp_xbar_demux_029_src1_valid;                                                                       // rsp_xbar_demux_029:src1_valid -> rsp_xbar_mux_003:sink27_valid
	wire          rsp_xbar_demux_029_src1_startofpacket;                                                               // rsp_xbar_demux_029:src1_startofpacket -> rsp_xbar_mux_003:sink27_startofpacket
	wire  [134:0] rsp_xbar_demux_029_src1_data;                                                                        // rsp_xbar_demux_029:src1_data -> rsp_xbar_mux_003:sink27_data
	wire   [33:0] rsp_xbar_demux_029_src1_channel;                                                                     // rsp_xbar_demux_029:src1_channel -> rsp_xbar_mux_003:sink27_channel
	wire          rsp_xbar_demux_029_src1_ready;                                                                       // rsp_xbar_mux_003:sink27_ready -> rsp_xbar_demux_029:src1_ready
	wire          rsp_xbar_demux_029_src2_endofpacket;                                                                 // rsp_xbar_demux_029:src2_endofpacket -> rsp_xbar_mux_004:sink27_endofpacket
	wire          rsp_xbar_demux_029_src2_valid;                                                                       // rsp_xbar_demux_029:src2_valid -> rsp_xbar_mux_004:sink27_valid
	wire          rsp_xbar_demux_029_src2_startofpacket;                                                               // rsp_xbar_demux_029:src2_startofpacket -> rsp_xbar_mux_004:sink27_startofpacket
	wire  [134:0] rsp_xbar_demux_029_src2_data;                                                                        // rsp_xbar_demux_029:src2_data -> rsp_xbar_mux_004:sink27_data
	wire   [33:0] rsp_xbar_demux_029_src2_channel;                                                                     // rsp_xbar_demux_029:src2_channel -> rsp_xbar_mux_004:sink27_channel
	wire          rsp_xbar_demux_029_src2_ready;                                                                       // rsp_xbar_mux_004:sink27_ready -> rsp_xbar_demux_029:src2_ready
	wire          rsp_xbar_demux_030_src0_endofpacket;                                                                 // rsp_xbar_demux_030:src0_endofpacket -> rsp_xbar_mux_002:sink30_endofpacket
	wire          rsp_xbar_demux_030_src0_valid;                                                                       // rsp_xbar_demux_030:src0_valid -> rsp_xbar_mux_002:sink30_valid
	wire          rsp_xbar_demux_030_src0_startofpacket;                                                               // rsp_xbar_demux_030:src0_startofpacket -> rsp_xbar_mux_002:sink30_startofpacket
	wire  [134:0] rsp_xbar_demux_030_src0_data;                                                                        // rsp_xbar_demux_030:src0_data -> rsp_xbar_mux_002:sink30_data
	wire   [33:0] rsp_xbar_demux_030_src0_channel;                                                                     // rsp_xbar_demux_030:src0_channel -> rsp_xbar_mux_002:sink30_channel
	wire          rsp_xbar_demux_030_src0_ready;                                                                       // rsp_xbar_mux_002:sink30_ready -> rsp_xbar_demux_030:src0_ready
	wire          rsp_xbar_demux_030_src1_endofpacket;                                                                 // rsp_xbar_demux_030:src1_endofpacket -> rsp_xbar_mux_003:sink28_endofpacket
	wire          rsp_xbar_demux_030_src1_valid;                                                                       // rsp_xbar_demux_030:src1_valid -> rsp_xbar_mux_003:sink28_valid
	wire          rsp_xbar_demux_030_src1_startofpacket;                                                               // rsp_xbar_demux_030:src1_startofpacket -> rsp_xbar_mux_003:sink28_startofpacket
	wire  [134:0] rsp_xbar_demux_030_src1_data;                                                                        // rsp_xbar_demux_030:src1_data -> rsp_xbar_mux_003:sink28_data
	wire   [33:0] rsp_xbar_demux_030_src1_channel;                                                                     // rsp_xbar_demux_030:src1_channel -> rsp_xbar_mux_003:sink28_channel
	wire          rsp_xbar_demux_030_src1_ready;                                                                       // rsp_xbar_mux_003:sink28_ready -> rsp_xbar_demux_030:src1_ready
	wire          rsp_xbar_demux_030_src2_endofpacket;                                                                 // rsp_xbar_demux_030:src2_endofpacket -> rsp_xbar_mux_004:sink28_endofpacket
	wire          rsp_xbar_demux_030_src2_valid;                                                                       // rsp_xbar_demux_030:src2_valid -> rsp_xbar_mux_004:sink28_valid
	wire          rsp_xbar_demux_030_src2_startofpacket;                                                               // rsp_xbar_demux_030:src2_startofpacket -> rsp_xbar_mux_004:sink28_startofpacket
	wire  [134:0] rsp_xbar_demux_030_src2_data;                                                                        // rsp_xbar_demux_030:src2_data -> rsp_xbar_mux_004:sink28_data
	wire   [33:0] rsp_xbar_demux_030_src2_channel;                                                                     // rsp_xbar_demux_030:src2_channel -> rsp_xbar_mux_004:sink28_channel
	wire          rsp_xbar_demux_030_src2_ready;                                                                       // rsp_xbar_mux_004:sink28_ready -> rsp_xbar_demux_030:src2_ready
	wire          rsp_xbar_demux_031_src0_endofpacket;                                                                 // rsp_xbar_demux_031:src0_endofpacket -> rsp_xbar_mux_002:sink31_endofpacket
	wire          rsp_xbar_demux_031_src0_valid;                                                                       // rsp_xbar_demux_031:src0_valid -> rsp_xbar_mux_002:sink31_valid
	wire          rsp_xbar_demux_031_src0_startofpacket;                                                               // rsp_xbar_demux_031:src0_startofpacket -> rsp_xbar_mux_002:sink31_startofpacket
	wire  [134:0] rsp_xbar_demux_031_src0_data;                                                                        // rsp_xbar_demux_031:src0_data -> rsp_xbar_mux_002:sink31_data
	wire   [33:0] rsp_xbar_demux_031_src0_channel;                                                                     // rsp_xbar_demux_031:src0_channel -> rsp_xbar_mux_002:sink31_channel
	wire          rsp_xbar_demux_031_src0_ready;                                                                       // rsp_xbar_mux_002:sink31_ready -> rsp_xbar_demux_031:src0_ready
	wire          rsp_xbar_demux_031_src1_endofpacket;                                                                 // rsp_xbar_demux_031:src1_endofpacket -> rsp_xbar_mux_003:sink29_endofpacket
	wire          rsp_xbar_demux_031_src1_valid;                                                                       // rsp_xbar_demux_031:src1_valid -> rsp_xbar_mux_003:sink29_valid
	wire          rsp_xbar_demux_031_src1_startofpacket;                                                               // rsp_xbar_demux_031:src1_startofpacket -> rsp_xbar_mux_003:sink29_startofpacket
	wire  [134:0] rsp_xbar_demux_031_src1_data;                                                                        // rsp_xbar_demux_031:src1_data -> rsp_xbar_mux_003:sink29_data
	wire   [33:0] rsp_xbar_demux_031_src1_channel;                                                                     // rsp_xbar_demux_031:src1_channel -> rsp_xbar_mux_003:sink29_channel
	wire          rsp_xbar_demux_031_src1_ready;                                                                       // rsp_xbar_mux_003:sink29_ready -> rsp_xbar_demux_031:src1_ready
	wire          rsp_xbar_demux_031_src2_endofpacket;                                                                 // rsp_xbar_demux_031:src2_endofpacket -> rsp_xbar_mux_004:sink29_endofpacket
	wire          rsp_xbar_demux_031_src2_valid;                                                                       // rsp_xbar_demux_031:src2_valid -> rsp_xbar_mux_004:sink29_valid
	wire          rsp_xbar_demux_031_src2_startofpacket;                                                               // rsp_xbar_demux_031:src2_startofpacket -> rsp_xbar_mux_004:sink29_startofpacket
	wire  [134:0] rsp_xbar_demux_031_src2_data;                                                                        // rsp_xbar_demux_031:src2_data -> rsp_xbar_mux_004:sink29_data
	wire   [33:0] rsp_xbar_demux_031_src2_channel;                                                                     // rsp_xbar_demux_031:src2_channel -> rsp_xbar_mux_004:sink29_channel
	wire          rsp_xbar_demux_031_src2_ready;                                                                       // rsp_xbar_mux_004:sink29_ready -> rsp_xbar_demux_031:src2_ready
	wire          rsp_xbar_demux_032_src0_endofpacket;                                                                 // rsp_xbar_demux_032:src0_endofpacket -> rsp_xbar_mux_002:sink32_endofpacket
	wire          rsp_xbar_demux_032_src0_valid;                                                                       // rsp_xbar_demux_032:src0_valid -> rsp_xbar_mux_002:sink32_valid
	wire          rsp_xbar_demux_032_src0_startofpacket;                                                               // rsp_xbar_demux_032:src0_startofpacket -> rsp_xbar_mux_002:sink32_startofpacket
	wire  [134:0] rsp_xbar_demux_032_src0_data;                                                                        // rsp_xbar_demux_032:src0_data -> rsp_xbar_mux_002:sink32_data
	wire   [33:0] rsp_xbar_demux_032_src0_channel;                                                                     // rsp_xbar_demux_032:src0_channel -> rsp_xbar_mux_002:sink32_channel
	wire          rsp_xbar_demux_032_src0_ready;                                                                       // rsp_xbar_mux_002:sink32_ready -> rsp_xbar_demux_032:src0_ready
	wire          rsp_xbar_demux_032_src1_endofpacket;                                                                 // rsp_xbar_demux_032:src1_endofpacket -> rsp_xbar_mux_003:sink30_endofpacket
	wire          rsp_xbar_demux_032_src1_valid;                                                                       // rsp_xbar_demux_032:src1_valid -> rsp_xbar_mux_003:sink30_valid
	wire          rsp_xbar_demux_032_src1_startofpacket;                                                               // rsp_xbar_demux_032:src1_startofpacket -> rsp_xbar_mux_003:sink30_startofpacket
	wire  [134:0] rsp_xbar_demux_032_src1_data;                                                                        // rsp_xbar_demux_032:src1_data -> rsp_xbar_mux_003:sink30_data
	wire   [33:0] rsp_xbar_demux_032_src1_channel;                                                                     // rsp_xbar_demux_032:src1_channel -> rsp_xbar_mux_003:sink30_channel
	wire          rsp_xbar_demux_032_src1_ready;                                                                       // rsp_xbar_mux_003:sink30_ready -> rsp_xbar_demux_032:src1_ready
	wire          rsp_xbar_demux_032_src2_endofpacket;                                                                 // rsp_xbar_demux_032:src2_endofpacket -> rsp_xbar_mux_004:sink30_endofpacket
	wire          rsp_xbar_demux_032_src2_valid;                                                                       // rsp_xbar_demux_032:src2_valid -> rsp_xbar_mux_004:sink30_valid
	wire          rsp_xbar_demux_032_src2_startofpacket;                                                               // rsp_xbar_demux_032:src2_startofpacket -> rsp_xbar_mux_004:sink30_startofpacket
	wire  [134:0] rsp_xbar_demux_032_src2_data;                                                                        // rsp_xbar_demux_032:src2_data -> rsp_xbar_mux_004:sink30_data
	wire   [33:0] rsp_xbar_demux_032_src2_channel;                                                                     // rsp_xbar_demux_032:src2_channel -> rsp_xbar_mux_004:sink30_channel
	wire          rsp_xbar_demux_032_src2_ready;                                                                       // rsp_xbar_mux_004:sink30_ready -> rsp_xbar_demux_032:src2_ready
	wire          rsp_xbar_demux_033_src0_endofpacket;                                                                 // rsp_xbar_demux_033:src0_endofpacket -> rsp_xbar_mux_002:sink33_endofpacket
	wire          rsp_xbar_demux_033_src0_valid;                                                                       // rsp_xbar_demux_033:src0_valid -> rsp_xbar_mux_002:sink33_valid
	wire          rsp_xbar_demux_033_src0_startofpacket;                                                               // rsp_xbar_demux_033:src0_startofpacket -> rsp_xbar_mux_002:sink33_startofpacket
	wire  [134:0] rsp_xbar_demux_033_src0_data;                                                                        // rsp_xbar_demux_033:src0_data -> rsp_xbar_mux_002:sink33_data
	wire   [33:0] rsp_xbar_demux_033_src0_channel;                                                                     // rsp_xbar_demux_033:src0_channel -> rsp_xbar_mux_002:sink33_channel
	wire          rsp_xbar_demux_033_src0_ready;                                                                       // rsp_xbar_mux_002:sink33_ready -> rsp_xbar_demux_033:src0_ready
	wire          rsp_xbar_demux_033_src1_endofpacket;                                                                 // rsp_xbar_demux_033:src1_endofpacket -> rsp_xbar_mux_003:sink31_endofpacket
	wire          rsp_xbar_demux_033_src1_valid;                                                                       // rsp_xbar_demux_033:src1_valid -> rsp_xbar_mux_003:sink31_valid
	wire          rsp_xbar_demux_033_src1_startofpacket;                                                               // rsp_xbar_demux_033:src1_startofpacket -> rsp_xbar_mux_003:sink31_startofpacket
	wire  [134:0] rsp_xbar_demux_033_src1_data;                                                                        // rsp_xbar_demux_033:src1_data -> rsp_xbar_mux_003:sink31_data
	wire   [33:0] rsp_xbar_demux_033_src1_channel;                                                                     // rsp_xbar_demux_033:src1_channel -> rsp_xbar_mux_003:sink31_channel
	wire          rsp_xbar_demux_033_src1_ready;                                                                       // rsp_xbar_mux_003:sink31_ready -> rsp_xbar_demux_033:src1_ready
	wire          rsp_xbar_demux_033_src2_endofpacket;                                                                 // rsp_xbar_demux_033:src2_endofpacket -> rsp_xbar_mux_004:sink31_endofpacket
	wire          rsp_xbar_demux_033_src2_valid;                                                                       // rsp_xbar_demux_033:src2_valid -> rsp_xbar_mux_004:sink31_valid
	wire          rsp_xbar_demux_033_src2_startofpacket;                                                               // rsp_xbar_demux_033:src2_startofpacket -> rsp_xbar_mux_004:sink31_startofpacket
	wire  [134:0] rsp_xbar_demux_033_src2_data;                                                                        // rsp_xbar_demux_033:src2_data -> rsp_xbar_mux_004:sink31_data
	wire   [33:0] rsp_xbar_demux_033_src2_channel;                                                                     // rsp_xbar_demux_033:src2_channel -> rsp_xbar_mux_004:sink31_channel
	wire          rsp_xbar_demux_033_src2_ready;                                                                       // rsp_xbar_mux_004:sink31_ready -> rsp_xbar_demux_033:src2_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                                 // cmd_xbar_demux_002:src0_endofpacket -> width_adapter:in_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                       // cmd_xbar_demux_002:src0_valid -> width_adapter:in_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                               // cmd_xbar_demux_002:src0_startofpacket -> width_adapter:in_startofpacket
	wire  [134:0] cmd_xbar_demux_002_src0_data;                                                                        // cmd_xbar_demux_002:src0_data -> width_adapter:in_data
	wire   [33:0] cmd_xbar_demux_002_src0_channel;                                                                     // cmd_xbar_demux_002:src0_channel -> width_adapter:in_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                       // width_adapter:in_ready -> cmd_xbar_demux_002:src0_ready
	wire          width_adapter_src_endofpacket;                                                                       // width_adapter:out_endofpacket -> cmd_xbar_mux:sink2_endofpacket
	wire          width_adapter_src_valid;                                                                             // width_adapter:out_valid -> cmd_xbar_mux:sink2_valid
	wire          width_adapter_src_startofpacket;                                                                     // width_adapter:out_startofpacket -> cmd_xbar_mux:sink2_startofpacket
	wire  [170:0] width_adapter_src_data;                                                                              // width_adapter:out_data -> cmd_xbar_mux:sink2_data
	wire          width_adapter_src_ready;                                                                             // cmd_xbar_mux:sink2_ready -> width_adapter:out_ready
	wire   [33:0] width_adapter_src_channel;                                                                           // width_adapter:out_channel -> cmd_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_src2_endofpacket;                                                                     // rsp_xbar_demux:src2_endofpacket -> width_adapter_001:in_endofpacket
	wire          rsp_xbar_demux_src2_valid;                                                                           // rsp_xbar_demux:src2_valid -> width_adapter_001:in_valid
	wire          rsp_xbar_demux_src2_startofpacket;                                                                   // rsp_xbar_demux:src2_startofpacket -> width_adapter_001:in_startofpacket
	wire  [170:0] rsp_xbar_demux_src2_data;                                                                            // rsp_xbar_demux:src2_data -> width_adapter_001:in_data
	wire   [33:0] rsp_xbar_demux_src2_channel;                                                                         // rsp_xbar_demux:src2_channel -> width_adapter_001:in_channel
	wire          rsp_xbar_demux_src2_ready;                                                                           // width_adapter_001:in_ready -> rsp_xbar_demux:src2_ready
	wire          width_adapter_001_src_endofpacket;                                                                   // width_adapter_001:out_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          width_adapter_001_src_valid;                                                                         // width_adapter_001:out_valid -> rsp_xbar_mux_002:sink0_valid
	wire          width_adapter_001_src_startofpacket;                                                                 // width_adapter_001:out_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [134:0] width_adapter_001_src_data;                                                                          // width_adapter_001:out_data -> rsp_xbar_mux_002:sink0_data
	wire          width_adapter_001_src_ready;                                                                         // rsp_xbar_mux_002:sink0_ready -> width_adapter_001:out_ready
	wire   [33:0] width_adapter_001_src_channel;                                                                       // width_adapter_001:out_channel -> rsp_xbar_mux_002:sink0_channel
	wire   [33:0] limiter_cmd_valid_data;                                                                              // limiter:cmd_src_valid -> cmd_xbar_demux_002:sink_valid
	wire   [33:0] limiter_001_cmd_valid_data;                                                                          // limiter_001:cmd_src_valid -> cmd_xbar_demux_003:sink_valid
	wire   [33:0] limiter_002_cmd_valid_data;                                                                          // limiter_002:cmd_src_valid -> cmd_xbar_demux_004:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fpga_only_master_master_translator (
		.clk                      (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address              (fpga_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (fpga_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (fpga_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (fpga_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (fpga_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (fpga_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                  (fpga_only_master_master_read),                                               //                          .read
		.av_readdata              (fpga_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (fpga_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (fpga_only_master_master_write),                                              //                          .write
		.av_writedata             (fpga_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                       //               (terminated)
		.av_begintransfer         (1'b0),                                                                       //               (terminated)
		.av_chipselect            (1'b0),                                                                       //               (terminated)
		.av_lock                  (1'b0),                                                                       //               (terminated)
		.av_debugaccess           (1'b0),                                                                       //               (terminated)
		.uav_clken                (),                                                                           //               (terminated)
		.av_clken                 (1'b1),                                                                       //               (terminated)
		.uav_response             (2'b00),                                                                      //               (terminated)
		.av_response              (),                                                                           //               (terminated)
		.uav_writeresponserequest (),                                                                           //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                       //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid    ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                                  //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            //                    reset.reset
		.uav_address              (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_memory2_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_0_s1_write),                                                      //                         .write
		.av_readdata              (onchip_memory2_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (onchip_memory2_0_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (onchip_memory2_0_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (onchip_memory2_0_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (onchip_memory2_0_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                               //              (terminated)
		.av_begintransfer         (),                                                                               //              (terminated)
		.av_beginbursttransfer    (),                                                                               //              (terminated)
		.av_burstcount            (),                                                                               //              (terminated)
		.av_readdatavalid         (1'b0),                                                                           //              (terminated)
		.av_waitrequest           (1'b0),                                                                           //              (terminated)
		.av_writebyteenable       (),                                                                               //              (terminated)
		.av_lock                  (),                                                                               //              (terminated)
		.uav_clken                (1'b0),                                                                           //              (terminated)
		.av_debugaccess           (),                                                                               //              (terminated)
		.av_outputenable          (),                                                                               //              (terminated)
		.uav_response             (),                                                                               //              (terminated)
		.av_response              (2'b00),                                                                          //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                           //              (terminated)
		.uav_writeresponsevalid   (),                                                                               //              (terminated)
		.av_writeresponserequest  (),                                                                               //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (clk_0_clk_clk),                                                                          //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                    //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_avalon_jtag_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_avalon_jtag_slave_write),                                                      //                         .write
		.av_read                  (jtag_uart_avalon_jtag_slave_read),                                                       //                         .read
		.av_readdata              (jtag_uart_avalon_jtag_slave_readdata),                                                   //                         .readdata
		.av_writedata             (jtag_uart_avalon_jtag_slave_writedata),                                                  //                         .writedata
		.av_waitrequest           (jtag_uart_avalon_jtag_slave_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (jtag_uart_avalon_jtag_slave_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                                       //              (terminated)
		.av_burstcount            (),                                                                                       //              (terminated)
		.av_byteenable            (),                                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                                       //              (terminated)
		.av_lock                  (),                                                                                       //              (terminated)
		.av_clken                 (),                                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                                   //              (terminated)
		.av_debugaccess           (),                                                                                       //              (terminated)
		.av_outputenable          (),                                                                                       //              (terminated)
		.uav_response             (),                                                                                       //              (terminated)
		.av_response              (2'b00),                                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intr_capturer_0_avalon_slave_0_translator (
		.clk                      (clk_0_clk_clk),                                                                             //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                       //                    reset.reset
		.uav_address              (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (intr_capturer_0_avalon_slave_0_address),                                                    //      avalon_anti_slave_0.address
		.av_read                  (intr_capturer_0_avalon_slave_0_read),                                                       //                         .read
		.av_readdata              (intr_capturer_0_avalon_slave_0_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                                          //              (terminated)
		.av_writedata             (),                                                                                          //              (terminated)
		.av_begintransfer         (),                                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                                          //              (terminated)
		.av_burstcount            (),                                                                                          //              (terminated)
		.av_byteenable            (),                                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                                          //              (terminated)
		.av_lock                  (),                                                                                          //              (terminated)
		.av_chipselect            (),                                                                                          //              (terminated)
		.av_clken                 (),                                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                                      //              (terminated)
		.av_debugaccess           (),                                                                                          //              (terminated)
		.av_outputenable          (),                                                                                          //              (terminated)
		.uav_response             (),                                                                                          //              (terminated)
		.av_response              (2'b00),                                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                      (clk_0_clk_clk),                                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                 //                    reset.reset
		.uav_address              (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sysid_qsys_control_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (sysid_qsys_control_slave_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                                    //              (terminated)
		.av_read                  (),                                                                                    //              (terminated)
		.av_writedata             (),                                                                                    //              (terminated)
		.av_begintransfer         (),                                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                                    //              (terminated)
		.av_burstcount            (),                                                                                    //              (terminated)
		.av_byteenable            (),                                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                                //              (terminated)
		.av_writebyteenable       (),                                                                                    //              (terminated)
		.av_lock                  (),                                                                                    //              (terminated)
		.av_chipselect            (),                                                                                    //              (terminated)
		.av_clken                 (),                                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                                //              (terminated)
		.av_debugaccess           (),                                                                                    //              (terminated)
		.av_outputenable          (),                                                                                    //              (terminated)
		.uav_response             (),                                                                                    //              (terminated)
		.av_response              (2'b00),                                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_x0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address              (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_x0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (box_x0_s1_write),                                                      //                         .write
		.av_readdata              (box_x0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (box_x0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (box_x0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_xn_s1_translator (
		.clk                      (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address              (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_xn_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (box_xn_s1_write),                                                      //                         .write
		.av_readdata              (box_xn_s1_readdata),                                                   //                         .readdata
		.av_writedata             (box_xn_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (box_xn_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) n_fish_s1_translator (
		.clk                      (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address              (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (n_fish_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (n_fish_s1_write),                                                      //                         .write
		.av_readdata              (n_fish_s1_readdata),                                                   //                         .readdata
		.av_writedata             (n_fish_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (n_fish_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_led_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (pio_led_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (pio_led_s1_write),                                                      //                         .write
		.av_readdata              (pio_led_s1_readdata),                                                   //                         .readdata
		.av_writedata             (pio_led_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (pio_led_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) test_16t_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (test_16t_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (test_16t_0_s1_write),                                                      //                         .write
		.av_readdata              (test_16t_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (test_16t_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (test_16t_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                         //              (terminated)
		.av_begintransfer         (),                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                         //              (terminated)
		.av_burstcount            (),                                                                         //              (terminated)
		.av_byteenable            (),                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                     //              (terminated)
		.av_waitrequest           (1'b0),                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                         //              (terminated)
		.av_lock                  (),                                                                         //              (terminated)
		.av_clken                 (),                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                     //              (terminated)
		.av_debugaccess           (),                                                                         //              (terminated)
		.av_outputenable          (),                                                                         //              (terminated)
		.uav_response             (),                                                                         //              (terminated)
		.av_response              (2'b00),                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) test_32t_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                            //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (test_32t_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (test_32t_0_s1_write),                                                      //                         .write
		.av_readdata              (test_32t_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (test_32t_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (test_32t_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                         //              (terminated)
		.av_begintransfer         (),                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                         //              (terminated)
		.av_burstcount            (),                                                                         //              (terminated)
		.av_byteenable            (),                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                     //              (terminated)
		.av_waitrequest           (1'b0),                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                         //              (terminated)
		.av_lock                  (),                                                                         //              (terminated)
		.av_clken                 (),                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                     //              (terminated)
		.av_debugaccess           (),                                                                         //              (terminated)
		.av_outputenable          (),                                                                         //              (terminated)
		.uav_response             (),                                                                         //              (terminated)
		.av_response              (2'b00),                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_y0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address              (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_y0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (box_y0_s1_write),                                                      //                         .write
		.av_readdata              (box_y0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (box_y0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (box_y0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_yn_s1_translator (
		.clk                      (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address              (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_yn_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (box_yn_s1_write),                                                      //                         .write
		.av_readdata              (box_yn_s1_readdata),                                                   //                         .readdata
		.av_writedata             (box_yn_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (box_yn_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) n_pix_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (n_pix_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (n_pix_s1_write),                                                      //                         .write
		.av_readdata              (n_pix_s1_readdata),                                                   //                         .readdata
		.av_writedata             (n_pix_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (n_pix_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_req_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (box_req_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_req_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_req_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_req_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_req_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_req_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_req_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_req_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_req_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_req_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_req_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_req_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (box_req_s1_write),                                                      //                         .write
		.av_readdata              (box_req_s1_readdata),                                                   //                         .readdata
		.av_writedata             (box_req_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (box_req_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_n_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (box_n_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_n_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_n_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_n_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_n_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_n_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_n_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_n_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_n_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_n_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_n_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_n_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (box_n_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                    //              (terminated)
		.av_read                  (),                                                                    //              (terminated)
		.av_writedata             (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_chipselect            (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) box_addr_s1_translator (
		.clk                      (clk_0_clk_clk),                                                          //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address              (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (box_addr_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (box_addr_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                       //              (terminated)
		.av_read                  (),                                                                       //              (terminated)
		.av_writedata             (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_chipselect            (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) addr_out_s1_translator (
		.clk                      (clk_0_clk_clk),                                                          //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address              (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (addr_out_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (addr_out_s1_write),                                                      //                         .write
		.av_readdata              (addr_out_s1_readdata),                                                   //                         .readdata
		.av_writedata             (addr_out_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (addr_out_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) req_res_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (req_res_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (req_res_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (req_res_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (req_res_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (req_res_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (req_res_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (req_res_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (req_res_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (req_res_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (req_res_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (req_res_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (req_res_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (req_res_s1_write),                                                      //                         .write
		.av_readdata              (req_res_s1_readdata),                                                   //                         .readdata
		.av_writedata             (req_res_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (req_res_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) x_min_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (x_min_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (x_min_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (x_min_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (x_min_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (x_min_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (x_min_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (x_min_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (x_min_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (x_min_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (x_min_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (x_min_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (x_min_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (x_min_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                    //              (terminated)
		.av_read                  (),                                                                    //              (terminated)
		.av_writedata             (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_chipselect            (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) x_max_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (x_max_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (x_max_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (x_max_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (x_max_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (x_max_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (x_max_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (x_max_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (x_max_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (x_max_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (x_max_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (x_max_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (x_max_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (x_max_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                    //              (terminated)
		.av_read                  (),                                                                    //              (terminated)
		.av_writedata             (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_chipselect            (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) n_frame_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (n_frame_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (n_frame_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                      //              (terminated)
		.av_read                  (),                                                                      //              (terminated)
		.av_writedata             (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_cnt_s1_translator (
		.clk                      (clk_0_clk_clk),                                                           //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     //                    reset.reset
		.uav_address              (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (reset_cnt_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (reset_cnt_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                        //              (terminated)
		.av_read                  (),                                                                        //              (terminated)
		.av_writedata             (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_chipselect            (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_mass_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sw_mass_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (sw_mass_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                      //              (terminated)
		.av_read                  (),                                                                      //              (terminated)
		.av_writedata             (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) test_cnt_balls_s1_translator (
		.clk                      (clk_0_clk_clk),                                                                //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          //                    reset.reset
		.uav_address              (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (test_cnt_balls_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (test_cnt_balls_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                             //              (terminated)
		.av_read                  (),                                                                             //              (terminated)
		.av_writedata             (),                                                                             //              (terminated)
		.av_begintransfer         (),                                                                             //              (terminated)
		.av_beginbursttransfer    (),                                                                             //              (terminated)
		.av_burstcount            (),                                                                             //              (terminated)
		.av_byteenable            (),                                                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                                                         //              (terminated)
		.av_waitrequest           (1'b0),                                                                         //              (terminated)
		.av_writebyteenable       (),                                                                             //              (terminated)
		.av_lock                  (),                                                                             //              (terminated)
		.av_chipselect            (),                                                                             //              (terminated)
		.av_clken                 (),                                                                             //              (terminated)
		.uav_clken                (1'b0),                                                                         //              (terminated)
		.av_debugaccess           (),                                                                             //              (terminated)
		.av_outputenable          (),                                                                             //              (terminated)
		.uav_response             (),                                                                             //              (terminated)
		.av_response              (2'b00),                                                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                         //              (terminated)
		.uav_writeresponsevalid   (),                                                                             //              (terminated)
		.av_writeresponserequest  (),                                                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) con_yark_s1_translator (
		.clk                      (clk_0_clk_clk),                                                          //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address              (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (con_yark_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (con_yark_s1_write),                                                      //                         .write
		.av_readdata              (con_yark_s1_readdata),                                                   //                         .readdata
		.av_writedata             (con_yark_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (con_yark_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) x1_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address              (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (x1_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (x1_0_s1_write),                                                      //                         .write
		.av_readdata              (x1_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (x1_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (x1_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                   //              (terminated)
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_waitrequest           (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) x2_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address              (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (x2_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (x2_0_s1_write),                                                      //                         .write
		.av_readdata              (x2_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (x2_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (x2_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                   //              (terminated)
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_waitrequest           (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) y1_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address              (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (y1_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (y1_0_s1_write),                                                      //                         .write
		.av_readdata              (y1_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (y1_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (y1_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                   //              (terminated)
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_waitrequest           (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) y2_0_s1_translator (
		.clk                      (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address              (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (y2_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (y2_0_s1_write),                                                      //                         .write
		.av_readdata              (y2_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (y2_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (y2_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                   //              (terminated)
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_waitrequest           (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) del_x_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (del_x_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (del_x_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (del_x_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (del_x_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (del_x_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (del_x_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (del_x_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (del_x_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (del_x_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (del_x_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (del_x_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (del_x_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (del_x_s1_write),                                                      //                         .write
		.av_readdata              (del_x_s1_readdata),                                                   //                         .readdata
		.av_writedata             (del_x_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (del_x_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) del_y_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (del_y_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (del_y_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (del_y_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (del_y_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (del_y_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (del_y_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (del_y_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (del_y_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (del_y_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (del_y_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (del_y_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (del_y_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (del_y_s1_write),                                                      //                         .write
		.av_readdata              (del_y_s1_readdata),                                                   //                         .readdata
		.av_writedata             (del_y_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (del_y_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) x_cat_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (x_cat_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (x_cat_s1_write),                                                      //                         .write
		.av_readdata              (x_cat_s1_readdata),                                                   //                         .readdata
		.av_writedata             (x_cat_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (x_cat_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dx_corr_s1_translator (
		.clk                      (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (dx_corr_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (dx_corr_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                      //              (terminated)
		.av_read                  (),                                                                      //              (terminated)
		.av_writedata             (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_chipselect            (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) y_cut_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (y_cut_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (y_cut_s1_write),                                                      //                         .write
		.av_readdata              (y_cut_s1_readdata),                                                   //                         .readdata
		.av_writedata             (y_cut_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (y_cut_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (133),
		.PKT_CACHE_H               (165),
		.PKT_CACHE_L               (162),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_PROTECTION_H          (161),
		.PKT_PROTECTION_L          (159),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_RESPONSE_STATUS_L     (166),
		.PKT_RESPONSE_STATUS_H     (167),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (146),
		.PKT_DEST_ID_L             (141),
		.PKT_THREAD_ID_H           (158),
		.PKT_THREAD_ID_L           (147),
		.PKT_QOS_L                 (134),
		.PKT_QOS_H                 (134),
		.PKT_ORI_BURST_SIZE_L      (168),
		.PKT_ORI_BURST_SIZE_H      (170),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.ST_DATA_W                 (171),
		.ST_CHANNEL_W              (34),
		.ID                        (1)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (rsp_xbar_mux_src_valid),                                            //         write_rp.valid
		.write_rp_data          (rsp_xbar_mux_src_data),                                             //                 .data
		.write_rp_channel       (rsp_xbar_mux_src_channel),                                          //                 .channel
		.write_rp_startofpacket (rsp_xbar_mux_src_startofpacket),                                    //                 .startofpacket
		.write_rp_endofpacket   (rsp_xbar_mux_src_endofpacket),                                      //                 .endofpacket
		.write_rp_ready         (rsp_xbar_mux_src_ready),                                            //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (rsp_xbar_mux_001_src_valid),                                        //          read_rp.valid
		.read_rp_data           (rsp_xbar_mux_001_src_data),                                         //                 .data
		.read_rp_channel        (rsp_xbar_mux_001_src_channel),                                      //                 .channel
		.read_rp_startofpacket  (rsp_xbar_mux_001_src_startofpacket),                                //                 .startofpacket
		.read_rp_endofpacket    (rsp_xbar_mux_001_src_endofpacket),                                  //                 .endofpacket
		.read_rp_ready          (rsp_xbar_mux_001_src_ready),                                        //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (8'b00000000),                                                       //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BEGIN_BURST           (97),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (122),
		.PKT_THREAD_ID_L           (111),
		.PKT_CACHE_H               (129),
		.PKT_CACHE_L               (126),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fpga_only_master_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.av_address              (fpga_only_master_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (fpga_only_master_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (fpga_only_master_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (fpga_only_master_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (fpga_only_master_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (fpga_only_master_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                               //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                                //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                             //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                         //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                               //          .ready
		.av_response             (),                                                                                    // (terminated)
		.av_writeresponserequest (1'b0),                                                                                // (terminated)
		.av_writeresponsevalid   ()                                                                                     // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (97),
		.PKT_CACHE_H               (129),
		.PKT_CACHE_L               (126),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (122),
		.PKT_THREAD_ID_L           (111),
		.PKT_QOS_L                 (98),
		.PKT_QOS_H                 (98),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.ID                        (2)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (limiter_001_rsp_src_valid),                                         //         write_rp.valid
		.write_rp_data          (limiter_001_rsp_src_data),                                          //                 .data
		.write_rp_channel       (limiter_001_rsp_src_channel),                                       //                 .channel
		.write_rp_startofpacket (limiter_001_rsp_src_startofpacket),                                 //                 .startofpacket
		.write_rp_endofpacket   (limiter_001_rsp_src_endofpacket),                                   //                 .endofpacket
		.write_rp_ready         (limiter_001_rsp_src_ready),                                         //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (limiter_002_rsp_src_valid),                                         //          read_rp.valid
		.read_rp_data           (limiter_002_rsp_src_data),                                          //                 .data
		.read_rp_channel        (limiter_002_rsp_src_channel),                                       //                 .channel
		.read_rp_startofpacket  (limiter_002_rsp_src_startofpacket),                                 //                 .startofpacket
		.read_rp_endofpacket    (limiter_002_rsp_src_endofpacket),                                   //                 .endofpacket
		.read_rp_ready          (limiter_002_rsp_src_ready),                                         //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (8'b00000000),                                                       //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (133),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (146),
		.PKT_DEST_ID_L             (141),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_PROTECTION_H          (161),
		.PKT_PROTECTION_L          (159),
		.PKT_RESPONSE_STATUS_H     (167),
		.PKT_RESPONSE_STATUS_L     (166),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_ORI_BURST_SIZE_L      (168),
		.PKT_ORI_BURST_SIZE_H      (170),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (171),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                            //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                      //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                              //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                              //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                               //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                        //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                            //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                    //     (terminated)
		.m0_writeresponserequest (),                                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (172),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                    // (terminated)
		.csr_read          (1'b0),                                                                                     // (terminated)
		.csr_write         (1'b0),                                                                                     // (terminated)
		.csr_readdata      (),                                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                     // (terminated)
		.almost_full_data  (),                                                                                         // (terminated)
		.almost_empty_data (),                                                                                         // (terminated)
		.in_empty          (1'b0),                                                                                     // (terminated)
		.out_empty         (),                                                                                         // (terminated)
		.in_error          (1'b0),                                                                                     // (terminated)
		.out_error         (),                                                                                         // (terminated)
		.in_channel        (1'b0),                                                                                     // (terminated)
		.out_channel       ()                                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                                               // (terminated)
		.out_startofpacket (),                                                                                   // (terminated)
		.out_endofpacket   (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                    //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                              //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                  //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                  //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                   //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                            //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                            // (terminated)
		.csr_read          (1'b0),                                                                                             // (terminated)
		.csr_write         (1'b0),                                                                                             // (terminated)
		.csr_readdata      (),                                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                             // (terminated)
		.almost_full_data  (),                                                                                                 // (terminated)
		.almost_empty_data (),                                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                                             // (terminated)
		.out_empty         (),                                                                                                 // (terminated)
		.in_error          (1'b0),                                                                                             // (terminated)
		.out_error         (),                                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                                             // (terminated)
		.out_channel       ()                                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                              //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                                       // (terminated)
		.out_startofpacket (),                                                                                           // (terminated)
		.out_endofpacket   (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                                 //       clk_reset.reset
		.m0_address              (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_002_src_ready),                                                                          //              cp.ready
		.cp_valid                (cmd_xbar_mux_002_src_valid),                                                                          //                .valid
		.cp_data                 (cmd_xbar_mux_002_src_data),                                                                           //                .data
		.cp_startofpacket        (cmd_xbar_mux_002_src_startofpacket),                                                                  //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_002_src_endofpacket),                                                                    //                .endofpacket
		.cp_channel              (cmd_xbar_mux_002_src_channel),                                                                        //                .channel
		.rf_sink_ready           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                                // (terminated)
		.csr_readdata      (),                                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                // (terminated)
		.almost_full_data  (),                                                                                                    // (terminated)
		.almost_empty_data (),                                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                                // (terminated)
		.out_empty         (),                                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                                // (terminated)
		.out_error         (),                                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                                // (terminated)
		.out_channel       ()                                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                         // (terminated)
		.csr_read          (1'b0),                                                                                          // (terminated)
		.csr_write         (1'b0),                                                                                          // (terminated)
		.csr_readdata      (),                                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                          // (terminated)
		.almost_full_data  (),                                                                                              // (terminated)
		.almost_empty_data (),                                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                                          // (terminated)
		.out_startofpacket (),                                                                                              // (terminated)
		.out_endofpacket   (),                                                                                              // (terminated)
		.in_empty          (1'b0),                                                                                          // (terminated)
		.out_empty         (),                                                                                              // (terminated)
		.in_error          (1'b0),                                                                                          // (terminated)
		.out_error         (),                                                                                              // (terminated)
		.in_channel        (1'b0),                                                                                          // (terminated)
		.out_channel       ()                                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                           //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                                               //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                                               //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                                                //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                                         //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                                             //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                         // (terminated)
		.csr_read          (1'b0),                                                                                          // (terminated)
		.csr_write         (1'b0),                                                                                          // (terminated)
		.csr_readdata      (),                                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                          // (terminated)
		.almost_full_data  (),                                                                                              // (terminated)
		.almost_empty_data (),                                                                                              // (terminated)
		.in_empty          (1'b0),                                                                                          // (terminated)
		.out_empty         (),                                                                                              // (terminated)
		.in_error          (1'b0),                                                                                          // (terminated)
		.out_error         (),                                                                                              // (terminated)
		.in_channel        (1'b0),                                                                                          // (terminated)
		.out_channel       ()                                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                   // (terminated)
		.csr_read          (1'b0),                                                                                    // (terminated)
		.csr_write         (1'b0),                                                                                    // (terminated)
		.csr_readdata      (),                                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                    // (terminated)
		.almost_full_data  (),                                                                                        // (terminated)
		.almost_empty_data (),                                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                                    // (terminated)
		.out_startofpacket (),                                                                                        // (terminated)
		.out_endofpacket   (),                                                                                        // (terminated)
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.in_error          (1'b0),                                                                                    // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_channel        (1'b0),                                                                                    // (terminated)
		.out_channel       ()                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_x0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_x0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_003_source0_ready),                                                //              cp.ready
		.cp_valid                (burst_adapter_003_source0_valid),                                                //                .valid
		.cp_data                 (burst_adapter_003_source0_data),                                                 //                .data
		.cp_startofpacket        (burst_adapter_003_source0_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_003_source0_endofpacket),                                          //                .endofpacket
		.cp_channel              (burst_adapter_003_source0_channel),                                              //                .channel
		.rf_sink_ready           (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                  //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_x0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_x0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_x0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_xn_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_xn_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_004_source0_ready),                                                //              cp.ready
		.cp_valid                (burst_adapter_004_source0_valid),                                                //                .valid
		.cp_data                 (burst_adapter_004_source0_data),                                                 //                .data
		.cp_startofpacket        (burst_adapter_004_source0_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_004_source0_endofpacket),                                          //                .endofpacket
		.cp_channel              (burst_adapter_004_source0_channel),                                              //                .channel
		.rf_sink_ready           (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                  //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_xn_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_xn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_xn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) n_fish_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (n_fish_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_005_source0_ready),                                                //              cp.ready
		.cp_valid                (burst_adapter_005_source0_valid),                                                //                .valid
		.cp_data                 (burst_adapter_005_source0_data),                                                 //                .data
		.cp_startofpacket        (burst_adapter_005_source0_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_005_source0_endofpacket),                                          //                .endofpacket
		.cp_channel              (burst_adapter_005_source0_channel),                                              //                .channel
		.rf_sink_ready           (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                  //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (n_fish_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (n_fish_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (n_fish_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_led_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_led_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_006_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_006_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_006_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_006_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_006_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_006_source0_channel),                                               //                .channel
		.rf_sink_ready           (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_led_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_led_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pio_led_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) test_16t_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                      //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (test_16t_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_007_source0_ready),                                                    //              cp.ready
		.cp_valid                (burst_adapter_007_source0_valid),                                                    //                .valid
		.cp_data                 (burst_adapter_007_source0_data),                                                     //                .data
		.cp_startofpacket        (burst_adapter_007_source0_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_007_source0_endofpacket),                                              //                .endofpacket
		.cp_channel              (burst_adapter_007_source0_channel),                                                  //                .channel
		.rf_sink_ready           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                         // (terminated)
		.out_startofpacket (),                                                                             // (terminated)
		.out_endofpacket   (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) test_32t_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                      //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (test_32t_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_008_source0_ready),                                                    //              cp.ready
		.cp_valid                (burst_adapter_008_source0_valid),                                                    //                .valid
		.cp_data                 (burst_adapter_008_source0_data),                                                     //                .data
		.cp_startofpacket        (burst_adapter_008_source0_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_008_source0_endofpacket),                                              //                .endofpacket
		.cp_channel              (burst_adapter_008_source0_channel),                                                  //                .channel
		.rf_sink_ready           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                      //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                         // (terminated)
		.out_startofpacket (),                                                                             // (terminated)
		.out_endofpacket   (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_y0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_y0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_009_source0_ready),                                                //              cp.ready
		.cp_valid                (burst_adapter_009_source0_valid),                                                //                .valid
		.cp_data                 (burst_adapter_009_source0_data),                                                 //                .data
		.cp_startofpacket        (burst_adapter_009_source0_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_009_source0_endofpacket),                                          //                .endofpacket
		.cp_channel              (burst_adapter_009_source0_channel),                                              //                .channel
		.rf_sink_ready           (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                  //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_y0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_y0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_y0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_yn_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                  //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_yn_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_010_source0_ready),                                                //              cp.ready
		.cp_valid                (burst_adapter_010_source0_valid),                                                //                .valid
		.cp_data                 (burst_adapter_010_source0_data),                                                 //                .data
		.cp_startofpacket        (burst_adapter_010_source0_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_010_source0_endofpacket),                                          //                .endofpacket
		.cp_channel              (burst_adapter_010_source0_channel),                                              //                .channel
		.rf_sink_ready           (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                  //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_yn_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_yn_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_yn_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) n_pix_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (n_pix_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_011_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_011_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_011_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_011_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_011_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_011_source0_channel),                                             //                .channel
		.rf_sink_ready           (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (n_pix_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (n_pix_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (n_pix_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_req_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (box_req_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_req_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_req_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_req_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_req_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_req_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_req_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_req_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_req_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_req_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_req_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_req_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_req_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_req_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_req_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_req_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_012_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_012_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_012_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_012_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_012_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_012_source0_channel),                                               //                .channel
		.rf_sink_ready           (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_req_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_req_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_req_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_n_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (box_n_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_n_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_n_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_n_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_n_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_n_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_n_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_n_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_n_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_n_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_n_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_n_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_n_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_n_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_n_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_n_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_013_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_013_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_013_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_013_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_013_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_013_source0_channel),                                             //                .channel
		.rf_sink_ready           (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_n_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_n_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_n_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) box_addr_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                    //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (box_addr_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_014_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_014_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_014_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_014_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_014_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_014_source0_channel),                                                //                .channel
		.rf_sink_ready           (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (box_addr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (box_addr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                              //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (box_addr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addr_out_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                    //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (addr_out_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_015_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_015_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_015_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_015_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_015_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_015_source0_channel),                                                //                .channel
		.rf_sink_ready           (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (addr_out_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (addr_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                              //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (addr_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) req_res_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (req_res_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (req_res_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (req_res_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (req_res_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (req_res_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (req_res_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (req_res_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (req_res_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (req_res_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (req_res_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (req_res_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (req_res_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (req_res_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (req_res_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (req_res_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (req_res_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_016_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_016_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_016_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_016_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_016_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_016_source0_channel),                                               //                .channel
		.rf_sink_ready           (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (req_res_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (req_res_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (req_res_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) x_min_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (x_min_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (x_min_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (x_min_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (x_min_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (x_min_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (x_min_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (x_min_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (x_min_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (x_min_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (x_min_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (x_min_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (x_min_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (x_min_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (x_min_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (x_min_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (x_min_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_017_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_017_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_017_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_017_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_017_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_017_source0_channel),                                             //                .channel
		.rf_sink_ready           (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (x_min_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (x_min_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (x_min_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) x_max_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (x_max_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (x_max_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (x_max_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (x_max_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (x_max_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (x_max_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (x_max_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (x_max_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (x_max_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (x_max_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (x_max_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (x_max_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (x_max_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (x_max_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (x_max_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (x_max_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_018_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_018_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_018_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_018_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_018_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_018_source0_channel),                                             //                .channel
		.rf_sink_ready           (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (x_max_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (x_max_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (x_max_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) n_frame_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (n_frame_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_019_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_019_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_019_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_019_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_019_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_019_source0_channel),                                               //                .channel
		.rf_sink_ready           (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (n_frame_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (n_frame_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (n_frame_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) reset_cnt_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                     //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                               //       clk_reset.reset
		.m0_address              (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (reset_cnt_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_020_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_020_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_020_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_020_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_020_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_020_source0_channel),                                                 //                .channel
		.rf_sink_ready           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                     //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_data           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                               //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sw_mass_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sw_mass_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_021_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_021_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_021_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_021_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_021_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_021_source0_channel),                                               //                .channel
		.rf_sink_ready           (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sw_mass_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sw_mass_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) test_cnt_balls_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                    //       clk_reset.reset
		.m0_address              (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_022_source0_ready),                                                        //              cp.ready
		.cp_valid                (burst_adapter_022_source0_valid),                                                        //                .valid
		.cp_data                 (burst_adapter_022_source0_data),                                                         //                .data
		.cp_startofpacket        (burst_adapter_022_source0_startofpacket),                                                //                .startofpacket
		.cp_endofpacket          (burst_adapter_022_source0_endofpacket),                                                  //                .endofpacket
		.cp_channel              (burst_adapter_022_source0_channel),                                                      //                .channel
		.rf_sink_ready           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                  //     (terminated)
		.m0_writeresponserequest (),                                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                          //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_data           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                                             // (terminated)
		.out_startofpacket (),                                                                                 // (terminated)
		.out_endofpacket   (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) con_yark_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                    //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (con_yark_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_023_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_023_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_023_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_023_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_023_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_023_source0_channel),                                                //                .channel
		.rf_sink_ready           (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (con_yark_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (con_yark_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                              //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (con_yark_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) x1_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (x1_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_024_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_024_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_024_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_024_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_024_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_024_source0_channel),                                            //                .channel
		.rf_sink_ready           (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (x1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (x1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (x1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                   // (terminated)
		.out_startofpacket (),                                                                       // (terminated)
		.out_endofpacket   (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) x2_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (x2_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_025_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_025_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_025_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_025_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_025_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_025_source0_channel),                                            //                .channel
		.rf_sink_ready           (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (x2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (x2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (x2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                   // (terminated)
		.out_startofpacket (),                                                                       // (terminated)
		.out_endofpacket   (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) y1_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (y1_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_026_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_026_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_026_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_026_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_026_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_026_source0_channel),                                            //                .channel
		.rf_sink_ready           (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (y1_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (y1_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (y1_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                   // (terminated)
		.out_startofpacket (),                                                                       // (terminated)
		.out_endofpacket   (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) y2_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (y2_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_027_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_027_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_027_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_027_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_027_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_027_source0_channel),                                            //                .channel
		.rf_sink_ready           (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (y2_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (y2_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (y2_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                   // (terminated)
		.out_startofpacket (),                                                                       // (terminated)
		.out_endofpacket   (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) del_x_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (del_x_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (del_x_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (del_x_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (del_x_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (del_x_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (del_x_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (del_x_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (del_x_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (del_x_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (del_x_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (del_x_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (del_x_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (del_x_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (del_x_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (del_x_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (del_x_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_028_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_028_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_028_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_028_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_028_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_028_source0_channel),                                             //                .channel
		.rf_sink_ready           (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (del_x_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (del_x_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (del_x_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) del_y_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (del_y_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (del_y_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (del_y_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (del_y_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (del_y_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (del_y_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (del_y_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (del_y_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (del_y_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (del_y_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (del_y_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (del_y_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (del_y_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (del_y_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (del_y_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (del_y_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_029_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_029_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_029_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_029_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_029_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_029_source0_channel),                                             //                .channel
		.rf_sink_ready           (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (del_y_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (del_y_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (del_y_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) x_cat_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (x_cat_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_030_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_030_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_030_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_030_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_030_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_030_source0_channel),                                             //                .channel
		.rf_sink_ready           (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (x_cat_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (x_cat_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (x_cat_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dx_corr_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (dx_corr_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_031_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_031_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_031_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_031_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_031_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_031_source0_channel),                                               //                .channel
		.rf_sink_ready           (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dx_corr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dx_corr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (97),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.ST_CHANNEL_W              (34),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) y_cut_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (y_cut_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_032_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_032_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_032_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_032_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_032_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_032_source0_channel),                                             //                .channel
		.rf_sink_ready           (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (y_cut_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (y_cut_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (y_cut_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	soc_system_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                            //       src.ready
		.src_valid          (addr_router_src_valid),                                            //          .valid
		.src_data           (addr_router_src_data),                                             //          .data
		.src_channel        (addr_router_src_channel),                                          //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_addr_router addr_router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                        //       src.ready
		.src_valid          (addr_router_001_src_valid),                                        //          .valid
		.src_data           (addr_router_001_src_data),                                         //          .data
		.src_channel        (addr_router_001_src_channel),                                      //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_addr_router_002 addr_router_002 (
		.sink_ready         (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fpga_only_master_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                           //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                           //          .valid
		.src_data           (addr_router_002_src_data),                                                            //          .data
		.src_channel        (addr_router_002_src_channel),                                                         //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_addr_router_003 addr_router_003 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_003_src_ready),                                        //       src.ready
		.src_valid          (addr_router_003_src_valid),                                        //          .valid
		.src_data           (addr_router_003_src_data),                                         //          .data
		.src_channel        (addr_router_003_src_channel),                                      //          .channel
		.src_startofpacket  (addr_router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (addr_router_003_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_addr_router_003 addr_router_004 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_004_src_ready),                                        //       src.ready
		.src_valid          (addr_router_004_src_valid),                                        //          .valid
		.src_data           (addr_router_004_src_data),                                         //          .data
		.src_channel        (addr_router_004_src_channel),                                      //          .channel
		.src_startofpacket  (addr_router_004_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (addr_router_004_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router id_router (
		.sink_ready         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                  //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                            //       src.ready
		.src_valid          (id_router_src_valid),                                                            //          .valid
		.src_data           (id_router_src_data),                                                             //          .data
		.src_channel        (id_router_src_channel),                                                          //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                          //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                                //       src.ready
		.src_valid          (id_router_001_src_valid),                                                                //          .valid
		.src_data           (id_router_001_src_data),                                                                 //          .data
		.src_channel        (id_router_001_src_channel),                                                              //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intr_capturer_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                             //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                                   //       src.ready
		.src_valid          (id_router_002_src_valid),                                                                   //          .valid
		.src_data           (id_router_002_src_data),                                                                    //          .data
		.src_channel        (id_router_002_src_channel),                                                                 //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_003 (
		.sink_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                             //       src.ready
		.src_valid          (id_router_003_src_valid),                                                             //          .valid
		.src_data           (id_router_003_src_data),                                                              //          .data
		.src_channel        (id_router_003_src_channel),                                                           //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_004 (
		.sink_ready         (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_x0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                              //       src.ready
		.src_valid          (id_router_004_src_valid),                                              //          .valid
		.src_data           (id_router_004_src_data),                                               //          .data
		.src_channel        (id_router_004_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_005 (
		.sink_ready         (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_xn_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (id_router_005_src_ready),                                              //       src.ready
		.src_valid          (id_router_005_src_valid),                                              //          .valid
		.src_data           (id_router_005_src_data),                                               //          .data
		.src_channel        (id_router_005_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_005_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_005_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_006 (
		.sink_ready         (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (n_fish_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (id_router_006_src_ready),                                              //       src.ready
		.src_valid          (id_router_006_src_valid),                                              //          .valid
		.src_data           (id_router_006_src_data),                                               //          .data
		.src_channel        (id_router_006_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_006_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_006_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_007 (
		.sink_ready         (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pio_led_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_007_src_ready),                                               //       src.ready
		.src_valid          (id_router_007_src_valid),                                               //          .valid
		.src_data           (id_router_007_src_data),                                                //          .data
		.src_channel        (id_router_007_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_007_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_007_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_008 (
		.sink_ready         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (test_16t_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (id_router_008_src_ready),                                                  //       src.ready
		.src_valid          (id_router_008_src_valid),                                                  //          .valid
		.src_data           (id_router_008_src_data),                                                   //          .data
		.src_channel        (id_router_008_src_channel),                                                //          .channel
		.src_startofpacket  (id_router_008_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (id_router_008_src_endofpacket)                                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_009 (
		.sink_ready         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (test_32t_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                            //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (id_router_009_src_ready),                                                  //       src.ready
		.src_valid          (id_router_009_src_valid),                                                  //          .valid
		.src_data           (id_router_009_src_data),                                                   //          .data
		.src_channel        (id_router_009_src_channel),                                                //          .channel
		.src_startofpacket  (id_router_009_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (id_router_009_src_endofpacket)                                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_010 (
		.sink_ready         (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_y0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (id_router_010_src_ready),                                              //       src.ready
		.src_valid          (id_router_010_src_valid),                                              //          .valid
		.src_data           (id_router_010_src_data),                                               //          .data
		.src_channel        (id_router_010_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_010_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_010_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_011 (
		.sink_ready         (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_yn_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (id_router_011_src_ready),                                              //       src.ready
		.src_valid          (id_router_011_src_valid),                                              //          .valid
		.src_data           (id_router_011_src_data),                                               //          .data
		.src_channel        (id_router_011_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_011_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_011_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_012 (
		.sink_ready         (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (n_pix_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_012_src_ready),                                             //       src.ready
		.src_valid          (id_router_012_src_valid),                                             //          .valid
		.src_data           (id_router_012_src_data),                                              //          .data
		.src_channel        (id_router_012_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_012_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_012_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_013 (
		.sink_ready         (box_req_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_req_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_req_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_req_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_req_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_013_src_ready),                                               //       src.ready
		.src_valid          (id_router_013_src_valid),                                               //          .valid
		.src_data           (id_router_013_src_data),                                                //          .data
		.src_channel        (id_router_013_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_013_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_013_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_014 (
		.sink_ready         (box_n_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_n_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_n_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_n_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_n_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_014_src_ready),                                             //       src.ready
		.src_valid          (id_router_014_src_valid),                                             //          .valid
		.src_data           (id_router_014_src_data),                                              //          .data
		.src_channel        (id_router_014_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_014_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_014_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_015 (
		.sink_ready         (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (box_addr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                          //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (id_router_015_src_ready),                                                //       src.ready
		.src_valid          (id_router_015_src_valid),                                                //          .valid
		.src_data           (id_router_015_src_data),                                                 //          .data
		.src_channel        (id_router_015_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_015_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_015_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_016 (
		.sink_ready         (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (addr_out_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                          //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (id_router_016_src_ready),                                                //       src.ready
		.src_valid          (id_router_016_src_valid),                                                //          .valid
		.src_data           (id_router_016_src_data),                                                 //          .data
		.src_channel        (id_router_016_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_016_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_016_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_017 (
		.sink_ready         (req_res_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (req_res_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (req_res_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (req_res_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (req_res_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_017_src_ready),                                               //       src.ready
		.src_valid          (id_router_017_src_valid),                                               //          .valid
		.src_data           (id_router_017_src_data),                                                //          .data
		.src_channel        (id_router_017_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_017_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_017_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_018 (
		.sink_ready         (x_min_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (x_min_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (x_min_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (x_min_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (x_min_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_018_src_ready),                                             //       src.ready
		.src_valid          (id_router_018_src_valid),                                             //          .valid
		.src_data           (id_router_018_src_data),                                              //          .data
		.src_channel        (id_router_018_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_018_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_018_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_019 (
		.sink_ready         (x_max_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (x_max_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (x_max_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (x_max_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (x_max_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_019_src_ready),                                             //       src.ready
		.src_valid          (id_router_019_src_valid),                                             //          .valid
		.src_data           (id_router_019_src_data),                                              //          .data
		.src_channel        (id_router_019_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_019_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_019_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_020 (
		.sink_ready         (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (n_frame_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_020_src_ready),                                               //       src.ready
		.src_valid          (id_router_020_src_valid),                                               //          .valid
		.src_data           (id_router_020_src_data),                                                //          .data
		.src_channel        (id_router_020_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_020_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_020_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_021 (
		.sink_ready         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (reset_cnt_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                           //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (id_router_021_src_ready),                                                 //       src.ready
		.src_valid          (id_router_021_src_valid),                                                 //          .valid
		.src_data           (id_router_021_src_data),                                                  //          .data
		.src_channel        (id_router_021_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_021_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_021_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_022 (
		.sink_ready         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sw_mass_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_022_src_ready),                                               //       src.ready
		.src_valid          (id_router_022_src_valid),                                               //          .valid
		.src_data           (id_router_022_src_data),                                                //          .data
		.src_channel        (id_router_022_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_022_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_022_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_023 (
		.sink_ready         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (test_cnt_balls_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.src_ready          (id_router_023_src_ready),                                                      //       src.ready
		.src_valid          (id_router_023_src_valid),                                                      //          .valid
		.src_data           (id_router_023_src_data),                                                       //          .data
		.src_channel        (id_router_023_src_channel),                                                    //          .channel
		.src_startofpacket  (id_router_023_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (id_router_023_src_endofpacket)                                                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_024 (
		.sink_ready         (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (con_yark_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                          //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (id_router_024_src_ready),                                                //       src.ready
		.src_valid          (id_router_024_src_valid),                                                //          .valid
		.src_data           (id_router_024_src_data),                                                 //          .data
		.src_channel        (id_router_024_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_024_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_024_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_025 (
		.sink_ready         (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (x1_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (id_router_025_src_ready),                                            //       src.ready
		.src_valid          (id_router_025_src_valid),                                            //          .valid
		.src_data           (id_router_025_src_data),                                             //          .data
		.src_channel        (id_router_025_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_025_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_025_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_026 (
		.sink_ready         (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (x2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (id_router_026_src_ready),                                            //       src.ready
		.src_valid          (id_router_026_src_valid),                                            //          .valid
		.src_data           (id_router_026_src_data),                                             //          .data
		.src_channel        (id_router_026_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_026_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_026_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_027 (
		.sink_ready         (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (y1_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (id_router_027_src_ready),                                            //       src.ready
		.src_valid          (id_router_027_src_valid),                                            //          .valid
		.src_data           (id_router_027_src_data),                                             //          .data
		.src_channel        (id_router_027_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_027_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_027_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_028 (
		.sink_ready         (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (y2_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (id_router_028_src_ready),                                            //       src.ready
		.src_valid          (id_router_028_src_valid),                                            //          .valid
		.src_data           (id_router_028_src_data),                                             //          .data
		.src_channel        (id_router_028_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_028_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_028_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_029 (
		.sink_ready         (del_x_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (del_x_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (del_x_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (del_x_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (del_x_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_029_src_ready),                                             //       src.ready
		.src_valid          (id_router_029_src_valid),                                             //          .valid
		.src_data           (id_router_029_src_data),                                              //          .data
		.src_channel        (id_router_029_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_029_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_029_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_030 (
		.sink_ready         (del_y_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (del_y_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (del_y_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (del_y_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (del_y_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_030_src_ready),                                             //       src.ready
		.src_valid          (id_router_030_src_valid),                                             //          .valid
		.src_data           (id_router_030_src_data),                                              //          .data
		.src_channel        (id_router_030_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_030_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_030_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_031 (
		.sink_ready         (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (x_cat_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_031_src_ready),                                             //       src.ready
		.src_valid          (id_router_031_src_valid),                                             //          .valid
		.src_data           (id_router_031_src_data),                                              //          .data
		.src_channel        (id_router_031_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_031_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_031_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_032 (
		.sink_ready         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dx_corr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_032_src_ready),                                               //       src.ready
		.src_valid          (id_router_032_src_valid),                                               //          .valid
		.src_data           (id_router_032_src_data),                                                //          .data
		.src_channel        (id_router_032_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_032_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_032_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_id_router_001 id_router_033 (
		.sink_ready         (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (y_cut_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_033_src_ready),                                             //       src.ready
		.src_valid          (id_router_033_src_valid),                                             //          .valid
		.src_data           (id_router_033_src_data),                                              //          .data
		.src_channel        (id_router_033_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_033_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_033_src_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.VALID_WIDTH               (34),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (clk_0_clk_clk),                                       //       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_002_src_ready),                           //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_002_src_valid),                           //          .valid
		.cmd_sink_data          (addr_router_002_src_data),                            //          .data
		.cmd_sink_channel       (addr_router_002_src_channel),                         //          .channel
		.cmd_sink_startofpacket (addr_router_002_src_startofpacket),                   //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_002_src_endofpacket),                     //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                               //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                             //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                       //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                         //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_002_src_ready),                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_002_src_valid),                          //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_002_src_channel),                        //          .channel
		.rsp_sink_data          (rsp_xbar_mux_002_src_data),                           //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_002_src_startofpacket),                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_002_src_endofpacket),                    //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                               //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                               //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                             //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                       //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                         //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                               // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.VALID_WIDTH               (34),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_003_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_003_src_valid),                                        //          .valid
		.cmd_sink_data          (addr_router_003_src_data),                                         //          .data
		.cmd_sink_channel       (addr_router_003_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (addr_router_003_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_003_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                                        //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                                         //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                                      //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),                                //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),                                  //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_003_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_003_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_003_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_xbar_mux_003_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_003_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_003_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                                        //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                                        //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                                         //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                                      //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),                                //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),                                  //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                                        // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.VALID_WIDTH               (34),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_002 (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_004_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_004_src_valid),                                        //          .valid
		.cmd_sink_data          (addr_router_004_src_data),                                         //          .data
		.cmd_sink_channel       (addr_router_004_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (addr_router_004_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_004_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (limiter_002_cmd_src_ready),                                        //   cmd_src.ready
		.cmd_src_data           (limiter_002_cmd_src_data),                                         //          .data
		.cmd_src_channel        (limiter_002_cmd_src_channel),                                      //          .channel
		.cmd_src_startofpacket  (limiter_002_cmd_src_startofpacket),                                //          .startofpacket
		.cmd_src_endofpacket    (limiter_002_cmd_src_endofpacket),                                  //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_004_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_004_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_004_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_xbar_mux_004_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_004_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_004_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (limiter_002_rsp_src_ready),                                        //   rsp_src.ready
		.rsp_src_valid          (limiter_002_rsp_src_valid),                                        //          .valid
		.rsp_src_data           (limiter_002_rsp_src_data),                                         //          .data
		.rsp_src_channel        (limiter_002_rsp_src_channel),                                      //          .channel
		.rsp_src_startofpacket  (limiter_002_rsp_src_startofpacket),                                //          .startofpacket
		.rsp_src_endofpacket    (limiter_002_rsp_src_endofpacket),                                  //          .endofpacket
		.cmd_src_valid          (limiter_002_cmd_valid_data)                                        // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (133),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (171),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (125),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                               //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                              //          .ready
		.source0_valid         (burst_adapter_source0_valid),                         //   source0.valid
		.source0_data          (burst_adapter_source0_data),                          //          .data
		.source0_channel       (burst_adapter_source0_channel),                       //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),                 //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),                   //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_001 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),                      //          .data
		.source0_channel       (burst_adapter_001_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_002 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_003_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_003_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_003_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_003_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_003_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),                      //          .data
		.source0_channel       (burst_adapter_002_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_003 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_004_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_004_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_004_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_004_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_004_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_003_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_003_source0_data),                      //          .data
		.source0_channel       (burst_adapter_003_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_003_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_003_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_003_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_004 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_005_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_005_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_005_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_005_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_005_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_004_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_004_source0_data),                      //          .data
		.source0_channel       (burst_adapter_004_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_004_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_004_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_004_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_005 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_006_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_006_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_006_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_006_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_006_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_005_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_005_source0_data),                      //          .data
		.source0_channel       (burst_adapter_005_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_005_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_005_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_005_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_006 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_007_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_007_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_007_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_007_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_007_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_006_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_006_source0_data),                      //          .data
		.source0_channel       (burst_adapter_006_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_006_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_006_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_006_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_007 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_008_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_008_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_008_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_008_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_008_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_007_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_007_source0_data),                      //          .data
		.source0_channel       (burst_adapter_007_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_007_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_007_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_007_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_008 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_009_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_009_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_009_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_009_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_009_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_008_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_008_source0_data),                      //          .data
		.source0_channel       (burst_adapter_008_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_008_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_008_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_008_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_009 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_010_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_010_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_010_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_010_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_010_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_009_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_009_source0_data),                      //          .data
		.source0_channel       (burst_adapter_009_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_009_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_009_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_009_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_010 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_011_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_011_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_011_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_011_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_011_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_011_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_010_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_010_source0_data),                      //          .data
		.source0_channel       (burst_adapter_010_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_010_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_010_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_010_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_011 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_012_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_012_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_012_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_012_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_012_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_012_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_011_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_011_source0_data),                      //          .data
		.source0_channel       (burst_adapter_011_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_011_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_011_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_011_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_012 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_013_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_013_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_013_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_013_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_013_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_013_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_012_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_012_source0_data),                      //          .data
		.source0_channel       (burst_adapter_012_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_012_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_012_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_012_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_013 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_014_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_014_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_014_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_014_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_014_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_014_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_013_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_013_source0_data),                      //          .data
		.source0_channel       (burst_adapter_013_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_013_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_013_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_013_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_014 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_015_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_015_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_015_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_015_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_015_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_014_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_014_source0_data),                      //          .data
		.source0_channel       (burst_adapter_014_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_014_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_014_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_014_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_015 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_016_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_016_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_016_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_016_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_016_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_016_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_015_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_015_source0_data),                      //          .data
		.source0_channel       (burst_adapter_015_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_015_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_015_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_015_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_016 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_017_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_017_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_017_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_017_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_017_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_017_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_016_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_016_source0_data),                      //          .data
		.source0_channel       (burst_adapter_016_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_016_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_016_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_016_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_017 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_018_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_018_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_018_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_018_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_018_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_018_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_017_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_017_source0_data),                      //          .data
		.source0_channel       (burst_adapter_017_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_017_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_017_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_017_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_018 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_019_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_019_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_019_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_019_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_019_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_019_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_018_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_018_source0_data),                      //          .data
		.source0_channel       (burst_adapter_018_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_018_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_018_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_018_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_019 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_020_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_020_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_020_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_020_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_020_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_020_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_019_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_019_source0_data),                      //          .data
		.source0_channel       (burst_adapter_019_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_019_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_019_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_019_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_020 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_021_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_021_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_021_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_021_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_021_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_021_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_020_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_020_source0_data),                      //          .data
		.source0_channel       (burst_adapter_020_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_020_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_020_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_020_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_021 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_022_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_022_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_022_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_022_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_022_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_022_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_021_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_021_source0_data),                      //          .data
		.source0_channel       (burst_adapter_021_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_021_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_021_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_021_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_022 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_023_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_023_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_023_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_023_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_023_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_023_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_022_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_022_source0_data),                      //          .data
		.source0_channel       (burst_adapter_022_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_022_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_022_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_022_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_023 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_024_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_024_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_024_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_024_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_024_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_024_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_023_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_023_source0_data),                      //          .data
		.source0_channel       (burst_adapter_023_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_023_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_023_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_023_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_024 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_025_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_025_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_025_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_025_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_025_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_025_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_024_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_024_source0_data),                      //          .data
		.source0_channel       (burst_adapter_024_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_024_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_024_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_024_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_025 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_026_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_026_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_026_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_026_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_026_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_026_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_025_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_025_source0_data),                      //          .data
		.source0_channel       (burst_adapter_025_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_025_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_025_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_025_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_026 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_027_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_027_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_027_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_027_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_027_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_027_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_026_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_026_source0_data),                      //          .data
		.source0_channel       (burst_adapter_026_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_026_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_026_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_026_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_027 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_028_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_028_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_028_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_028_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_028_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_028_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_027_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_027_source0_data),                      //          .data
		.source0_channel       (burst_adapter_027_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_027_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_027_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_027_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_028 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_029_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_029_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_029_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_029_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_029_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_029_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_028_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_028_source0_data),                      //          .data
		.source0_channel       (burst_adapter_028_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_028_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_028_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_028_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_029 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_030_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_030_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_030_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_030_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_030_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_030_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_029_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_029_source0_data),                      //          .data
		.source0_channel       (burst_adapter_029_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_029_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_029_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_029_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_030 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_031_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_031_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_031_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_031_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_031_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_031_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_030_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_030_source0_data),                      //          .data
		.source0_channel       (burst_adapter_030_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_030_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_030_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_030_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_031 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_032_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_032_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_032_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_032_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_032_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_032_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_031_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_031_source0_data),                      //          .data
		.source0_channel       (burst_adapter_031_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_031_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_031_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_031_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (34),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_032 (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_033_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_xbar_mux_033_src_data),                           //          .data
		.sink0_channel         (cmd_xbar_mux_033_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_033_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_033_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_033_src_ready),                          //          .ready
		.source0_valid         (burst_adapter_032_source0_valid),                     //   source0.valid
		.source0_data          (burst_adapter_032_source0_data),                      //          .data
		.source0_channel       (burst_adapter_032_source0_channel),                   //          .channel
		.source0_startofpacket (burst_adapter_032_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (burst_adapter_032_source0_endofpacket),               //          .endofpacket
		.source0_ready         (burst_adapter_032_source0_ready)                      //          .ready
	);

	soc_system_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                                            //      sink.ready
		.sink_channel       (addr_router_src_channel),                                          //          .channel
		.sink_data          (addr_router_src_data),                                             //          .data
		.sink_startofpacket (addr_router_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (addr_router_src_valid),                                            //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                                        //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                                         //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),                                        //      sink.ready
		.sink_channel       (addr_router_001_src_channel),                                      //          .channel
		.sink_data          (addr_router_001_src_data),                                         //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),                                        //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                                    //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                                     //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_002 (
		.clk                 (clk_0_clk_clk),                                       //        clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_cmd_src_ready),                               //       sink.ready
		.sink_channel        (limiter_cmd_src_channel),                             //           .channel
		.sink_data           (limiter_cmd_src_data),                                //           .data
		.sink_startofpacket  (limiter_cmd_src_startofpacket),                       //           .startofpacket
		.sink_endofpacket    (limiter_cmd_src_endofpacket),                         //           .endofpacket
		.sink_valid          (limiter_cmd_valid_data),                              // sink_valid.data
		.src0_ready          (cmd_xbar_demux_002_src0_ready),                       //       src0.ready
		.src0_valid          (cmd_xbar_demux_002_src0_valid),                       //           .valid
		.src0_data           (cmd_xbar_demux_002_src0_data),                        //           .data
		.src0_channel        (cmd_xbar_demux_002_src0_channel),                     //           .channel
		.src0_startofpacket  (cmd_xbar_demux_002_src0_startofpacket),               //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_002_src0_endofpacket),                 //           .endofpacket
		.src1_ready          (cmd_xbar_demux_002_src1_ready),                       //       src1.ready
		.src1_valid          (cmd_xbar_demux_002_src1_valid),                       //           .valid
		.src1_data           (cmd_xbar_demux_002_src1_data),                        //           .data
		.src1_channel        (cmd_xbar_demux_002_src1_channel),                     //           .channel
		.src1_startofpacket  (cmd_xbar_demux_002_src1_startofpacket),               //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_002_src1_endofpacket),                 //           .endofpacket
		.src2_ready          (cmd_xbar_demux_002_src2_ready),                       //       src2.ready
		.src2_valid          (cmd_xbar_demux_002_src2_valid),                       //           .valid
		.src2_data           (cmd_xbar_demux_002_src2_data),                        //           .data
		.src2_channel        (cmd_xbar_demux_002_src2_channel),                     //           .channel
		.src2_startofpacket  (cmd_xbar_demux_002_src2_startofpacket),               //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_002_src2_endofpacket),                 //           .endofpacket
		.src3_ready          (cmd_xbar_demux_002_src3_ready),                       //       src3.ready
		.src3_valid          (cmd_xbar_demux_002_src3_valid),                       //           .valid
		.src3_data           (cmd_xbar_demux_002_src3_data),                        //           .data
		.src3_channel        (cmd_xbar_demux_002_src3_channel),                     //           .channel
		.src3_startofpacket  (cmd_xbar_demux_002_src3_startofpacket),               //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_002_src3_endofpacket),                 //           .endofpacket
		.src4_ready          (cmd_xbar_demux_002_src4_ready),                       //       src4.ready
		.src4_valid          (cmd_xbar_demux_002_src4_valid),                       //           .valid
		.src4_data           (cmd_xbar_demux_002_src4_data),                        //           .data
		.src4_channel        (cmd_xbar_demux_002_src4_channel),                     //           .channel
		.src4_startofpacket  (cmd_xbar_demux_002_src4_startofpacket),               //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_002_src4_endofpacket),                 //           .endofpacket
		.src5_ready          (cmd_xbar_demux_002_src5_ready),                       //       src5.ready
		.src5_valid          (cmd_xbar_demux_002_src5_valid),                       //           .valid
		.src5_data           (cmd_xbar_demux_002_src5_data),                        //           .data
		.src5_channel        (cmd_xbar_demux_002_src5_channel),                     //           .channel
		.src5_startofpacket  (cmd_xbar_demux_002_src5_startofpacket),               //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_002_src5_endofpacket),                 //           .endofpacket
		.src6_ready          (cmd_xbar_demux_002_src6_ready),                       //       src6.ready
		.src6_valid          (cmd_xbar_demux_002_src6_valid),                       //           .valid
		.src6_data           (cmd_xbar_demux_002_src6_data),                        //           .data
		.src6_channel        (cmd_xbar_demux_002_src6_channel),                     //           .channel
		.src6_startofpacket  (cmd_xbar_demux_002_src6_startofpacket),               //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_002_src6_endofpacket),                 //           .endofpacket
		.src7_ready          (cmd_xbar_demux_002_src7_ready),                       //       src7.ready
		.src7_valid          (cmd_xbar_demux_002_src7_valid),                       //           .valid
		.src7_data           (cmd_xbar_demux_002_src7_data),                        //           .data
		.src7_channel        (cmd_xbar_demux_002_src7_channel),                     //           .channel
		.src7_startofpacket  (cmd_xbar_demux_002_src7_startofpacket),               //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_002_src7_endofpacket),                 //           .endofpacket
		.src8_ready          (cmd_xbar_demux_002_src8_ready),                       //       src8.ready
		.src8_valid          (cmd_xbar_demux_002_src8_valid),                       //           .valid
		.src8_data           (cmd_xbar_demux_002_src8_data),                        //           .data
		.src8_channel        (cmd_xbar_demux_002_src8_channel),                     //           .channel
		.src8_startofpacket  (cmd_xbar_demux_002_src8_startofpacket),               //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_002_src8_endofpacket),                 //           .endofpacket
		.src9_ready          (cmd_xbar_demux_002_src9_ready),                       //       src9.ready
		.src9_valid          (cmd_xbar_demux_002_src9_valid),                       //           .valid
		.src9_data           (cmd_xbar_demux_002_src9_data),                        //           .data
		.src9_channel        (cmd_xbar_demux_002_src9_channel),                     //           .channel
		.src9_startofpacket  (cmd_xbar_demux_002_src9_startofpacket),               //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_002_src9_endofpacket),                 //           .endofpacket
		.src10_ready         (cmd_xbar_demux_002_src10_ready),                      //      src10.ready
		.src10_valid         (cmd_xbar_demux_002_src10_valid),                      //           .valid
		.src10_data          (cmd_xbar_demux_002_src10_data),                       //           .data
		.src10_channel       (cmd_xbar_demux_002_src10_channel),                    //           .channel
		.src10_startofpacket (cmd_xbar_demux_002_src10_startofpacket),              //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_002_src10_endofpacket),                //           .endofpacket
		.src11_ready         (cmd_xbar_demux_002_src11_ready),                      //      src11.ready
		.src11_valid         (cmd_xbar_demux_002_src11_valid),                      //           .valid
		.src11_data          (cmd_xbar_demux_002_src11_data),                       //           .data
		.src11_channel       (cmd_xbar_demux_002_src11_channel),                    //           .channel
		.src11_startofpacket (cmd_xbar_demux_002_src11_startofpacket),              //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_002_src11_endofpacket),                //           .endofpacket
		.src12_ready         (cmd_xbar_demux_002_src12_ready),                      //      src12.ready
		.src12_valid         (cmd_xbar_demux_002_src12_valid),                      //           .valid
		.src12_data          (cmd_xbar_demux_002_src12_data),                       //           .data
		.src12_channel       (cmd_xbar_demux_002_src12_channel),                    //           .channel
		.src12_startofpacket (cmd_xbar_demux_002_src12_startofpacket),              //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_002_src12_endofpacket),                //           .endofpacket
		.src13_ready         (cmd_xbar_demux_002_src13_ready),                      //      src13.ready
		.src13_valid         (cmd_xbar_demux_002_src13_valid),                      //           .valid
		.src13_data          (cmd_xbar_demux_002_src13_data),                       //           .data
		.src13_channel       (cmd_xbar_demux_002_src13_channel),                    //           .channel
		.src13_startofpacket (cmd_xbar_demux_002_src13_startofpacket),              //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_002_src13_endofpacket),                //           .endofpacket
		.src14_ready         (cmd_xbar_demux_002_src14_ready),                      //      src14.ready
		.src14_valid         (cmd_xbar_demux_002_src14_valid),                      //           .valid
		.src14_data          (cmd_xbar_demux_002_src14_data),                       //           .data
		.src14_channel       (cmd_xbar_demux_002_src14_channel),                    //           .channel
		.src14_startofpacket (cmd_xbar_demux_002_src14_startofpacket),              //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_002_src14_endofpacket),                //           .endofpacket
		.src15_ready         (cmd_xbar_demux_002_src15_ready),                      //      src15.ready
		.src15_valid         (cmd_xbar_demux_002_src15_valid),                      //           .valid
		.src15_data          (cmd_xbar_demux_002_src15_data),                       //           .data
		.src15_channel       (cmd_xbar_demux_002_src15_channel),                    //           .channel
		.src15_startofpacket (cmd_xbar_demux_002_src15_startofpacket),              //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_002_src15_endofpacket),                //           .endofpacket
		.src16_ready         (cmd_xbar_demux_002_src16_ready),                      //      src16.ready
		.src16_valid         (cmd_xbar_demux_002_src16_valid),                      //           .valid
		.src16_data          (cmd_xbar_demux_002_src16_data),                       //           .data
		.src16_channel       (cmd_xbar_demux_002_src16_channel),                    //           .channel
		.src16_startofpacket (cmd_xbar_demux_002_src16_startofpacket),              //           .startofpacket
		.src16_endofpacket   (cmd_xbar_demux_002_src16_endofpacket),                //           .endofpacket
		.src17_ready         (cmd_xbar_demux_002_src17_ready),                      //      src17.ready
		.src17_valid         (cmd_xbar_demux_002_src17_valid),                      //           .valid
		.src17_data          (cmd_xbar_demux_002_src17_data),                       //           .data
		.src17_channel       (cmd_xbar_demux_002_src17_channel),                    //           .channel
		.src17_startofpacket (cmd_xbar_demux_002_src17_startofpacket),              //           .startofpacket
		.src17_endofpacket   (cmd_xbar_demux_002_src17_endofpacket),                //           .endofpacket
		.src18_ready         (cmd_xbar_demux_002_src18_ready),                      //      src18.ready
		.src18_valid         (cmd_xbar_demux_002_src18_valid),                      //           .valid
		.src18_data          (cmd_xbar_demux_002_src18_data),                       //           .data
		.src18_channel       (cmd_xbar_demux_002_src18_channel),                    //           .channel
		.src18_startofpacket (cmd_xbar_demux_002_src18_startofpacket),              //           .startofpacket
		.src18_endofpacket   (cmd_xbar_demux_002_src18_endofpacket),                //           .endofpacket
		.src19_ready         (cmd_xbar_demux_002_src19_ready),                      //      src19.ready
		.src19_valid         (cmd_xbar_demux_002_src19_valid),                      //           .valid
		.src19_data          (cmd_xbar_demux_002_src19_data),                       //           .data
		.src19_channel       (cmd_xbar_demux_002_src19_channel),                    //           .channel
		.src19_startofpacket (cmd_xbar_demux_002_src19_startofpacket),              //           .startofpacket
		.src19_endofpacket   (cmd_xbar_demux_002_src19_endofpacket),                //           .endofpacket
		.src20_ready         (cmd_xbar_demux_002_src20_ready),                      //      src20.ready
		.src20_valid         (cmd_xbar_demux_002_src20_valid),                      //           .valid
		.src20_data          (cmd_xbar_demux_002_src20_data),                       //           .data
		.src20_channel       (cmd_xbar_demux_002_src20_channel),                    //           .channel
		.src20_startofpacket (cmd_xbar_demux_002_src20_startofpacket),              //           .startofpacket
		.src20_endofpacket   (cmd_xbar_demux_002_src20_endofpacket),                //           .endofpacket
		.src21_ready         (cmd_xbar_demux_002_src21_ready),                      //      src21.ready
		.src21_valid         (cmd_xbar_demux_002_src21_valid),                      //           .valid
		.src21_data          (cmd_xbar_demux_002_src21_data),                       //           .data
		.src21_channel       (cmd_xbar_demux_002_src21_channel),                    //           .channel
		.src21_startofpacket (cmd_xbar_demux_002_src21_startofpacket),              //           .startofpacket
		.src21_endofpacket   (cmd_xbar_demux_002_src21_endofpacket),                //           .endofpacket
		.src22_ready         (cmd_xbar_demux_002_src22_ready),                      //      src22.ready
		.src22_valid         (cmd_xbar_demux_002_src22_valid),                      //           .valid
		.src22_data          (cmd_xbar_demux_002_src22_data),                       //           .data
		.src22_channel       (cmd_xbar_demux_002_src22_channel),                    //           .channel
		.src22_startofpacket (cmd_xbar_demux_002_src22_startofpacket),              //           .startofpacket
		.src22_endofpacket   (cmd_xbar_demux_002_src22_endofpacket),                //           .endofpacket
		.src23_ready         (cmd_xbar_demux_002_src23_ready),                      //      src23.ready
		.src23_valid         (cmd_xbar_demux_002_src23_valid),                      //           .valid
		.src23_data          (cmd_xbar_demux_002_src23_data),                       //           .data
		.src23_channel       (cmd_xbar_demux_002_src23_channel),                    //           .channel
		.src23_startofpacket (cmd_xbar_demux_002_src23_startofpacket),              //           .startofpacket
		.src23_endofpacket   (cmd_xbar_demux_002_src23_endofpacket),                //           .endofpacket
		.src24_ready         (cmd_xbar_demux_002_src24_ready),                      //      src24.ready
		.src24_valid         (cmd_xbar_demux_002_src24_valid),                      //           .valid
		.src24_data          (cmd_xbar_demux_002_src24_data),                       //           .data
		.src24_channel       (cmd_xbar_demux_002_src24_channel),                    //           .channel
		.src24_startofpacket (cmd_xbar_demux_002_src24_startofpacket),              //           .startofpacket
		.src24_endofpacket   (cmd_xbar_demux_002_src24_endofpacket),                //           .endofpacket
		.src25_ready         (cmd_xbar_demux_002_src25_ready),                      //      src25.ready
		.src25_valid         (cmd_xbar_demux_002_src25_valid),                      //           .valid
		.src25_data          (cmd_xbar_demux_002_src25_data),                       //           .data
		.src25_channel       (cmd_xbar_demux_002_src25_channel),                    //           .channel
		.src25_startofpacket (cmd_xbar_demux_002_src25_startofpacket),              //           .startofpacket
		.src25_endofpacket   (cmd_xbar_demux_002_src25_endofpacket),                //           .endofpacket
		.src26_ready         (cmd_xbar_demux_002_src26_ready),                      //      src26.ready
		.src26_valid         (cmd_xbar_demux_002_src26_valid),                      //           .valid
		.src26_data          (cmd_xbar_demux_002_src26_data),                       //           .data
		.src26_channel       (cmd_xbar_demux_002_src26_channel),                    //           .channel
		.src26_startofpacket (cmd_xbar_demux_002_src26_startofpacket),              //           .startofpacket
		.src26_endofpacket   (cmd_xbar_demux_002_src26_endofpacket),                //           .endofpacket
		.src27_ready         (cmd_xbar_demux_002_src27_ready),                      //      src27.ready
		.src27_valid         (cmd_xbar_demux_002_src27_valid),                      //           .valid
		.src27_data          (cmd_xbar_demux_002_src27_data),                       //           .data
		.src27_channel       (cmd_xbar_demux_002_src27_channel),                    //           .channel
		.src27_startofpacket (cmd_xbar_demux_002_src27_startofpacket),              //           .startofpacket
		.src27_endofpacket   (cmd_xbar_demux_002_src27_endofpacket),                //           .endofpacket
		.src28_ready         (cmd_xbar_demux_002_src28_ready),                      //      src28.ready
		.src28_valid         (cmd_xbar_demux_002_src28_valid),                      //           .valid
		.src28_data          (cmd_xbar_demux_002_src28_data),                       //           .data
		.src28_channel       (cmd_xbar_demux_002_src28_channel),                    //           .channel
		.src28_startofpacket (cmd_xbar_demux_002_src28_startofpacket),              //           .startofpacket
		.src28_endofpacket   (cmd_xbar_demux_002_src28_endofpacket),                //           .endofpacket
		.src29_ready         (cmd_xbar_demux_002_src29_ready),                      //      src29.ready
		.src29_valid         (cmd_xbar_demux_002_src29_valid),                      //           .valid
		.src29_data          (cmd_xbar_demux_002_src29_data),                       //           .data
		.src29_channel       (cmd_xbar_demux_002_src29_channel),                    //           .channel
		.src29_startofpacket (cmd_xbar_demux_002_src29_startofpacket),              //           .startofpacket
		.src29_endofpacket   (cmd_xbar_demux_002_src29_endofpacket),                //           .endofpacket
		.src30_ready         (cmd_xbar_demux_002_src30_ready),                      //      src30.ready
		.src30_valid         (cmd_xbar_demux_002_src30_valid),                      //           .valid
		.src30_data          (cmd_xbar_demux_002_src30_data),                       //           .data
		.src30_channel       (cmd_xbar_demux_002_src30_channel),                    //           .channel
		.src30_startofpacket (cmd_xbar_demux_002_src30_startofpacket),              //           .startofpacket
		.src30_endofpacket   (cmd_xbar_demux_002_src30_endofpacket),                //           .endofpacket
		.src31_ready         (cmd_xbar_demux_002_src31_ready),                      //      src31.ready
		.src31_valid         (cmd_xbar_demux_002_src31_valid),                      //           .valid
		.src31_data          (cmd_xbar_demux_002_src31_data),                       //           .data
		.src31_channel       (cmd_xbar_demux_002_src31_channel),                    //           .channel
		.src31_startofpacket (cmd_xbar_demux_002_src31_startofpacket),              //           .startofpacket
		.src31_endofpacket   (cmd_xbar_demux_002_src31_endofpacket),                //           .endofpacket
		.src32_ready         (cmd_xbar_demux_002_src32_ready),                      //      src32.ready
		.src32_valid         (cmd_xbar_demux_002_src32_valid),                      //           .valid
		.src32_data          (cmd_xbar_demux_002_src32_data),                       //           .data
		.src32_channel       (cmd_xbar_demux_002_src32_channel),                    //           .channel
		.src32_startofpacket (cmd_xbar_demux_002_src32_startofpacket),              //           .startofpacket
		.src32_endofpacket   (cmd_xbar_demux_002_src32_endofpacket),                //           .endofpacket
		.src33_ready         (cmd_xbar_demux_002_src33_ready),                      //      src33.ready
		.src33_valid         (cmd_xbar_demux_002_src33_valid),                      //           .valid
		.src33_data          (cmd_xbar_demux_002_src33_data),                       //           .data
		.src33_channel       (cmd_xbar_demux_002_src33_channel),                    //           .channel
		.src33_startofpacket (cmd_xbar_demux_002_src33_startofpacket),              //           .startofpacket
		.src33_endofpacket   (cmd_xbar_demux_002_src33_endofpacket)                 //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_demux_003 cmd_xbar_demux_003 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_001_cmd_src_ready),                                        //       sink.ready
		.sink_channel        (limiter_001_cmd_src_channel),                                      //           .channel
		.sink_data           (limiter_001_cmd_src_data),                                         //           .data
		.sink_startofpacket  (limiter_001_cmd_src_startofpacket),                                //           .startofpacket
		.sink_endofpacket    (limiter_001_cmd_src_endofpacket),                                  //           .endofpacket
		.sink_valid          (limiter_001_cmd_valid_data),                                       // sink_valid.data
		.src0_ready          (cmd_xbar_demux_003_src0_ready),                                    //       src0.ready
		.src0_valid          (cmd_xbar_demux_003_src0_valid),                                    //           .valid
		.src0_data           (cmd_xbar_demux_003_src0_data),                                     //           .data
		.src0_channel        (cmd_xbar_demux_003_src0_channel),                                  //           .channel
		.src0_startofpacket  (cmd_xbar_demux_003_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_003_src0_endofpacket),                              //           .endofpacket
		.src1_ready          (cmd_xbar_demux_003_src1_ready),                                    //       src1.ready
		.src1_valid          (cmd_xbar_demux_003_src1_valid),                                    //           .valid
		.src1_data           (cmd_xbar_demux_003_src1_data),                                     //           .data
		.src1_channel        (cmd_xbar_demux_003_src1_channel),                                  //           .channel
		.src1_startofpacket  (cmd_xbar_demux_003_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_003_src1_endofpacket),                              //           .endofpacket
		.src2_ready          (cmd_xbar_demux_003_src2_ready),                                    //       src2.ready
		.src2_valid          (cmd_xbar_demux_003_src2_valid),                                    //           .valid
		.src2_data           (cmd_xbar_demux_003_src2_data),                                     //           .data
		.src2_channel        (cmd_xbar_demux_003_src2_channel),                                  //           .channel
		.src2_startofpacket  (cmd_xbar_demux_003_src2_startofpacket),                            //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_003_src2_endofpacket),                              //           .endofpacket
		.src3_ready          (cmd_xbar_demux_003_src3_ready),                                    //       src3.ready
		.src3_valid          (cmd_xbar_demux_003_src3_valid),                                    //           .valid
		.src3_data           (cmd_xbar_demux_003_src3_data),                                     //           .data
		.src3_channel        (cmd_xbar_demux_003_src3_channel),                                  //           .channel
		.src3_startofpacket  (cmd_xbar_demux_003_src3_startofpacket),                            //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_003_src3_endofpacket),                              //           .endofpacket
		.src4_ready          (cmd_xbar_demux_003_src4_ready),                                    //       src4.ready
		.src4_valid          (cmd_xbar_demux_003_src4_valid),                                    //           .valid
		.src4_data           (cmd_xbar_demux_003_src4_data),                                     //           .data
		.src4_channel        (cmd_xbar_demux_003_src4_channel),                                  //           .channel
		.src4_startofpacket  (cmd_xbar_demux_003_src4_startofpacket),                            //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_003_src4_endofpacket),                              //           .endofpacket
		.src5_ready          (cmd_xbar_demux_003_src5_ready),                                    //       src5.ready
		.src5_valid          (cmd_xbar_demux_003_src5_valid),                                    //           .valid
		.src5_data           (cmd_xbar_demux_003_src5_data),                                     //           .data
		.src5_channel        (cmd_xbar_demux_003_src5_channel),                                  //           .channel
		.src5_startofpacket  (cmd_xbar_demux_003_src5_startofpacket),                            //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_003_src5_endofpacket),                              //           .endofpacket
		.src6_ready          (cmd_xbar_demux_003_src6_ready),                                    //       src6.ready
		.src6_valid          (cmd_xbar_demux_003_src6_valid),                                    //           .valid
		.src6_data           (cmd_xbar_demux_003_src6_data),                                     //           .data
		.src6_channel        (cmd_xbar_demux_003_src6_channel),                                  //           .channel
		.src6_startofpacket  (cmd_xbar_demux_003_src6_startofpacket),                            //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_003_src6_endofpacket),                              //           .endofpacket
		.src7_ready          (cmd_xbar_demux_003_src7_ready),                                    //       src7.ready
		.src7_valid          (cmd_xbar_demux_003_src7_valid),                                    //           .valid
		.src7_data           (cmd_xbar_demux_003_src7_data),                                     //           .data
		.src7_channel        (cmd_xbar_demux_003_src7_channel),                                  //           .channel
		.src7_startofpacket  (cmd_xbar_demux_003_src7_startofpacket),                            //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_003_src7_endofpacket),                              //           .endofpacket
		.src8_ready          (cmd_xbar_demux_003_src8_ready),                                    //       src8.ready
		.src8_valid          (cmd_xbar_demux_003_src8_valid),                                    //           .valid
		.src8_data           (cmd_xbar_demux_003_src8_data),                                     //           .data
		.src8_channel        (cmd_xbar_demux_003_src8_channel),                                  //           .channel
		.src8_startofpacket  (cmd_xbar_demux_003_src8_startofpacket),                            //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_003_src8_endofpacket),                              //           .endofpacket
		.src9_ready          (cmd_xbar_demux_003_src9_ready),                                    //       src9.ready
		.src9_valid          (cmd_xbar_demux_003_src9_valid),                                    //           .valid
		.src9_data           (cmd_xbar_demux_003_src9_data),                                     //           .data
		.src9_channel        (cmd_xbar_demux_003_src9_channel),                                  //           .channel
		.src9_startofpacket  (cmd_xbar_demux_003_src9_startofpacket),                            //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_003_src9_endofpacket),                              //           .endofpacket
		.src10_ready         (cmd_xbar_demux_003_src10_ready),                                   //      src10.ready
		.src10_valid         (cmd_xbar_demux_003_src10_valid),                                   //           .valid
		.src10_data          (cmd_xbar_demux_003_src10_data),                                    //           .data
		.src10_channel       (cmd_xbar_demux_003_src10_channel),                                 //           .channel
		.src10_startofpacket (cmd_xbar_demux_003_src10_startofpacket),                           //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_003_src10_endofpacket),                             //           .endofpacket
		.src11_ready         (cmd_xbar_demux_003_src11_ready),                                   //      src11.ready
		.src11_valid         (cmd_xbar_demux_003_src11_valid),                                   //           .valid
		.src11_data          (cmd_xbar_demux_003_src11_data),                                    //           .data
		.src11_channel       (cmd_xbar_demux_003_src11_channel),                                 //           .channel
		.src11_startofpacket (cmd_xbar_demux_003_src11_startofpacket),                           //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_003_src11_endofpacket),                             //           .endofpacket
		.src12_ready         (cmd_xbar_demux_003_src12_ready),                                   //      src12.ready
		.src12_valid         (cmd_xbar_demux_003_src12_valid),                                   //           .valid
		.src12_data          (cmd_xbar_demux_003_src12_data),                                    //           .data
		.src12_channel       (cmd_xbar_demux_003_src12_channel),                                 //           .channel
		.src12_startofpacket (cmd_xbar_demux_003_src12_startofpacket),                           //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_003_src12_endofpacket),                             //           .endofpacket
		.src13_ready         (cmd_xbar_demux_003_src13_ready),                                   //      src13.ready
		.src13_valid         (cmd_xbar_demux_003_src13_valid),                                   //           .valid
		.src13_data          (cmd_xbar_demux_003_src13_data),                                    //           .data
		.src13_channel       (cmd_xbar_demux_003_src13_channel),                                 //           .channel
		.src13_startofpacket (cmd_xbar_demux_003_src13_startofpacket),                           //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_003_src13_endofpacket),                             //           .endofpacket
		.src14_ready         (cmd_xbar_demux_003_src14_ready),                                   //      src14.ready
		.src14_valid         (cmd_xbar_demux_003_src14_valid),                                   //           .valid
		.src14_data          (cmd_xbar_demux_003_src14_data),                                    //           .data
		.src14_channel       (cmd_xbar_demux_003_src14_channel),                                 //           .channel
		.src14_startofpacket (cmd_xbar_demux_003_src14_startofpacket),                           //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_003_src14_endofpacket),                             //           .endofpacket
		.src15_ready         (cmd_xbar_demux_003_src15_ready),                                   //      src15.ready
		.src15_valid         (cmd_xbar_demux_003_src15_valid),                                   //           .valid
		.src15_data          (cmd_xbar_demux_003_src15_data),                                    //           .data
		.src15_channel       (cmd_xbar_demux_003_src15_channel),                                 //           .channel
		.src15_startofpacket (cmd_xbar_demux_003_src15_startofpacket),                           //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_003_src15_endofpacket),                             //           .endofpacket
		.src16_ready         (cmd_xbar_demux_003_src16_ready),                                   //      src16.ready
		.src16_valid         (cmd_xbar_demux_003_src16_valid),                                   //           .valid
		.src16_data          (cmd_xbar_demux_003_src16_data),                                    //           .data
		.src16_channel       (cmd_xbar_demux_003_src16_channel),                                 //           .channel
		.src16_startofpacket (cmd_xbar_demux_003_src16_startofpacket),                           //           .startofpacket
		.src16_endofpacket   (cmd_xbar_demux_003_src16_endofpacket),                             //           .endofpacket
		.src17_ready         (cmd_xbar_demux_003_src17_ready),                                   //      src17.ready
		.src17_valid         (cmd_xbar_demux_003_src17_valid),                                   //           .valid
		.src17_data          (cmd_xbar_demux_003_src17_data),                                    //           .data
		.src17_channel       (cmd_xbar_demux_003_src17_channel),                                 //           .channel
		.src17_startofpacket (cmd_xbar_demux_003_src17_startofpacket),                           //           .startofpacket
		.src17_endofpacket   (cmd_xbar_demux_003_src17_endofpacket),                             //           .endofpacket
		.src18_ready         (cmd_xbar_demux_003_src18_ready),                                   //      src18.ready
		.src18_valid         (cmd_xbar_demux_003_src18_valid),                                   //           .valid
		.src18_data          (cmd_xbar_demux_003_src18_data),                                    //           .data
		.src18_channel       (cmd_xbar_demux_003_src18_channel),                                 //           .channel
		.src18_startofpacket (cmd_xbar_demux_003_src18_startofpacket),                           //           .startofpacket
		.src18_endofpacket   (cmd_xbar_demux_003_src18_endofpacket),                             //           .endofpacket
		.src19_ready         (cmd_xbar_demux_003_src19_ready),                                   //      src19.ready
		.src19_valid         (cmd_xbar_demux_003_src19_valid),                                   //           .valid
		.src19_data          (cmd_xbar_demux_003_src19_data),                                    //           .data
		.src19_channel       (cmd_xbar_demux_003_src19_channel),                                 //           .channel
		.src19_startofpacket (cmd_xbar_demux_003_src19_startofpacket),                           //           .startofpacket
		.src19_endofpacket   (cmd_xbar_demux_003_src19_endofpacket),                             //           .endofpacket
		.src20_ready         (cmd_xbar_demux_003_src20_ready),                                   //      src20.ready
		.src20_valid         (cmd_xbar_demux_003_src20_valid),                                   //           .valid
		.src20_data          (cmd_xbar_demux_003_src20_data),                                    //           .data
		.src20_channel       (cmd_xbar_demux_003_src20_channel),                                 //           .channel
		.src20_startofpacket (cmd_xbar_demux_003_src20_startofpacket),                           //           .startofpacket
		.src20_endofpacket   (cmd_xbar_demux_003_src20_endofpacket),                             //           .endofpacket
		.src21_ready         (cmd_xbar_demux_003_src21_ready),                                   //      src21.ready
		.src21_valid         (cmd_xbar_demux_003_src21_valid),                                   //           .valid
		.src21_data          (cmd_xbar_demux_003_src21_data),                                    //           .data
		.src21_channel       (cmd_xbar_demux_003_src21_channel),                                 //           .channel
		.src21_startofpacket (cmd_xbar_demux_003_src21_startofpacket),                           //           .startofpacket
		.src21_endofpacket   (cmd_xbar_demux_003_src21_endofpacket),                             //           .endofpacket
		.src22_ready         (cmd_xbar_demux_003_src22_ready),                                   //      src22.ready
		.src22_valid         (cmd_xbar_demux_003_src22_valid),                                   //           .valid
		.src22_data          (cmd_xbar_demux_003_src22_data),                                    //           .data
		.src22_channel       (cmd_xbar_demux_003_src22_channel),                                 //           .channel
		.src22_startofpacket (cmd_xbar_demux_003_src22_startofpacket),                           //           .startofpacket
		.src22_endofpacket   (cmd_xbar_demux_003_src22_endofpacket),                             //           .endofpacket
		.src23_ready         (cmd_xbar_demux_003_src23_ready),                                   //      src23.ready
		.src23_valid         (cmd_xbar_demux_003_src23_valid),                                   //           .valid
		.src23_data          (cmd_xbar_demux_003_src23_data),                                    //           .data
		.src23_channel       (cmd_xbar_demux_003_src23_channel),                                 //           .channel
		.src23_startofpacket (cmd_xbar_demux_003_src23_startofpacket),                           //           .startofpacket
		.src23_endofpacket   (cmd_xbar_demux_003_src23_endofpacket),                             //           .endofpacket
		.src24_ready         (cmd_xbar_demux_003_src24_ready),                                   //      src24.ready
		.src24_valid         (cmd_xbar_demux_003_src24_valid),                                   //           .valid
		.src24_data          (cmd_xbar_demux_003_src24_data),                                    //           .data
		.src24_channel       (cmd_xbar_demux_003_src24_channel),                                 //           .channel
		.src24_startofpacket (cmd_xbar_demux_003_src24_startofpacket),                           //           .startofpacket
		.src24_endofpacket   (cmd_xbar_demux_003_src24_endofpacket),                             //           .endofpacket
		.src25_ready         (cmd_xbar_demux_003_src25_ready),                                   //      src25.ready
		.src25_valid         (cmd_xbar_demux_003_src25_valid),                                   //           .valid
		.src25_data          (cmd_xbar_demux_003_src25_data),                                    //           .data
		.src25_channel       (cmd_xbar_demux_003_src25_channel),                                 //           .channel
		.src25_startofpacket (cmd_xbar_demux_003_src25_startofpacket),                           //           .startofpacket
		.src25_endofpacket   (cmd_xbar_demux_003_src25_endofpacket),                             //           .endofpacket
		.src26_ready         (cmd_xbar_demux_003_src26_ready),                                   //      src26.ready
		.src26_valid         (cmd_xbar_demux_003_src26_valid),                                   //           .valid
		.src26_data          (cmd_xbar_demux_003_src26_data),                                    //           .data
		.src26_channel       (cmd_xbar_demux_003_src26_channel),                                 //           .channel
		.src26_startofpacket (cmd_xbar_demux_003_src26_startofpacket),                           //           .startofpacket
		.src26_endofpacket   (cmd_xbar_demux_003_src26_endofpacket),                             //           .endofpacket
		.src27_ready         (cmd_xbar_demux_003_src27_ready),                                   //      src27.ready
		.src27_valid         (cmd_xbar_demux_003_src27_valid),                                   //           .valid
		.src27_data          (cmd_xbar_demux_003_src27_data),                                    //           .data
		.src27_channel       (cmd_xbar_demux_003_src27_channel),                                 //           .channel
		.src27_startofpacket (cmd_xbar_demux_003_src27_startofpacket),                           //           .startofpacket
		.src27_endofpacket   (cmd_xbar_demux_003_src27_endofpacket),                             //           .endofpacket
		.src28_ready         (cmd_xbar_demux_003_src28_ready),                                   //      src28.ready
		.src28_valid         (cmd_xbar_demux_003_src28_valid),                                   //           .valid
		.src28_data          (cmd_xbar_demux_003_src28_data),                                    //           .data
		.src28_channel       (cmd_xbar_demux_003_src28_channel),                                 //           .channel
		.src28_startofpacket (cmd_xbar_demux_003_src28_startofpacket),                           //           .startofpacket
		.src28_endofpacket   (cmd_xbar_demux_003_src28_endofpacket),                             //           .endofpacket
		.src29_ready         (cmd_xbar_demux_003_src29_ready),                                   //      src29.ready
		.src29_valid         (cmd_xbar_demux_003_src29_valid),                                   //           .valid
		.src29_data          (cmd_xbar_demux_003_src29_data),                                    //           .data
		.src29_channel       (cmd_xbar_demux_003_src29_channel),                                 //           .channel
		.src29_startofpacket (cmd_xbar_demux_003_src29_startofpacket),                           //           .startofpacket
		.src29_endofpacket   (cmd_xbar_demux_003_src29_endofpacket),                             //           .endofpacket
		.src30_ready         (cmd_xbar_demux_003_src30_ready),                                   //      src30.ready
		.src30_valid         (cmd_xbar_demux_003_src30_valid),                                   //           .valid
		.src30_data          (cmd_xbar_demux_003_src30_data),                                    //           .data
		.src30_channel       (cmd_xbar_demux_003_src30_channel),                                 //           .channel
		.src30_startofpacket (cmd_xbar_demux_003_src30_startofpacket),                           //           .startofpacket
		.src30_endofpacket   (cmd_xbar_demux_003_src30_endofpacket),                             //           .endofpacket
		.src31_ready         (cmd_xbar_demux_003_src31_ready),                                   //      src31.ready
		.src31_valid         (cmd_xbar_demux_003_src31_valid),                                   //           .valid
		.src31_data          (cmd_xbar_demux_003_src31_data),                                    //           .data
		.src31_channel       (cmd_xbar_demux_003_src31_channel),                                 //           .channel
		.src31_startofpacket (cmd_xbar_demux_003_src31_startofpacket),                           //           .startofpacket
		.src31_endofpacket   (cmd_xbar_demux_003_src31_endofpacket)                              //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_demux_003 cmd_xbar_demux_004 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_002_cmd_src_ready),                                        //       sink.ready
		.sink_channel        (limiter_002_cmd_src_channel),                                      //           .channel
		.sink_data           (limiter_002_cmd_src_data),                                         //           .data
		.sink_startofpacket  (limiter_002_cmd_src_startofpacket),                                //           .startofpacket
		.sink_endofpacket    (limiter_002_cmd_src_endofpacket),                                  //           .endofpacket
		.sink_valid          (limiter_002_cmd_valid_data),                                       // sink_valid.data
		.src0_ready          (cmd_xbar_demux_004_src0_ready),                                    //       src0.ready
		.src0_valid          (cmd_xbar_demux_004_src0_valid),                                    //           .valid
		.src0_data           (cmd_xbar_demux_004_src0_data),                                     //           .data
		.src0_channel        (cmd_xbar_demux_004_src0_channel),                                  //           .channel
		.src0_startofpacket  (cmd_xbar_demux_004_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_004_src0_endofpacket),                              //           .endofpacket
		.src1_ready          (cmd_xbar_demux_004_src1_ready),                                    //       src1.ready
		.src1_valid          (cmd_xbar_demux_004_src1_valid),                                    //           .valid
		.src1_data           (cmd_xbar_demux_004_src1_data),                                     //           .data
		.src1_channel        (cmd_xbar_demux_004_src1_channel),                                  //           .channel
		.src1_startofpacket  (cmd_xbar_demux_004_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_004_src1_endofpacket),                              //           .endofpacket
		.src2_ready          (cmd_xbar_demux_004_src2_ready),                                    //       src2.ready
		.src2_valid          (cmd_xbar_demux_004_src2_valid),                                    //           .valid
		.src2_data           (cmd_xbar_demux_004_src2_data),                                     //           .data
		.src2_channel        (cmd_xbar_demux_004_src2_channel),                                  //           .channel
		.src2_startofpacket  (cmd_xbar_demux_004_src2_startofpacket),                            //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_004_src2_endofpacket),                              //           .endofpacket
		.src3_ready          (cmd_xbar_demux_004_src3_ready),                                    //       src3.ready
		.src3_valid          (cmd_xbar_demux_004_src3_valid),                                    //           .valid
		.src3_data           (cmd_xbar_demux_004_src3_data),                                     //           .data
		.src3_channel        (cmd_xbar_demux_004_src3_channel),                                  //           .channel
		.src3_startofpacket  (cmd_xbar_demux_004_src3_startofpacket),                            //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_004_src3_endofpacket),                              //           .endofpacket
		.src4_ready          (cmd_xbar_demux_004_src4_ready),                                    //       src4.ready
		.src4_valid          (cmd_xbar_demux_004_src4_valid),                                    //           .valid
		.src4_data           (cmd_xbar_demux_004_src4_data),                                     //           .data
		.src4_channel        (cmd_xbar_demux_004_src4_channel),                                  //           .channel
		.src4_startofpacket  (cmd_xbar_demux_004_src4_startofpacket),                            //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_004_src4_endofpacket),                              //           .endofpacket
		.src5_ready          (cmd_xbar_demux_004_src5_ready),                                    //       src5.ready
		.src5_valid          (cmd_xbar_demux_004_src5_valid),                                    //           .valid
		.src5_data           (cmd_xbar_demux_004_src5_data),                                     //           .data
		.src5_channel        (cmd_xbar_demux_004_src5_channel),                                  //           .channel
		.src5_startofpacket  (cmd_xbar_demux_004_src5_startofpacket),                            //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_004_src5_endofpacket),                              //           .endofpacket
		.src6_ready          (cmd_xbar_demux_004_src6_ready),                                    //       src6.ready
		.src6_valid          (cmd_xbar_demux_004_src6_valid),                                    //           .valid
		.src6_data           (cmd_xbar_demux_004_src6_data),                                     //           .data
		.src6_channel        (cmd_xbar_demux_004_src6_channel),                                  //           .channel
		.src6_startofpacket  (cmd_xbar_demux_004_src6_startofpacket),                            //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_004_src6_endofpacket),                              //           .endofpacket
		.src7_ready          (cmd_xbar_demux_004_src7_ready),                                    //       src7.ready
		.src7_valid          (cmd_xbar_demux_004_src7_valid),                                    //           .valid
		.src7_data           (cmd_xbar_demux_004_src7_data),                                     //           .data
		.src7_channel        (cmd_xbar_demux_004_src7_channel),                                  //           .channel
		.src7_startofpacket  (cmd_xbar_demux_004_src7_startofpacket),                            //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_004_src7_endofpacket),                              //           .endofpacket
		.src8_ready          (cmd_xbar_demux_004_src8_ready),                                    //       src8.ready
		.src8_valid          (cmd_xbar_demux_004_src8_valid),                                    //           .valid
		.src8_data           (cmd_xbar_demux_004_src8_data),                                     //           .data
		.src8_channel        (cmd_xbar_demux_004_src8_channel),                                  //           .channel
		.src8_startofpacket  (cmd_xbar_demux_004_src8_startofpacket),                            //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_004_src8_endofpacket),                              //           .endofpacket
		.src9_ready          (cmd_xbar_demux_004_src9_ready),                                    //       src9.ready
		.src9_valid          (cmd_xbar_demux_004_src9_valid),                                    //           .valid
		.src9_data           (cmd_xbar_demux_004_src9_data),                                     //           .data
		.src9_channel        (cmd_xbar_demux_004_src9_channel),                                  //           .channel
		.src9_startofpacket  (cmd_xbar_demux_004_src9_startofpacket),                            //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_004_src9_endofpacket),                              //           .endofpacket
		.src10_ready         (cmd_xbar_demux_004_src10_ready),                                   //      src10.ready
		.src10_valid         (cmd_xbar_demux_004_src10_valid),                                   //           .valid
		.src10_data          (cmd_xbar_demux_004_src10_data),                                    //           .data
		.src10_channel       (cmd_xbar_demux_004_src10_channel),                                 //           .channel
		.src10_startofpacket (cmd_xbar_demux_004_src10_startofpacket),                           //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_004_src10_endofpacket),                             //           .endofpacket
		.src11_ready         (cmd_xbar_demux_004_src11_ready),                                   //      src11.ready
		.src11_valid         (cmd_xbar_demux_004_src11_valid),                                   //           .valid
		.src11_data          (cmd_xbar_demux_004_src11_data),                                    //           .data
		.src11_channel       (cmd_xbar_demux_004_src11_channel),                                 //           .channel
		.src11_startofpacket (cmd_xbar_demux_004_src11_startofpacket),                           //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_004_src11_endofpacket),                             //           .endofpacket
		.src12_ready         (cmd_xbar_demux_004_src12_ready),                                   //      src12.ready
		.src12_valid         (cmd_xbar_demux_004_src12_valid),                                   //           .valid
		.src12_data          (cmd_xbar_demux_004_src12_data),                                    //           .data
		.src12_channel       (cmd_xbar_demux_004_src12_channel),                                 //           .channel
		.src12_startofpacket (cmd_xbar_demux_004_src12_startofpacket),                           //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_004_src12_endofpacket),                             //           .endofpacket
		.src13_ready         (cmd_xbar_demux_004_src13_ready),                                   //      src13.ready
		.src13_valid         (cmd_xbar_demux_004_src13_valid),                                   //           .valid
		.src13_data          (cmd_xbar_demux_004_src13_data),                                    //           .data
		.src13_channel       (cmd_xbar_demux_004_src13_channel),                                 //           .channel
		.src13_startofpacket (cmd_xbar_demux_004_src13_startofpacket),                           //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_004_src13_endofpacket),                             //           .endofpacket
		.src14_ready         (cmd_xbar_demux_004_src14_ready),                                   //      src14.ready
		.src14_valid         (cmd_xbar_demux_004_src14_valid),                                   //           .valid
		.src14_data          (cmd_xbar_demux_004_src14_data),                                    //           .data
		.src14_channel       (cmd_xbar_demux_004_src14_channel),                                 //           .channel
		.src14_startofpacket (cmd_xbar_demux_004_src14_startofpacket),                           //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_004_src14_endofpacket),                             //           .endofpacket
		.src15_ready         (cmd_xbar_demux_004_src15_ready),                                   //      src15.ready
		.src15_valid         (cmd_xbar_demux_004_src15_valid),                                   //           .valid
		.src15_data          (cmd_xbar_demux_004_src15_data),                                    //           .data
		.src15_channel       (cmd_xbar_demux_004_src15_channel),                                 //           .channel
		.src15_startofpacket (cmd_xbar_demux_004_src15_startofpacket),                           //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_004_src15_endofpacket),                             //           .endofpacket
		.src16_ready         (cmd_xbar_demux_004_src16_ready),                                   //      src16.ready
		.src16_valid         (cmd_xbar_demux_004_src16_valid),                                   //           .valid
		.src16_data          (cmd_xbar_demux_004_src16_data),                                    //           .data
		.src16_channel       (cmd_xbar_demux_004_src16_channel),                                 //           .channel
		.src16_startofpacket (cmd_xbar_demux_004_src16_startofpacket),                           //           .startofpacket
		.src16_endofpacket   (cmd_xbar_demux_004_src16_endofpacket),                             //           .endofpacket
		.src17_ready         (cmd_xbar_demux_004_src17_ready),                                   //      src17.ready
		.src17_valid         (cmd_xbar_demux_004_src17_valid),                                   //           .valid
		.src17_data          (cmd_xbar_demux_004_src17_data),                                    //           .data
		.src17_channel       (cmd_xbar_demux_004_src17_channel),                                 //           .channel
		.src17_startofpacket (cmd_xbar_demux_004_src17_startofpacket),                           //           .startofpacket
		.src17_endofpacket   (cmd_xbar_demux_004_src17_endofpacket),                             //           .endofpacket
		.src18_ready         (cmd_xbar_demux_004_src18_ready),                                   //      src18.ready
		.src18_valid         (cmd_xbar_demux_004_src18_valid),                                   //           .valid
		.src18_data          (cmd_xbar_demux_004_src18_data),                                    //           .data
		.src18_channel       (cmd_xbar_demux_004_src18_channel),                                 //           .channel
		.src18_startofpacket (cmd_xbar_demux_004_src18_startofpacket),                           //           .startofpacket
		.src18_endofpacket   (cmd_xbar_demux_004_src18_endofpacket),                             //           .endofpacket
		.src19_ready         (cmd_xbar_demux_004_src19_ready),                                   //      src19.ready
		.src19_valid         (cmd_xbar_demux_004_src19_valid),                                   //           .valid
		.src19_data          (cmd_xbar_demux_004_src19_data),                                    //           .data
		.src19_channel       (cmd_xbar_demux_004_src19_channel),                                 //           .channel
		.src19_startofpacket (cmd_xbar_demux_004_src19_startofpacket),                           //           .startofpacket
		.src19_endofpacket   (cmd_xbar_demux_004_src19_endofpacket),                             //           .endofpacket
		.src20_ready         (cmd_xbar_demux_004_src20_ready),                                   //      src20.ready
		.src20_valid         (cmd_xbar_demux_004_src20_valid),                                   //           .valid
		.src20_data          (cmd_xbar_demux_004_src20_data),                                    //           .data
		.src20_channel       (cmd_xbar_demux_004_src20_channel),                                 //           .channel
		.src20_startofpacket (cmd_xbar_demux_004_src20_startofpacket),                           //           .startofpacket
		.src20_endofpacket   (cmd_xbar_demux_004_src20_endofpacket),                             //           .endofpacket
		.src21_ready         (cmd_xbar_demux_004_src21_ready),                                   //      src21.ready
		.src21_valid         (cmd_xbar_demux_004_src21_valid),                                   //           .valid
		.src21_data          (cmd_xbar_demux_004_src21_data),                                    //           .data
		.src21_channel       (cmd_xbar_demux_004_src21_channel),                                 //           .channel
		.src21_startofpacket (cmd_xbar_demux_004_src21_startofpacket),                           //           .startofpacket
		.src21_endofpacket   (cmd_xbar_demux_004_src21_endofpacket),                             //           .endofpacket
		.src22_ready         (cmd_xbar_demux_004_src22_ready),                                   //      src22.ready
		.src22_valid         (cmd_xbar_demux_004_src22_valid),                                   //           .valid
		.src22_data          (cmd_xbar_demux_004_src22_data),                                    //           .data
		.src22_channel       (cmd_xbar_demux_004_src22_channel),                                 //           .channel
		.src22_startofpacket (cmd_xbar_demux_004_src22_startofpacket),                           //           .startofpacket
		.src22_endofpacket   (cmd_xbar_demux_004_src22_endofpacket),                             //           .endofpacket
		.src23_ready         (cmd_xbar_demux_004_src23_ready),                                   //      src23.ready
		.src23_valid         (cmd_xbar_demux_004_src23_valid),                                   //           .valid
		.src23_data          (cmd_xbar_demux_004_src23_data),                                    //           .data
		.src23_channel       (cmd_xbar_demux_004_src23_channel),                                 //           .channel
		.src23_startofpacket (cmd_xbar_demux_004_src23_startofpacket),                           //           .startofpacket
		.src23_endofpacket   (cmd_xbar_demux_004_src23_endofpacket),                             //           .endofpacket
		.src24_ready         (cmd_xbar_demux_004_src24_ready),                                   //      src24.ready
		.src24_valid         (cmd_xbar_demux_004_src24_valid),                                   //           .valid
		.src24_data          (cmd_xbar_demux_004_src24_data),                                    //           .data
		.src24_channel       (cmd_xbar_demux_004_src24_channel),                                 //           .channel
		.src24_startofpacket (cmd_xbar_demux_004_src24_startofpacket),                           //           .startofpacket
		.src24_endofpacket   (cmd_xbar_demux_004_src24_endofpacket),                             //           .endofpacket
		.src25_ready         (cmd_xbar_demux_004_src25_ready),                                   //      src25.ready
		.src25_valid         (cmd_xbar_demux_004_src25_valid),                                   //           .valid
		.src25_data          (cmd_xbar_demux_004_src25_data),                                    //           .data
		.src25_channel       (cmd_xbar_demux_004_src25_channel),                                 //           .channel
		.src25_startofpacket (cmd_xbar_demux_004_src25_startofpacket),                           //           .startofpacket
		.src25_endofpacket   (cmd_xbar_demux_004_src25_endofpacket),                             //           .endofpacket
		.src26_ready         (cmd_xbar_demux_004_src26_ready),                                   //      src26.ready
		.src26_valid         (cmd_xbar_demux_004_src26_valid),                                   //           .valid
		.src26_data          (cmd_xbar_demux_004_src26_data),                                    //           .data
		.src26_channel       (cmd_xbar_demux_004_src26_channel),                                 //           .channel
		.src26_startofpacket (cmd_xbar_demux_004_src26_startofpacket),                           //           .startofpacket
		.src26_endofpacket   (cmd_xbar_demux_004_src26_endofpacket),                             //           .endofpacket
		.src27_ready         (cmd_xbar_demux_004_src27_ready),                                   //      src27.ready
		.src27_valid         (cmd_xbar_demux_004_src27_valid),                                   //           .valid
		.src27_data          (cmd_xbar_demux_004_src27_data),                                    //           .data
		.src27_channel       (cmd_xbar_demux_004_src27_channel),                                 //           .channel
		.src27_startofpacket (cmd_xbar_demux_004_src27_startofpacket),                           //           .startofpacket
		.src27_endofpacket   (cmd_xbar_demux_004_src27_endofpacket),                             //           .endofpacket
		.src28_ready         (cmd_xbar_demux_004_src28_ready),                                   //      src28.ready
		.src28_valid         (cmd_xbar_demux_004_src28_valid),                                   //           .valid
		.src28_data          (cmd_xbar_demux_004_src28_data),                                    //           .data
		.src28_channel       (cmd_xbar_demux_004_src28_channel),                                 //           .channel
		.src28_startofpacket (cmd_xbar_demux_004_src28_startofpacket),                           //           .startofpacket
		.src28_endofpacket   (cmd_xbar_demux_004_src28_endofpacket),                             //           .endofpacket
		.src29_ready         (cmd_xbar_demux_004_src29_ready),                                   //      src29.ready
		.src29_valid         (cmd_xbar_demux_004_src29_valid),                                   //           .valid
		.src29_data          (cmd_xbar_demux_004_src29_data),                                    //           .data
		.src29_channel       (cmd_xbar_demux_004_src29_channel),                                 //           .channel
		.src29_startofpacket (cmd_xbar_demux_004_src29_startofpacket),                           //           .startofpacket
		.src29_endofpacket   (cmd_xbar_demux_004_src29_endofpacket),                             //           .endofpacket
		.src30_ready         (cmd_xbar_demux_004_src30_ready),                                   //      src30.ready
		.src30_valid         (cmd_xbar_demux_004_src30_valid),                                   //           .valid
		.src30_data          (cmd_xbar_demux_004_src30_data),                                    //           .data
		.src30_channel       (cmd_xbar_demux_004_src30_channel),                                 //           .channel
		.src30_startofpacket (cmd_xbar_demux_004_src30_startofpacket),                           //           .startofpacket
		.src30_endofpacket   (cmd_xbar_demux_004_src30_endofpacket),                             //           .endofpacket
		.src31_ready         (cmd_xbar_demux_004_src31_ready),                                   //      src31.ready
		.src31_valid         (cmd_xbar_demux_004_src31_valid),                                   //           .valid
		.src31_data          (cmd_xbar_demux_004_src31_data),                                    //           .data
		.src31_channel       (cmd_xbar_demux_004_src31_channel),                                 //           .channel
		.src31_startofpacket (cmd_xbar_demux_004_src31_startofpacket),                           //           .startofpacket
		.src31_endofpacket   (cmd_xbar_demux_004_src31_endofpacket)                              //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                              //          .valid
		.src_data            (cmd_xbar_mux_src_data),                               //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (width_adapter_src_ready),                             //     sink2.ready
		.sink2_valid         (width_adapter_src_valid),                             //          .valid
		.sink2_channel       (width_adapter_src_channel),                           //          .channel
		.sink2_data          (width_adapter_src_data),                              //          .data
		.sink2_startofpacket (width_adapter_src_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (width_adapter_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src1_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src1_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src1_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src0_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src0_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src0_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src0_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src0_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src0_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src0_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_002 cmd_xbar_mux_002 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src2_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src2_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src2_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_003 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src3_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src3_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src3_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src3_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src3_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src1_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src1_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src1_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src1_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src1_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src1_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src1_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_004 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src4_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src4_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src4_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src4_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src4_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src2_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src2_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src2_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src2_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src2_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src2_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src2_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src2_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src2_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_005 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_005_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src5_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src5_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src5_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src5_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src5_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src5_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src3_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src3_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src3_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src3_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src3_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src3_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src3_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src3_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src3_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src3_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src3_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src3_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_006 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_006_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src6_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src6_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src6_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src6_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src6_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src6_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src4_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src4_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src4_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src4_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src4_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src4_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src4_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src4_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src4_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src4_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src4_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src4_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_007 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_007_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src7_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src7_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src7_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src7_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src7_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src7_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src5_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src5_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src5_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src5_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src5_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src5_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src5_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src5_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src5_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src5_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src5_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src5_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_008 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_008_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src8_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src8_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src8_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src8_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src8_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src8_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src6_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src6_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src6_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src6_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src6_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src6_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src6_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src6_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src6_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src6_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src6_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src6_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_009 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_009_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src9_ready),                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src9_valid),                       //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src9_channel),                     //          .channel
		.sink0_data          (cmd_xbar_demux_002_src9_data),                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src9_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src9_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src7_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src7_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src7_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src7_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src7_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src7_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src7_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src7_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src7_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src7_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src7_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src7_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_010 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_010_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src10_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src10_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src10_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src10_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src10_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src10_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src8_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src8_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src8_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src8_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src8_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src8_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src8_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src8_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src8_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src8_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src8_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src8_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_011 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_011_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_011_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_011_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_011_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_011_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src11_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src11_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src11_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src11_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src11_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src11_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src9_ready),                       //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src9_valid),                       //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src9_channel),                     //          .channel
		.sink1_data          (cmd_xbar_demux_003_src9_data),                        //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src9_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src9_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src9_ready),                       //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src9_valid),                       //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src9_channel),                     //          .channel
		.sink2_data          (cmd_xbar_demux_004_src9_data),                        //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src9_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src9_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_012 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_012_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_012_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_012_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_012_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_012_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src12_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src12_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src12_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src12_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src12_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src12_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src10_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src10_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src10_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src10_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src10_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src10_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src10_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src10_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src10_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src10_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src10_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src10_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_013 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_013_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_013_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_013_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_013_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_013_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src13_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src13_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src13_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src13_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src13_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src13_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src11_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src11_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src11_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src11_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src11_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src11_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src11_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src11_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src11_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src11_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src11_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src11_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_014 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_014_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_014_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_014_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_014_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_014_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src14_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src14_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src14_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src14_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src14_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src14_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src12_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src12_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src12_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src12_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src12_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src12_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src12_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src12_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src12_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src12_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src12_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src12_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_015 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_015_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_015_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_015_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_015_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src15_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src15_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src15_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src15_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src15_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src15_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src13_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src13_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src13_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src13_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src13_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src13_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src13_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src13_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src13_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src13_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src13_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src13_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_016 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_016_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_016_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_016_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_016_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_016_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src16_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src16_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src16_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src16_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src16_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src16_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src14_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src14_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src14_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src14_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src14_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src14_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src14_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src14_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src14_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src14_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src14_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src14_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_017 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_017_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_017_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_017_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_017_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_017_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src17_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src17_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src17_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src17_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src17_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src17_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src15_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src15_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src15_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src15_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src15_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src15_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src15_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src15_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src15_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src15_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src15_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src15_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_018 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_018_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_018_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_018_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_018_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_018_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src18_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src18_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src18_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src18_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src18_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src18_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src16_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src16_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src16_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src16_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src16_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src16_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src16_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src16_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src16_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src16_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src16_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src16_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_019 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_019_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_019_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_019_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_019_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_019_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src19_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src19_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src19_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src19_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src19_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src19_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src17_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src17_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src17_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src17_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src17_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src17_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src17_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src17_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src17_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src17_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src17_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src17_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_020 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_020_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_020_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_020_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_020_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_020_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src20_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src20_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src20_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src20_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src20_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src20_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src18_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src18_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src18_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src18_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src18_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src18_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src18_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src18_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src18_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src18_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src18_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src18_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_021 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_021_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_021_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_021_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_021_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_021_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src21_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src21_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src21_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src21_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src21_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src21_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src19_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src19_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src19_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src19_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src19_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src19_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src19_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src19_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src19_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src19_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src19_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src19_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_022 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_022_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_022_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_022_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_022_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_022_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src22_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src22_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src22_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src22_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src22_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src22_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src20_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src20_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src20_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src20_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src20_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src20_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src20_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src20_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src20_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src20_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src20_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src20_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_023 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_023_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_023_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_023_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_023_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_023_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src23_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src23_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src23_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src23_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src23_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src23_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src21_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src21_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src21_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src21_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src21_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src21_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src21_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src21_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src21_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src21_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src21_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src21_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_024 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_024_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_024_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_024_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_024_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_024_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src24_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src24_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src24_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src24_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src24_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src24_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src22_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src22_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src22_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src22_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src22_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src22_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src22_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src22_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src22_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src22_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src22_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src22_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_025 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_025_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_025_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_025_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_025_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_025_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src25_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src25_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src25_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src25_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src25_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src25_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src23_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src23_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src23_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src23_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src23_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src23_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src23_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src23_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src23_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src23_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src23_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src23_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_026 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_026_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_026_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_026_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_026_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_026_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src26_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src26_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src26_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src26_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src26_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src26_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src24_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src24_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src24_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src24_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src24_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src24_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src24_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src24_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src24_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src24_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src24_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src24_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_027 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_027_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_027_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_027_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_027_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_027_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src27_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src27_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src27_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src27_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src27_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src27_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src25_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src25_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src25_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src25_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src25_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src25_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src25_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src25_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src25_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src25_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src25_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src25_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_028 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_028_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_028_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_028_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_028_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_028_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_028_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src28_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src28_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src28_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src28_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src28_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src28_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src26_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src26_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src26_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src26_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src26_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src26_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src26_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src26_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src26_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src26_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src26_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src26_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_029 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_029_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_029_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_029_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_029_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_029_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_029_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src29_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src29_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src29_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src29_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src29_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src29_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src27_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src27_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src27_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src27_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src27_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src27_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src27_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src27_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src27_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src27_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src27_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src27_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_030 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_030_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_030_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_030_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_030_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_030_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_030_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src30_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src30_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src30_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src30_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src30_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src30_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src28_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src28_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src28_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src28_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src28_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src28_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src28_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src28_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src28_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src28_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src28_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src28_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_031 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_031_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_031_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_031_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_031_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_031_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_031_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src31_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src31_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src31_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src31_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src31_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src31_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src29_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src29_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src29_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src29_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src29_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src29_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src29_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src29_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src29_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src29_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src29_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src29_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_032 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_032_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_032_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_032_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_032_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_032_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_032_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src32_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src32_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src32_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src32_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src32_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src32_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src30_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src30_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src30_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src30_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src30_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src30_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src30_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src30_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src30_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src30_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src30_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src30_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_033 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_033_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_033_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_033_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_033_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_033_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_033_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_002_src33_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_002_src33_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_002_src33_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_002_src33_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_002_src33_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_002_src33_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_003_src31_ready),                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_003_src31_valid),                      //          .valid
		.sink1_channel       (cmd_xbar_demux_003_src31_channel),                    //          .channel
		.sink1_data          (cmd_xbar_demux_003_src31_data),                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_003_src31_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_003_src31_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_004_src31_ready),                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_004_src31_valid),                      //          .valid
		.sink2_channel       (cmd_xbar_demux_004_src31_channel),                    //          .channel
		.sink2_data          (cmd_xbar_demux_004_src31_data),                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_004_src31_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_004_src31_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                                 //      sink.ready
		.sink_channel       (id_router_src_channel),                               //          .channel
		.sink_data          (id_router_src_data),                                  //          .data
		.sink_startofpacket (id_router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                           //          .endofpacket
		.sink_valid         (id_router_src_valid),                                 //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                            //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                            //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (rsp_xbar_demux_src2_ready),                           //      src2.ready
		.src2_valid         (rsp_xbar_demux_src2_valid),                           //          .valid
		.src2_data          (rsp_xbar_demux_src2_data),                            //          .data
		.src2_channel       (rsp_xbar_demux_src2_channel),                         //          .channel
		.src2_startofpacket (rsp_xbar_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_src2_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                             //      sink.ready
		.sink_channel       (id_router_001_src_channel),                           //          .channel
		.sink_data          (id_router_001_src_data),                              //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_001_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_001_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_002 rsp_xbar_demux_002 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                             //      sink.ready
		.sink_channel       (id_router_002_src_channel),                           //          .channel
		.sink_data          (id_router_002_src_data),                              //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_003 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                             //      sink.ready
		.sink_channel       (id_router_003_src_channel),                           //          .channel
		.sink_data          (id_router_003_src_data),                              //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_003_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_003_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_003_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_003_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_003_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_003_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_004 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_004_src_ready),                             //      sink.ready
		.sink_channel       (id_router_004_src_channel),                           //          .channel
		.sink_data          (id_router_004_src_data),                              //          .data
		.sink_startofpacket (id_router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_004_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_004_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_004_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_004_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_004_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_004_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_004_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_005 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_005_src_ready),                             //      sink.ready
		.sink_channel       (id_router_005_src_channel),                           //          .channel
		.sink_data          (id_router_005_src_data),                              //          .data
		.sink_startofpacket (id_router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_005_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_005_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_005_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_005_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_005_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_005_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_005_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_006 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_006_src_ready),                             //      sink.ready
		.sink_channel       (id_router_006_src_channel),                           //          .channel
		.sink_data          (id_router_006_src_data),                              //          .data
		.sink_startofpacket (id_router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_006_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_006_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_006_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_006_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_006_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_006_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_006_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_006_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_006_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_006_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_006_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_006_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_006_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_007 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_007_src_ready),                             //      sink.ready
		.sink_channel       (id_router_007_src_channel),                           //          .channel
		.sink_data          (id_router_007_src_data),                              //          .data
		.sink_startofpacket (id_router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_007_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_007_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_007_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_007_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_007_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_007_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_007_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_007_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_007_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_007_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_007_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_007_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_007_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_008 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_008_src_ready),                             //      sink.ready
		.sink_channel       (id_router_008_src_channel),                           //          .channel
		.sink_data          (id_router_008_src_data),                              //          .data
		.sink_startofpacket (id_router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_008_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_008_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_008_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_008_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_008_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_008_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_008_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_008_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_008_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_008_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_008_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_008_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_008_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_009 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_009_src_ready),                             //      sink.ready
		.sink_channel       (id_router_009_src_channel),                           //          .channel
		.sink_data          (id_router_009_src_data),                              //          .data
		.sink_startofpacket (id_router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_009_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_009_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_009_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_009_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_009_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_009_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_009_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_009_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_009_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_009_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_009_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_009_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_009_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_009_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_010 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_010_src_ready),                             //      sink.ready
		.sink_channel       (id_router_010_src_channel),                           //          .channel
		.sink_data          (id_router_010_src_data),                              //          .data
		.sink_startofpacket (id_router_010_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_010_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_010_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_010_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_010_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_010_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_010_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_010_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_010_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_010_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_010_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_010_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_010_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_010_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_010_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_011 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_011_src_ready),                             //      sink.ready
		.sink_channel       (id_router_011_src_channel),                           //          .channel
		.sink_data          (id_router_011_src_data),                              //          .data
		.sink_startofpacket (id_router_011_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_011_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_011_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_011_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_011_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_011_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_011_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_011_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_011_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_011_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_011_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_011_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_011_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_011_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_011_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_011_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_012 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_012_src_ready),                             //      sink.ready
		.sink_channel       (id_router_012_src_channel),                           //          .channel
		.sink_data          (id_router_012_src_data),                              //          .data
		.sink_startofpacket (id_router_012_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_012_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_012_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_012_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_012_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_012_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_012_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_012_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_012_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_012_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_012_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_012_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_012_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_012_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_012_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_012_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_012_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_012_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_012_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_012_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_013 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_013_src_ready),                             //      sink.ready
		.sink_channel       (id_router_013_src_channel),                           //          .channel
		.sink_data          (id_router_013_src_data),                              //          .data
		.sink_startofpacket (id_router_013_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_013_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_013_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_013_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_013_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_013_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_013_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_013_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_013_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_013_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_013_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_013_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_013_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_013_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_013_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_013_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_013_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_013_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_013_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_013_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_014 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_014_src_ready),                             //      sink.ready
		.sink_channel       (id_router_014_src_channel),                           //          .channel
		.sink_data          (id_router_014_src_data),                              //          .data
		.sink_startofpacket (id_router_014_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_014_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_014_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_014_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_014_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_014_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_014_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_014_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_014_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_014_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_014_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_014_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_014_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_014_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_014_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_014_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_014_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_014_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_014_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_014_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_015 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_015_src_ready),                             //      sink.ready
		.sink_channel       (id_router_015_src_channel),                           //          .channel
		.sink_data          (id_router_015_src_data),                              //          .data
		.sink_startofpacket (id_router_015_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_015_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_015_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_015_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_015_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_015_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_015_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_015_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_015_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_015_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_015_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_015_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_015_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_015_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_015_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_015_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_015_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_015_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_015_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_015_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_015_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_016 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_016_src_ready),                             //      sink.ready
		.sink_channel       (id_router_016_src_channel),                           //          .channel
		.sink_data          (id_router_016_src_data),                              //          .data
		.sink_startofpacket (id_router_016_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_016_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_016_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_016_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_016_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_016_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_016_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_016_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_016_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_016_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_016_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_016_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_016_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_016_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_016_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_016_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_016_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_016_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_016_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_016_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_016_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_017 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_017_src_ready),                             //      sink.ready
		.sink_channel       (id_router_017_src_channel),                           //          .channel
		.sink_data          (id_router_017_src_data),                              //          .data
		.sink_startofpacket (id_router_017_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_017_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_017_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_017_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_017_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_017_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_017_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_017_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_017_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_017_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_017_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_017_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_017_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_017_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_017_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_017_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_017_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_017_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_017_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_017_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_017_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_018 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_018_src_ready),                             //      sink.ready
		.sink_channel       (id_router_018_src_channel),                           //          .channel
		.sink_data          (id_router_018_src_data),                              //          .data
		.sink_startofpacket (id_router_018_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_018_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_018_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_018_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_018_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_018_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_018_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_018_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_018_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_018_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_018_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_018_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_018_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_018_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_018_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_018_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_018_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_018_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_018_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_018_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_018_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_019 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_019_src_ready),                             //      sink.ready
		.sink_channel       (id_router_019_src_channel),                           //          .channel
		.sink_data          (id_router_019_src_data),                              //          .data
		.sink_startofpacket (id_router_019_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_019_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_019_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_019_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_019_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_019_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_019_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_019_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_019_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_019_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_019_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_019_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_019_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_019_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_019_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_019_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_019_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_019_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_019_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_019_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_019_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_020 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_020_src_ready),                             //      sink.ready
		.sink_channel       (id_router_020_src_channel),                           //          .channel
		.sink_data          (id_router_020_src_data),                              //          .data
		.sink_startofpacket (id_router_020_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_020_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_020_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_020_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_020_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_020_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_020_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_020_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_020_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_020_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_020_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_020_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_020_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_020_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_020_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_020_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_020_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_020_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_020_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_020_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_020_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_021 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_021_src_ready),                             //      sink.ready
		.sink_channel       (id_router_021_src_channel),                           //          .channel
		.sink_data          (id_router_021_src_data),                              //          .data
		.sink_startofpacket (id_router_021_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_021_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_021_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_021_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_021_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_021_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_021_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_021_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_021_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_021_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_021_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_021_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_021_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_021_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_021_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_021_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_021_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_021_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_021_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_021_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_021_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_022 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_022_src_ready),                             //      sink.ready
		.sink_channel       (id_router_022_src_channel),                           //          .channel
		.sink_data          (id_router_022_src_data),                              //          .data
		.sink_startofpacket (id_router_022_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_022_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_022_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_022_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_022_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_022_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_022_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_022_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_022_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_022_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_022_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_022_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_022_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_022_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_022_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_022_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_022_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_022_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_022_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_022_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_022_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_023 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_023_src_ready),                             //      sink.ready
		.sink_channel       (id_router_023_src_channel),                           //          .channel
		.sink_data          (id_router_023_src_data),                              //          .data
		.sink_startofpacket (id_router_023_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_023_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_023_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_023_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_023_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_023_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_023_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_023_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_023_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_023_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_023_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_023_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_023_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_023_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_023_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_023_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_023_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_023_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_023_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_023_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_023_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_024 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_024_src_ready),                             //      sink.ready
		.sink_channel       (id_router_024_src_channel),                           //          .channel
		.sink_data          (id_router_024_src_data),                              //          .data
		.sink_startofpacket (id_router_024_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_024_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_024_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_024_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_024_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_024_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_024_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_024_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_024_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_024_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_024_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_024_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_024_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_024_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_024_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_024_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_024_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_024_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_024_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_024_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_024_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_025 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_025_src_ready),                             //      sink.ready
		.sink_channel       (id_router_025_src_channel),                           //          .channel
		.sink_data          (id_router_025_src_data),                              //          .data
		.sink_startofpacket (id_router_025_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_025_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_025_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_025_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_025_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_025_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_025_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_025_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_025_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_025_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_025_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_025_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_025_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_025_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_025_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_025_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_025_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_025_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_025_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_025_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_025_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_026 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_026_src_ready),                             //      sink.ready
		.sink_channel       (id_router_026_src_channel),                           //          .channel
		.sink_data          (id_router_026_src_data),                              //          .data
		.sink_startofpacket (id_router_026_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_026_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_026_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_026_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_026_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_026_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_026_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_026_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_026_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_026_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_026_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_026_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_026_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_026_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_026_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_026_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_026_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_026_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_026_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_026_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_026_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_027 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_027_src_ready),                             //      sink.ready
		.sink_channel       (id_router_027_src_channel),                           //          .channel
		.sink_data          (id_router_027_src_data),                              //          .data
		.sink_startofpacket (id_router_027_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_027_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_027_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_027_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_027_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_027_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_027_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_027_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_027_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_027_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_027_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_027_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_027_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_027_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_027_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_027_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_027_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_027_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_027_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_027_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_027_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_028 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_028_src_ready),                             //      sink.ready
		.sink_channel       (id_router_028_src_channel),                           //          .channel
		.sink_data          (id_router_028_src_data),                              //          .data
		.sink_startofpacket (id_router_028_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_028_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_028_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_028_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_028_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_028_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_028_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_028_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_028_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_028_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_028_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_028_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_028_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_028_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_028_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_028_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_028_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_028_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_028_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_028_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_028_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_029 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_029_src_ready),                             //      sink.ready
		.sink_channel       (id_router_029_src_channel),                           //          .channel
		.sink_data          (id_router_029_src_data),                              //          .data
		.sink_startofpacket (id_router_029_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_029_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_029_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_029_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_029_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_029_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_029_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_029_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_029_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_029_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_029_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_029_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_029_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_029_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_029_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_029_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_029_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_029_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_029_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_029_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_029_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_030 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_030_src_ready),                             //      sink.ready
		.sink_channel       (id_router_030_src_channel),                           //          .channel
		.sink_data          (id_router_030_src_data),                              //          .data
		.sink_startofpacket (id_router_030_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_030_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_030_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_030_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_030_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_030_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_030_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_030_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_030_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_030_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_030_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_030_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_030_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_030_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_030_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_030_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_030_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_030_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_030_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_030_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_030_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_031 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_031_src_ready),                             //      sink.ready
		.sink_channel       (id_router_031_src_channel),                           //          .channel
		.sink_data          (id_router_031_src_data),                              //          .data
		.sink_startofpacket (id_router_031_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_031_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_031_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_031_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_031_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_031_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_031_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_031_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_031_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_031_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_031_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_031_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_031_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_031_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_031_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_031_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_031_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_031_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_031_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_031_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_031_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_032 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_032_src_ready),                             //      sink.ready
		.sink_channel       (id_router_032_src_channel),                           //          .channel
		.sink_data          (id_router_032_src_data),                              //          .data
		.sink_startofpacket (id_router_032_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_032_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_032_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_032_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_032_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_032_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_032_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_032_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_032_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_032_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_032_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_032_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_032_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_032_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_032_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_032_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_032_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_032_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_032_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_032_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_032_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_033 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_033_src_ready),                             //      sink.ready
		.sink_channel       (id_router_033_src_channel),                           //          .channel
		.sink_data          (id_router_033_src_data),                              //          .data
		.sink_startofpacket (id_router_033_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_033_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_033_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_033_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_033_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_033_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_033_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_033_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_033_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_xbar_demux_033_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_xbar_demux_033_src1_valid),                       //          .valid
		.src1_data          (rsp_xbar_demux_033_src1_data),                        //          .data
		.src1_channel       (rsp_xbar_demux_033_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_xbar_demux_033_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_033_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_xbar_demux_033_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_xbar_demux_033_src2_valid),                       //          .valid
		.src2_data          (rsp_xbar_demux_033_src2_data),                        //          .data
		.src2_channel       (rsp_xbar_demux_033_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_xbar_demux_033_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_033_src2_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                                           //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                                           //          .valid
		.src_data            (rsp_xbar_mux_src_data),                                            //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                                        //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                                      //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                                         //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                                       //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                                       //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                                        //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                                        //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                                      //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                                         //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_002 (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_002_src_ready),                          //       src.ready
		.src_valid            (rsp_xbar_mux_002_src_valid),                          //          .valid
		.src_data             (rsp_xbar_mux_002_src_data),                           //          .data
		.src_channel          (rsp_xbar_mux_002_src_channel),                        //          .channel
		.src_startofpacket    (rsp_xbar_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready          (width_adapter_001_src_ready),                         //     sink0.ready
		.sink0_valid          (width_adapter_001_src_valid),                         //          .valid
		.sink0_channel        (width_adapter_001_src_channel),                       //          .channel
		.sink0_data           (width_adapter_001_src_data),                          //          .data
		.sink0_startofpacket  (width_adapter_001_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (width_adapter_001_src_endofpacket),                   //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_xbar_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_xbar_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_xbar_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_xbar_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_xbar_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_xbar_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_xbar_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_xbar_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_xbar_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_xbar_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_xbar_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_xbar_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_xbar_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_012_src0_ready),                       //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_012_src0_valid),                       //          .valid
		.sink12_channel       (rsp_xbar_demux_012_src0_channel),                     //          .channel
		.sink12_data          (rsp_xbar_demux_012_src0_data),                        //          .data
		.sink12_startofpacket (rsp_xbar_demux_012_src0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_xbar_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_xbar_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_xbar_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_xbar_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_xbar_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_xbar_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_015_src0_ready),                       //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_015_src0_valid),                       //          .valid
		.sink15_channel       (rsp_xbar_demux_015_src0_channel),                     //          .channel
		.sink15_data          (rsp_xbar_demux_015_src0_data),                        //          .data
		.sink15_startofpacket (rsp_xbar_demux_015_src0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_015_src0_endofpacket),                 //          .endofpacket
		.sink16_ready         (rsp_xbar_demux_016_src0_ready),                       //    sink16.ready
		.sink16_valid         (rsp_xbar_demux_016_src0_valid),                       //          .valid
		.sink16_channel       (rsp_xbar_demux_016_src0_channel),                     //          .channel
		.sink16_data          (rsp_xbar_demux_016_src0_data),                        //          .data
		.sink16_startofpacket (rsp_xbar_demux_016_src0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_xbar_demux_016_src0_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_xbar_demux_017_src0_ready),                       //    sink17.ready
		.sink17_valid         (rsp_xbar_demux_017_src0_valid),                       //          .valid
		.sink17_channel       (rsp_xbar_demux_017_src0_channel),                     //          .channel
		.sink17_data          (rsp_xbar_demux_017_src0_data),                        //          .data
		.sink17_startofpacket (rsp_xbar_demux_017_src0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_xbar_demux_017_src0_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_xbar_demux_018_src0_ready),                       //    sink18.ready
		.sink18_valid         (rsp_xbar_demux_018_src0_valid),                       //          .valid
		.sink18_channel       (rsp_xbar_demux_018_src0_channel),                     //          .channel
		.sink18_data          (rsp_xbar_demux_018_src0_data),                        //          .data
		.sink18_startofpacket (rsp_xbar_demux_018_src0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_xbar_demux_018_src0_endofpacket),                 //          .endofpacket
		.sink19_ready         (rsp_xbar_demux_019_src0_ready),                       //    sink19.ready
		.sink19_valid         (rsp_xbar_demux_019_src0_valid),                       //          .valid
		.sink19_channel       (rsp_xbar_demux_019_src0_channel),                     //          .channel
		.sink19_data          (rsp_xbar_demux_019_src0_data),                        //          .data
		.sink19_startofpacket (rsp_xbar_demux_019_src0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (rsp_xbar_demux_019_src0_endofpacket),                 //          .endofpacket
		.sink20_ready         (rsp_xbar_demux_020_src0_ready),                       //    sink20.ready
		.sink20_valid         (rsp_xbar_demux_020_src0_valid),                       //          .valid
		.sink20_channel       (rsp_xbar_demux_020_src0_channel),                     //          .channel
		.sink20_data          (rsp_xbar_demux_020_src0_data),                        //          .data
		.sink20_startofpacket (rsp_xbar_demux_020_src0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (rsp_xbar_demux_020_src0_endofpacket),                 //          .endofpacket
		.sink21_ready         (rsp_xbar_demux_021_src0_ready),                       //    sink21.ready
		.sink21_valid         (rsp_xbar_demux_021_src0_valid),                       //          .valid
		.sink21_channel       (rsp_xbar_demux_021_src0_channel),                     //          .channel
		.sink21_data          (rsp_xbar_demux_021_src0_data),                        //          .data
		.sink21_startofpacket (rsp_xbar_demux_021_src0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (rsp_xbar_demux_021_src0_endofpacket),                 //          .endofpacket
		.sink22_ready         (rsp_xbar_demux_022_src0_ready),                       //    sink22.ready
		.sink22_valid         (rsp_xbar_demux_022_src0_valid),                       //          .valid
		.sink22_channel       (rsp_xbar_demux_022_src0_channel),                     //          .channel
		.sink22_data          (rsp_xbar_demux_022_src0_data),                        //          .data
		.sink22_startofpacket (rsp_xbar_demux_022_src0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (rsp_xbar_demux_022_src0_endofpacket),                 //          .endofpacket
		.sink23_ready         (rsp_xbar_demux_023_src0_ready),                       //    sink23.ready
		.sink23_valid         (rsp_xbar_demux_023_src0_valid),                       //          .valid
		.sink23_channel       (rsp_xbar_demux_023_src0_channel),                     //          .channel
		.sink23_data          (rsp_xbar_demux_023_src0_data),                        //          .data
		.sink23_startofpacket (rsp_xbar_demux_023_src0_startofpacket),               //          .startofpacket
		.sink23_endofpacket   (rsp_xbar_demux_023_src0_endofpacket),                 //          .endofpacket
		.sink24_ready         (rsp_xbar_demux_024_src0_ready),                       //    sink24.ready
		.sink24_valid         (rsp_xbar_demux_024_src0_valid),                       //          .valid
		.sink24_channel       (rsp_xbar_demux_024_src0_channel),                     //          .channel
		.sink24_data          (rsp_xbar_demux_024_src0_data),                        //          .data
		.sink24_startofpacket (rsp_xbar_demux_024_src0_startofpacket),               //          .startofpacket
		.sink24_endofpacket   (rsp_xbar_demux_024_src0_endofpacket),                 //          .endofpacket
		.sink25_ready         (rsp_xbar_demux_025_src0_ready),                       //    sink25.ready
		.sink25_valid         (rsp_xbar_demux_025_src0_valid),                       //          .valid
		.sink25_channel       (rsp_xbar_demux_025_src0_channel),                     //          .channel
		.sink25_data          (rsp_xbar_demux_025_src0_data),                        //          .data
		.sink25_startofpacket (rsp_xbar_demux_025_src0_startofpacket),               //          .startofpacket
		.sink25_endofpacket   (rsp_xbar_demux_025_src0_endofpacket),                 //          .endofpacket
		.sink26_ready         (rsp_xbar_demux_026_src0_ready),                       //    sink26.ready
		.sink26_valid         (rsp_xbar_demux_026_src0_valid),                       //          .valid
		.sink26_channel       (rsp_xbar_demux_026_src0_channel),                     //          .channel
		.sink26_data          (rsp_xbar_demux_026_src0_data),                        //          .data
		.sink26_startofpacket (rsp_xbar_demux_026_src0_startofpacket),               //          .startofpacket
		.sink26_endofpacket   (rsp_xbar_demux_026_src0_endofpacket),                 //          .endofpacket
		.sink27_ready         (rsp_xbar_demux_027_src0_ready),                       //    sink27.ready
		.sink27_valid         (rsp_xbar_demux_027_src0_valid),                       //          .valid
		.sink27_channel       (rsp_xbar_demux_027_src0_channel),                     //          .channel
		.sink27_data          (rsp_xbar_demux_027_src0_data),                        //          .data
		.sink27_startofpacket (rsp_xbar_demux_027_src0_startofpacket),               //          .startofpacket
		.sink27_endofpacket   (rsp_xbar_demux_027_src0_endofpacket),                 //          .endofpacket
		.sink28_ready         (rsp_xbar_demux_028_src0_ready),                       //    sink28.ready
		.sink28_valid         (rsp_xbar_demux_028_src0_valid),                       //          .valid
		.sink28_channel       (rsp_xbar_demux_028_src0_channel),                     //          .channel
		.sink28_data          (rsp_xbar_demux_028_src0_data),                        //          .data
		.sink28_startofpacket (rsp_xbar_demux_028_src0_startofpacket),               //          .startofpacket
		.sink28_endofpacket   (rsp_xbar_demux_028_src0_endofpacket),                 //          .endofpacket
		.sink29_ready         (rsp_xbar_demux_029_src0_ready),                       //    sink29.ready
		.sink29_valid         (rsp_xbar_demux_029_src0_valid),                       //          .valid
		.sink29_channel       (rsp_xbar_demux_029_src0_channel),                     //          .channel
		.sink29_data          (rsp_xbar_demux_029_src0_data),                        //          .data
		.sink29_startofpacket (rsp_xbar_demux_029_src0_startofpacket),               //          .startofpacket
		.sink29_endofpacket   (rsp_xbar_demux_029_src0_endofpacket),                 //          .endofpacket
		.sink30_ready         (rsp_xbar_demux_030_src0_ready),                       //    sink30.ready
		.sink30_valid         (rsp_xbar_demux_030_src0_valid),                       //          .valid
		.sink30_channel       (rsp_xbar_demux_030_src0_channel),                     //          .channel
		.sink30_data          (rsp_xbar_demux_030_src0_data),                        //          .data
		.sink30_startofpacket (rsp_xbar_demux_030_src0_startofpacket),               //          .startofpacket
		.sink30_endofpacket   (rsp_xbar_demux_030_src0_endofpacket),                 //          .endofpacket
		.sink31_ready         (rsp_xbar_demux_031_src0_ready),                       //    sink31.ready
		.sink31_valid         (rsp_xbar_demux_031_src0_valid),                       //          .valid
		.sink31_channel       (rsp_xbar_demux_031_src0_channel),                     //          .channel
		.sink31_data          (rsp_xbar_demux_031_src0_data),                        //          .data
		.sink31_startofpacket (rsp_xbar_demux_031_src0_startofpacket),               //          .startofpacket
		.sink31_endofpacket   (rsp_xbar_demux_031_src0_endofpacket),                 //          .endofpacket
		.sink32_ready         (rsp_xbar_demux_032_src0_ready),                       //    sink32.ready
		.sink32_valid         (rsp_xbar_demux_032_src0_valid),                       //          .valid
		.sink32_channel       (rsp_xbar_demux_032_src0_channel),                     //          .channel
		.sink32_data          (rsp_xbar_demux_032_src0_data),                        //          .data
		.sink32_startofpacket (rsp_xbar_demux_032_src0_startofpacket),               //          .startofpacket
		.sink32_endofpacket   (rsp_xbar_demux_032_src0_endofpacket),                 //          .endofpacket
		.sink33_ready         (rsp_xbar_demux_033_src0_ready),                       //    sink33.ready
		.sink33_valid         (rsp_xbar_demux_033_src0_valid),                       //          .valid
		.sink33_channel       (rsp_xbar_demux_033_src0_channel),                     //          .channel
		.sink33_data          (rsp_xbar_demux_033_src0_data),                        //          .data
		.sink33_startofpacket (rsp_xbar_demux_033_src0_startofpacket),               //          .startofpacket
		.sink33_endofpacket   (rsp_xbar_demux_033_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_mux_003 rsp_xbar_mux_003 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_003_src_ready),                                       //       src.ready
		.src_valid            (rsp_xbar_mux_003_src_valid),                                       //          .valid
		.src_data             (rsp_xbar_mux_003_src_data),                                        //          .data
		.src_channel          (rsp_xbar_mux_003_src_channel),                                     //          .channel
		.src_startofpacket    (rsp_xbar_mux_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_001_src1_ready),                                    //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_001_src1_valid),                                    //          .valid
		.sink0_channel        (rsp_xbar_demux_001_src1_channel),                                  //          .channel
		.sink0_data           (rsp_xbar_demux_001_src1_data),                                     //          .data
		.sink0_startofpacket  (rsp_xbar_demux_001_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_001_src1_endofpacket),                              //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_003_src1_ready),                                    //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_003_src1_valid),                                    //          .valid
		.sink1_channel        (rsp_xbar_demux_003_src1_channel),                                  //          .channel
		.sink1_data           (rsp_xbar_demux_003_src1_data),                                     //          .data
		.sink1_startofpacket  (rsp_xbar_demux_003_src1_startofpacket),                            //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_003_src1_endofpacket),                              //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_004_src1_ready),                                    //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_004_src1_valid),                                    //          .valid
		.sink2_channel        (rsp_xbar_demux_004_src1_channel),                                  //          .channel
		.sink2_data           (rsp_xbar_demux_004_src1_data),                                     //          .data
		.sink2_startofpacket  (rsp_xbar_demux_004_src1_startofpacket),                            //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_004_src1_endofpacket),                              //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_005_src1_ready),                                    //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_005_src1_valid),                                    //          .valid
		.sink3_channel        (rsp_xbar_demux_005_src1_channel),                                  //          .channel
		.sink3_data           (rsp_xbar_demux_005_src1_data),                                     //          .data
		.sink3_startofpacket  (rsp_xbar_demux_005_src1_startofpacket),                            //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_005_src1_endofpacket),                              //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_006_src1_ready),                                    //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_006_src1_valid),                                    //          .valid
		.sink4_channel        (rsp_xbar_demux_006_src1_channel),                                  //          .channel
		.sink4_data           (rsp_xbar_demux_006_src1_data),                                     //          .data
		.sink4_startofpacket  (rsp_xbar_demux_006_src1_startofpacket),                            //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_006_src1_endofpacket),                              //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_007_src1_ready),                                    //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_007_src1_valid),                                    //          .valid
		.sink5_channel        (rsp_xbar_demux_007_src1_channel),                                  //          .channel
		.sink5_data           (rsp_xbar_demux_007_src1_data),                                     //          .data
		.sink5_startofpacket  (rsp_xbar_demux_007_src1_startofpacket),                            //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_007_src1_endofpacket),                              //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_008_src1_ready),                                    //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_008_src1_valid),                                    //          .valid
		.sink6_channel        (rsp_xbar_demux_008_src1_channel),                                  //          .channel
		.sink6_data           (rsp_xbar_demux_008_src1_data),                                     //          .data
		.sink6_startofpacket  (rsp_xbar_demux_008_src1_startofpacket),                            //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_008_src1_endofpacket),                              //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_009_src1_ready),                                    //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_009_src1_valid),                                    //          .valid
		.sink7_channel        (rsp_xbar_demux_009_src1_channel),                                  //          .channel
		.sink7_data           (rsp_xbar_demux_009_src1_data),                                     //          .data
		.sink7_startofpacket  (rsp_xbar_demux_009_src1_startofpacket),                            //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_009_src1_endofpacket),                              //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_010_src1_ready),                                    //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_010_src1_valid),                                    //          .valid
		.sink8_channel        (rsp_xbar_demux_010_src1_channel),                                  //          .channel
		.sink8_data           (rsp_xbar_demux_010_src1_data),                                     //          .data
		.sink8_startofpacket  (rsp_xbar_demux_010_src1_startofpacket),                            //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_010_src1_endofpacket),                              //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_011_src1_ready),                                    //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_011_src1_valid),                                    //          .valid
		.sink9_channel        (rsp_xbar_demux_011_src1_channel),                                  //          .channel
		.sink9_data           (rsp_xbar_demux_011_src1_data),                                     //          .data
		.sink9_startofpacket  (rsp_xbar_demux_011_src1_startofpacket),                            //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_011_src1_endofpacket),                              //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_012_src1_ready),                                    //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_012_src1_valid),                                    //          .valid
		.sink10_channel       (rsp_xbar_demux_012_src1_channel),                                  //          .channel
		.sink10_data          (rsp_xbar_demux_012_src1_data),                                     //          .data
		.sink10_startofpacket (rsp_xbar_demux_012_src1_startofpacket),                            //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_012_src1_endofpacket),                              //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_013_src1_ready),                                    //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_013_src1_valid),                                    //          .valid
		.sink11_channel       (rsp_xbar_demux_013_src1_channel),                                  //          .channel
		.sink11_data          (rsp_xbar_demux_013_src1_data),                                     //          .data
		.sink11_startofpacket (rsp_xbar_demux_013_src1_startofpacket),                            //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_013_src1_endofpacket),                              //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_014_src1_ready),                                    //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_014_src1_valid),                                    //          .valid
		.sink12_channel       (rsp_xbar_demux_014_src1_channel),                                  //          .channel
		.sink12_data          (rsp_xbar_demux_014_src1_data),                                     //          .data
		.sink12_startofpacket (rsp_xbar_demux_014_src1_startofpacket),                            //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_014_src1_endofpacket),                              //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_015_src1_ready),                                    //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_015_src1_valid),                                    //          .valid
		.sink13_channel       (rsp_xbar_demux_015_src1_channel),                                  //          .channel
		.sink13_data          (rsp_xbar_demux_015_src1_data),                                     //          .data
		.sink13_startofpacket (rsp_xbar_demux_015_src1_startofpacket),                            //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_015_src1_endofpacket),                              //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_016_src1_ready),                                    //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_016_src1_valid),                                    //          .valid
		.sink14_channel       (rsp_xbar_demux_016_src1_channel),                                  //          .channel
		.sink14_data          (rsp_xbar_demux_016_src1_data),                                     //          .data
		.sink14_startofpacket (rsp_xbar_demux_016_src1_startofpacket),                            //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_016_src1_endofpacket),                              //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_017_src1_ready),                                    //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_017_src1_valid),                                    //          .valid
		.sink15_channel       (rsp_xbar_demux_017_src1_channel),                                  //          .channel
		.sink15_data          (rsp_xbar_demux_017_src1_data),                                     //          .data
		.sink15_startofpacket (rsp_xbar_demux_017_src1_startofpacket),                            //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_017_src1_endofpacket),                              //          .endofpacket
		.sink16_ready         (rsp_xbar_demux_018_src1_ready),                                    //    sink16.ready
		.sink16_valid         (rsp_xbar_demux_018_src1_valid),                                    //          .valid
		.sink16_channel       (rsp_xbar_demux_018_src1_channel),                                  //          .channel
		.sink16_data          (rsp_xbar_demux_018_src1_data),                                     //          .data
		.sink16_startofpacket (rsp_xbar_demux_018_src1_startofpacket),                            //          .startofpacket
		.sink16_endofpacket   (rsp_xbar_demux_018_src1_endofpacket),                              //          .endofpacket
		.sink17_ready         (rsp_xbar_demux_019_src1_ready),                                    //    sink17.ready
		.sink17_valid         (rsp_xbar_demux_019_src1_valid),                                    //          .valid
		.sink17_channel       (rsp_xbar_demux_019_src1_channel),                                  //          .channel
		.sink17_data          (rsp_xbar_demux_019_src1_data),                                     //          .data
		.sink17_startofpacket (rsp_xbar_demux_019_src1_startofpacket),                            //          .startofpacket
		.sink17_endofpacket   (rsp_xbar_demux_019_src1_endofpacket),                              //          .endofpacket
		.sink18_ready         (rsp_xbar_demux_020_src1_ready),                                    //    sink18.ready
		.sink18_valid         (rsp_xbar_demux_020_src1_valid),                                    //          .valid
		.sink18_channel       (rsp_xbar_demux_020_src1_channel),                                  //          .channel
		.sink18_data          (rsp_xbar_demux_020_src1_data),                                     //          .data
		.sink18_startofpacket (rsp_xbar_demux_020_src1_startofpacket),                            //          .startofpacket
		.sink18_endofpacket   (rsp_xbar_demux_020_src1_endofpacket),                              //          .endofpacket
		.sink19_ready         (rsp_xbar_demux_021_src1_ready),                                    //    sink19.ready
		.sink19_valid         (rsp_xbar_demux_021_src1_valid),                                    //          .valid
		.sink19_channel       (rsp_xbar_demux_021_src1_channel),                                  //          .channel
		.sink19_data          (rsp_xbar_demux_021_src1_data),                                     //          .data
		.sink19_startofpacket (rsp_xbar_demux_021_src1_startofpacket),                            //          .startofpacket
		.sink19_endofpacket   (rsp_xbar_demux_021_src1_endofpacket),                              //          .endofpacket
		.sink20_ready         (rsp_xbar_demux_022_src1_ready),                                    //    sink20.ready
		.sink20_valid         (rsp_xbar_demux_022_src1_valid),                                    //          .valid
		.sink20_channel       (rsp_xbar_demux_022_src1_channel),                                  //          .channel
		.sink20_data          (rsp_xbar_demux_022_src1_data),                                     //          .data
		.sink20_startofpacket (rsp_xbar_demux_022_src1_startofpacket),                            //          .startofpacket
		.sink20_endofpacket   (rsp_xbar_demux_022_src1_endofpacket),                              //          .endofpacket
		.sink21_ready         (rsp_xbar_demux_023_src1_ready),                                    //    sink21.ready
		.sink21_valid         (rsp_xbar_demux_023_src1_valid),                                    //          .valid
		.sink21_channel       (rsp_xbar_demux_023_src1_channel),                                  //          .channel
		.sink21_data          (rsp_xbar_demux_023_src1_data),                                     //          .data
		.sink21_startofpacket (rsp_xbar_demux_023_src1_startofpacket),                            //          .startofpacket
		.sink21_endofpacket   (rsp_xbar_demux_023_src1_endofpacket),                              //          .endofpacket
		.sink22_ready         (rsp_xbar_demux_024_src1_ready),                                    //    sink22.ready
		.sink22_valid         (rsp_xbar_demux_024_src1_valid),                                    //          .valid
		.sink22_channel       (rsp_xbar_demux_024_src1_channel),                                  //          .channel
		.sink22_data          (rsp_xbar_demux_024_src1_data),                                     //          .data
		.sink22_startofpacket (rsp_xbar_demux_024_src1_startofpacket),                            //          .startofpacket
		.sink22_endofpacket   (rsp_xbar_demux_024_src1_endofpacket),                              //          .endofpacket
		.sink23_ready         (rsp_xbar_demux_025_src1_ready),                                    //    sink23.ready
		.sink23_valid         (rsp_xbar_demux_025_src1_valid),                                    //          .valid
		.sink23_channel       (rsp_xbar_demux_025_src1_channel),                                  //          .channel
		.sink23_data          (rsp_xbar_demux_025_src1_data),                                     //          .data
		.sink23_startofpacket (rsp_xbar_demux_025_src1_startofpacket),                            //          .startofpacket
		.sink23_endofpacket   (rsp_xbar_demux_025_src1_endofpacket),                              //          .endofpacket
		.sink24_ready         (rsp_xbar_demux_026_src1_ready),                                    //    sink24.ready
		.sink24_valid         (rsp_xbar_demux_026_src1_valid),                                    //          .valid
		.sink24_channel       (rsp_xbar_demux_026_src1_channel),                                  //          .channel
		.sink24_data          (rsp_xbar_demux_026_src1_data),                                     //          .data
		.sink24_startofpacket (rsp_xbar_demux_026_src1_startofpacket),                            //          .startofpacket
		.sink24_endofpacket   (rsp_xbar_demux_026_src1_endofpacket),                              //          .endofpacket
		.sink25_ready         (rsp_xbar_demux_027_src1_ready),                                    //    sink25.ready
		.sink25_valid         (rsp_xbar_demux_027_src1_valid),                                    //          .valid
		.sink25_channel       (rsp_xbar_demux_027_src1_channel),                                  //          .channel
		.sink25_data          (rsp_xbar_demux_027_src1_data),                                     //          .data
		.sink25_startofpacket (rsp_xbar_demux_027_src1_startofpacket),                            //          .startofpacket
		.sink25_endofpacket   (rsp_xbar_demux_027_src1_endofpacket),                              //          .endofpacket
		.sink26_ready         (rsp_xbar_demux_028_src1_ready),                                    //    sink26.ready
		.sink26_valid         (rsp_xbar_demux_028_src1_valid),                                    //          .valid
		.sink26_channel       (rsp_xbar_demux_028_src1_channel),                                  //          .channel
		.sink26_data          (rsp_xbar_demux_028_src1_data),                                     //          .data
		.sink26_startofpacket (rsp_xbar_demux_028_src1_startofpacket),                            //          .startofpacket
		.sink26_endofpacket   (rsp_xbar_demux_028_src1_endofpacket),                              //          .endofpacket
		.sink27_ready         (rsp_xbar_demux_029_src1_ready),                                    //    sink27.ready
		.sink27_valid         (rsp_xbar_demux_029_src1_valid),                                    //          .valid
		.sink27_channel       (rsp_xbar_demux_029_src1_channel),                                  //          .channel
		.sink27_data          (rsp_xbar_demux_029_src1_data),                                     //          .data
		.sink27_startofpacket (rsp_xbar_demux_029_src1_startofpacket),                            //          .startofpacket
		.sink27_endofpacket   (rsp_xbar_demux_029_src1_endofpacket),                              //          .endofpacket
		.sink28_ready         (rsp_xbar_demux_030_src1_ready),                                    //    sink28.ready
		.sink28_valid         (rsp_xbar_demux_030_src1_valid),                                    //          .valid
		.sink28_channel       (rsp_xbar_demux_030_src1_channel),                                  //          .channel
		.sink28_data          (rsp_xbar_demux_030_src1_data),                                     //          .data
		.sink28_startofpacket (rsp_xbar_demux_030_src1_startofpacket),                            //          .startofpacket
		.sink28_endofpacket   (rsp_xbar_demux_030_src1_endofpacket),                              //          .endofpacket
		.sink29_ready         (rsp_xbar_demux_031_src1_ready),                                    //    sink29.ready
		.sink29_valid         (rsp_xbar_demux_031_src1_valid),                                    //          .valid
		.sink29_channel       (rsp_xbar_demux_031_src1_channel),                                  //          .channel
		.sink29_data          (rsp_xbar_demux_031_src1_data),                                     //          .data
		.sink29_startofpacket (rsp_xbar_demux_031_src1_startofpacket),                            //          .startofpacket
		.sink29_endofpacket   (rsp_xbar_demux_031_src1_endofpacket),                              //          .endofpacket
		.sink30_ready         (rsp_xbar_demux_032_src1_ready),                                    //    sink30.ready
		.sink30_valid         (rsp_xbar_demux_032_src1_valid),                                    //          .valid
		.sink30_channel       (rsp_xbar_demux_032_src1_channel),                                  //          .channel
		.sink30_data          (rsp_xbar_demux_032_src1_data),                                     //          .data
		.sink30_startofpacket (rsp_xbar_demux_032_src1_startofpacket),                            //          .startofpacket
		.sink30_endofpacket   (rsp_xbar_demux_032_src1_endofpacket),                              //          .endofpacket
		.sink31_ready         (rsp_xbar_demux_033_src1_ready),                                    //    sink31.ready
		.sink31_valid         (rsp_xbar_demux_033_src1_valid),                                    //          .valid
		.sink31_channel       (rsp_xbar_demux_033_src1_channel),                                  //          .channel
		.sink31_data          (rsp_xbar_demux_033_src1_data),                                     //          .data
		.sink31_startofpacket (rsp_xbar_demux_033_src1_startofpacket),                            //          .startofpacket
		.sink31_endofpacket   (rsp_xbar_demux_033_src1_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_xbar_mux_003 rsp_xbar_mux_004 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_004_src_ready),                                       //       src.ready
		.src_valid            (rsp_xbar_mux_004_src_valid),                                       //          .valid
		.src_data             (rsp_xbar_mux_004_src_data),                                        //          .data
		.src_channel          (rsp_xbar_mux_004_src_channel),                                     //          .channel
		.src_startofpacket    (rsp_xbar_mux_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_004_src_endofpacket),                                 //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_001_src2_ready),                                    //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_001_src2_valid),                                    //          .valid
		.sink0_channel        (rsp_xbar_demux_001_src2_channel),                                  //          .channel
		.sink0_data           (rsp_xbar_demux_001_src2_data),                                     //          .data
		.sink0_startofpacket  (rsp_xbar_demux_001_src2_startofpacket),                            //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_001_src2_endofpacket),                              //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_003_src2_ready),                                    //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_003_src2_valid),                                    //          .valid
		.sink1_channel        (rsp_xbar_demux_003_src2_channel),                                  //          .channel
		.sink1_data           (rsp_xbar_demux_003_src2_data),                                     //          .data
		.sink1_startofpacket  (rsp_xbar_demux_003_src2_startofpacket),                            //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_003_src2_endofpacket),                              //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_004_src2_ready),                                    //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_004_src2_valid),                                    //          .valid
		.sink2_channel        (rsp_xbar_demux_004_src2_channel),                                  //          .channel
		.sink2_data           (rsp_xbar_demux_004_src2_data),                                     //          .data
		.sink2_startofpacket  (rsp_xbar_demux_004_src2_startofpacket),                            //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_004_src2_endofpacket),                              //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_005_src2_ready),                                    //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_005_src2_valid),                                    //          .valid
		.sink3_channel        (rsp_xbar_demux_005_src2_channel),                                  //          .channel
		.sink3_data           (rsp_xbar_demux_005_src2_data),                                     //          .data
		.sink3_startofpacket  (rsp_xbar_demux_005_src2_startofpacket),                            //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_005_src2_endofpacket),                              //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_006_src2_ready),                                    //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_006_src2_valid),                                    //          .valid
		.sink4_channel        (rsp_xbar_demux_006_src2_channel),                                  //          .channel
		.sink4_data           (rsp_xbar_demux_006_src2_data),                                     //          .data
		.sink4_startofpacket  (rsp_xbar_demux_006_src2_startofpacket),                            //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_006_src2_endofpacket),                              //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_007_src2_ready),                                    //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_007_src2_valid),                                    //          .valid
		.sink5_channel        (rsp_xbar_demux_007_src2_channel),                                  //          .channel
		.sink5_data           (rsp_xbar_demux_007_src2_data),                                     //          .data
		.sink5_startofpacket  (rsp_xbar_demux_007_src2_startofpacket),                            //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_007_src2_endofpacket),                              //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_008_src2_ready),                                    //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_008_src2_valid),                                    //          .valid
		.sink6_channel        (rsp_xbar_demux_008_src2_channel),                                  //          .channel
		.sink6_data           (rsp_xbar_demux_008_src2_data),                                     //          .data
		.sink6_startofpacket  (rsp_xbar_demux_008_src2_startofpacket),                            //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_008_src2_endofpacket),                              //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_009_src2_ready),                                    //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_009_src2_valid),                                    //          .valid
		.sink7_channel        (rsp_xbar_demux_009_src2_channel),                                  //          .channel
		.sink7_data           (rsp_xbar_demux_009_src2_data),                                     //          .data
		.sink7_startofpacket  (rsp_xbar_demux_009_src2_startofpacket),                            //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_009_src2_endofpacket),                              //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_010_src2_ready),                                    //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_010_src2_valid),                                    //          .valid
		.sink8_channel        (rsp_xbar_demux_010_src2_channel),                                  //          .channel
		.sink8_data           (rsp_xbar_demux_010_src2_data),                                     //          .data
		.sink8_startofpacket  (rsp_xbar_demux_010_src2_startofpacket),                            //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_010_src2_endofpacket),                              //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_011_src2_ready),                                    //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_011_src2_valid),                                    //          .valid
		.sink9_channel        (rsp_xbar_demux_011_src2_channel),                                  //          .channel
		.sink9_data           (rsp_xbar_demux_011_src2_data),                                     //          .data
		.sink9_startofpacket  (rsp_xbar_demux_011_src2_startofpacket),                            //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_011_src2_endofpacket),                              //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_012_src2_ready),                                    //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_012_src2_valid),                                    //          .valid
		.sink10_channel       (rsp_xbar_demux_012_src2_channel),                                  //          .channel
		.sink10_data          (rsp_xbar_demux_012_src2_data),                                     //          .data
		.sink10_startofpacket (rsp_xbar_demux_012_src2_startofpacket),                            //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_012_src2_endofpacket),                              //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_013_src2_ready),                                    //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_013_src2_valid),                                    //          .valid
		.sink11_channel       (rsp_xbar_demux_013_src2_channel),                                  //          .channel
		.sink11_data          (rsp_xbar_demux_013_src2_data),                                     //          .data
		.sink11_startofpacket (rsp_xbar_demux_013_src2_startofpacket),                            //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_013_src2_endofpacket),                              //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_014_src2_ready),                                    //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_014_src2_valid),                                    //          .valid
		.sink12_channel       (rsp_xbar_demux_014_src2_channel),                                  //          .channel
		.sink12_data          (rsp_xbar_demux_014_src2_data),                                     //          .data
		.sink12_startofpacket (rsp_xbar_demux_014_src2_startofpacket),                            //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_014_src2_endofpacket),                              //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_015_src2_ready),                                    //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_015_src2_valid),                                    //          .valid
		.sink13_channel       (rsp_xbar_demux_015_src2_channel),                                  //          .channel
		.sink13_data          (rsp_xbar_demux_015_src2_data),                                     //          .data
		.sink13_startofpacket (rsp_xbar_demux_015_src2_startofpacket),                            //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_015_src2_endofpacket),                              //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_016_src2_ready),                                    //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_016_src2_valid),                                    //          .valid
		.sink14_channel       (rsp_xbar_demux_016_src2_channel),                                  //          .channel
		.sink14_data          (rsp_xbar_demux_016_src2_data),                                     //          .data
		.sink14_startofpacket (rsp_xbar_demux_016_src2_startofpacket),                            //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_016_src2_endofpacket),                              //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_017_src2_ready),                                    //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_017_src2_valid),                                    //          .valid
		.sink15_channel       (rsp_xbar_demux_017_src2_channel),                                  //          .channel
		.sink15_data          (rsp_xbar_demux_017_src2_data),                                     //          .data
		.sink15_startofpacket (rsp_xbar_demux_017_src2_startofpacket),                            //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_017_src2_endofpacket),                              //          .endofpacket
		.sink16_ready         (rsp_xbar_demux_018_src2_ready),                                    //    sink16.ready
		.sink16_valid         (rsp_xbar_demux_018_src2_valid),                                    //          .valid
		.sink16_channel       (rsp_xbar_demux_018_src2_channel),                                  //          .channel
		.sink16_data          (rsp_xbar_demux_018_src2_data),                                     //          .data
		.sink16_startofpacket (rsp_xbar_demux_018_src2_startofpacket),                            //          .startofpacket
		.sink16_endofpacket   (rsp_xbar_demux_018_src2_endofpacket),                              //          .endofpacket
		.sink17_ready         (rsp_xbar_demux_019_src2_ready),                                    //    sink17.ready
		.sink17_valid         (rsp_xbar_demux_019_src2_valid),                                    //          .valid
		.sink17_channel       (rsp_xbar_demux_019_src2_channel),                                  //          .channel
		.sink17_data          (rsp_xbar_demux_019_src2_data),                                     //          .data
		.sink17_startofpacket (rsp_xbar_demux_019_src2_startofpacket),                            //          .startofpacket
		.sink17_endofpacket   (rsp_xbar_demux_019_src2_endofpacket),                              //          .endofpacket
		.sink18_ready         (rsp_xbar_demux_020_src2_ready),                                    //    sink18.ready
		.sink18_valid         (rsp_xbar_demux_020_src2_valid),                                    //          .valid
		.sink18_channel       (rsp_xbar_demux_020_src2_channel),                                  //          .channel
		.sink18_data          (rsp_xbar_demux_020_src2_data),                                     //          .data
		.sink18_startofpacket (rsp_xbar_demux_020_src2_startofpacket),                            //          .startofpacket
		.sink18_endofpacket   (rsp_xbar_demux_020_src2_endofpacket),                              //          .endofpacket
		.sink19_ready         (rsp_xbar_demux_021_src2_ready),                                    //    sink19.ready
		.sink19_valid         (rsp_xbar_demux_021_src2_valid),                                    //          .valid
		.sink19_channel       (rsp_xbar_demux_021_src2_channel),                                  //          .channel
		.sink19_data          (rsp_xbar_demux_021_src2_data),                                     //          .data
		.sink19_startofpacket (rsp_xbar_demux_021_src2_startofpacket),                            //          .startofpacket
		.sink19_endofpacket   (rsp_xbar_demux_021_src2_endofpacket),                              //          .endofpacket
		.sink20_ready         (rsp_xbar_demux_022_src2_ready),                                    //    sink20.ready
		.sink20_valid         (rsp_xbar_demux_022_src2_valid),                                    //          .valid
		.sink20_channel       (rsp_xbar_demux_022_src2_channel),                                  //          .channel
		.sink20_data          (rsp_xbar_demux_022_src2_data),                                     //          .data
		.sink20_startofpacket (rsp_xbar_demux_022_src2_startofpacket),                            //          .startofpacket
		.sink20_endofpacket   (rsp_xbar_demux_022_src2_endofpacket),                              //          .endofpacket
		.sink21_ready         (rsp_xbar_demux_023_src2_ready),                                    //    sink21.ready
		.sink21_valid         (rsp_xbar_demux_023_src2_valid),                                    //          .valid
		.sink21_channel       (rsp_xbar_demux_023_src2_channel),                                  //          .channel
		.sink21_data          (rsp_xbar_demux_023_src2_data),                                     //          .data
		.sink21_startofpacket (rsp_xbar_demux_023_src2_startofpacket),                            //          .startofpacket
		.sink21_endofpacket   (rsp_xbar_demux_023_src2_endofpacket),                              //          .endofpacket
		.sink22_ready         (rsp_xbar_demux_024_src2_ready),                                    //    sink22.ready
		.sink22_valid         (rsp_xbar_demux_024_src2_valid),                                    //          .valid
		.sink22_channel       (rsp_xbar_demux_024_src2_channel),                                  //          .channel
		.sink22_data          (rsp_xbar_demux_024_src2_data),                                     //          .data
		.sink22_startofpacket (rsp_xbar_demux_024_src2_startofpacket),                            //          .startofpacket
		.sink22_endofpacket   (rsp_xbar_demux_024_src2_endofpacket),                              //          .endofpacket
		.sink23_ready         (rsp_xbar_demux_025_src2_ready),                                    //    sink23.ready
		.sink23_valid         (rsp_xbar_demux_025_src2_valid),                                    //          .valid
		.sink23_channel       (rsp_xbar_demux_025_src2_channel),                                  //          .channel
		.sink23_data          (rsp_xbar_demux_025_src2_data),                                     //          .data
		.sink23_startofpacket (rsp_xbar_demux_025_src2_startofpacket),                            //          .startofpacket
		.sink23_endofpacket   (rsp_xbar_demux_025_src2_endofpacket),                              //          .endofpacket
		.sink24_ready         (rsp_xbar_demux_026_src2_ready),                                    //    sink24.ready
		.sink24_valid         (rsp_xbar_demux_026_src2_valid),                                    //          .valid
		.sink24_channel       (rsp_xbar_demux_026_src2_channel),                                  //          .channel
		.sink24_data          (rsp_xbar_demux_026_src2_data),                                     //          .data
		.sink24_startofpacket (rsp_xbar_demux_026_src2_startofpacket),                            //          .startofpacket
		.sink24_endofpacket   (rsp_xbar_demux_026_src2_endofpacket),                              //          .endofpacket
		.sink25_ready         (rsp_xbar_demux_027_src2_ready),                                    //    sink25.ready
		.sink25_valid         (rsp_xbar_demux_027_src2_valid),                                    //          .valid
		.sink25_channel       (rsp_xbar_demux_027_src2_channel),                                  //          .channel
		.sink25_data          (rsp_xbar_demux_027_src2_data),                                     //          .data
		.sink25_startofpacket (rsp_xbar_demux_027_src2_startofpacket),                            //          .startofpacket
		.sink25_endofpacket   (rsp_xbar_demux_027_src2_endofpacket),                              //          .endofpacket
		.sink26_ready         (rsp_xbar_demux_028_src2_ready),                                    //    sink26.ready
		.sink26_valid         (rsp_xbar_demux_028_src2_valid),                                    //          .valid
		.sink26_channel       (rsp_xbar_demux_028_src2_channel),                                  //          .channel
		.sink26_data          (rsp_xbar_demux_028_src2_data),                                     //          .data
		.sink26_startofpacket (rsp_xbar_demux_028_src2_startofpacket),                            //          .startofpacket
		.sink26_endofpacket   (rsp_xbar_demux_028_src2_endofpacket),                              //          .endofpacket
		.sink27_ready         (rsp_xbar_demux_029_src2_ready),                                    //    sink27.ready
		.sink27_valid         (rsp_xbar_demux_029_src2_valid),                                    //          .valid
		.sink27_channel       (rsp_xbar_demux_029_src2_channel),                                  //          .channel
		.sink27_data          (rsp_xbar_demux_029_src2_data),                                     //          .data
		.sink27_startofpacket (rsp_xbar_demux_029_src2_startofpacket),                            //          .startofpacket
		.sink27_endofpacket   (rsp_xbar_demux_029_src2_endofpacket),                              //          .endofpacket
		.sink28_ready         (rsp_xbar_demux_030_src2_ready),                                    //    sink28.ready
		.sink28_valid         (rsp_xbar_demux_030_src2_valid),                                    //          .valid
		.sink28_channel       (rsp_xbar_demux_030_src2_channel),                                  //          .channel
		.sink28_data          (rsp_xbar_demux_030_src2_data),                                     //          .data
		.sink28_startofpacket (rsp_xbar_demux_030_src2_startofpacket),                            //          .startofpacket
		.sink28_endofpacket   (rsp_xbar_demux_030_src2_endofpacket),                              //          .endofpacket
		.sink29_ready         (rsp_xbar_demux_031_src2_ready),                                    //    sink29.ready
		.sink29_valid         (rsp_xbar_demux_031_src2_valid),                                    //          .valid
		.sink29_channel       (rsp_xbar_demux_031_src2_channel),                                  //          .channel
		.sink29_data          (rsp_xbar_demux_031_src2_data),                                     //          .data
		.sink29_startofpacket (rsp_xbar_demux_031_src2_startofpacket),                            //          .startofpacket
		.sink29_endofpacket   (rsp_xbar_demux_031_src2_endofpacket),                              //          .endofpacket
		.sink30_ready         (rsp_xbar_demux_032_src2_ready),                                    //    sink30.ready
		.sink30_valid         (rsp_xbar_demux_032_src2_valid),                                    //          .valid
		.sink30_channel       (rsp_xbar_demux_032_src2_channel),                                  //          .channel
		.sink30_data          (rsp_xbar_demux_032_src2_data),                                     //          .data
		.sink30_startofpacket (rsp_xbar_demux_032_src2_startofpacket),                            //          .startofpacket
		.sink30_endofpacket   (rsp_xbar_demux_032_src2_endofpacket),                              //          .endofpacket
		.sink31_ready         (rsp_xbar_demux_033_src2_ready),                                    //    sink31.ready
		.sink31_valid         (rsp_xbar_demux_033_src2_valid),                                    //          .valid
		.sink31_channel       (rsp_xbar_demux_033_src2_channel),                                  //          .channel
		.sink31_data          (rsp_xbar_demux_033_src2_data),                                     //          .data
		.sink31_startofpacket (rsp_xbar_demux_033_src2_startofpacket),                            //          .startofpacket
		.sink31_endofpacket   (rsp_xbar_demux_033_src2_endofpacket)                               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (131),
		.IN_PKT_RESPONSE_STATUS_L      (130),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (132),
		.IN_PKT_ORI_BURST_SIZE_H       (134),
		.IN_ST_DATA_W                  (135),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (167),
		.OUT_PKT_RESPONSE_STATUS_L     (166),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (168),
		.OUT_PKT_ORI_BURST_SIZE_H      (170),
		.OUT_ST_DATA_W                 (171),
		.ST_CHANNEL_W                  (34),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_demux_002_src0_valid),                       //      sink.valid
		.in_channel           (cmd_xbar_demux_002_src0_channel),                     //          .channel
		.in_startofpacket     (cmd_xbar_demux_002_src0_startofpacket),               //          .startofpacket
		.in_endofpacket       (cmd_xbar_demux_002_src0_endofpacket),                 //          .endofpacket
		.in_ready             (cmd_xbar_demux_002_src0_ready),                       //          .ready
		.in_data              (cmd_xbar_demux_002_src0_data),                        //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                       //       src.endofpacket
		.out_data             (width_adapter_src_data),                              //          .data
		.out_channel          (width_adapter_src_channel),                           //          .channel
		.out_valid            (width_adapter_src_valid),                             //          .valid
		.out_ready            (width_adapter_src_ready),                             //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                     //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (167),
		.IN_PKT_RESPONSE_STATUS_L      (166),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (168),
		.IN_PKT_ORI_BURST_SIZE_H       (170),
		.IN_ST_DATA_W                  (171),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (131),
		.OUT_PKT_RESPONSE_STATUS_L     (130),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (132),
		.OUT_PKT_ORI_BURST_SIZE_H      (134),
		.OUT_ST_DATA_W                 (135),
		.ST_CHANNEL_W                  (34),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_demux_src2_valid),                           //      sink.valid
		.in_channel           (rsp_xbar_demux_src2_channel),                         //          .channel
		.in_startofpacket     (rsp_xbar_demux_src2_startofpacket),                   //          .startofpacket
		.in_endofpacket       (rsp_xbar_demux_src2_endofpacket),                     //          .endofpacket
		.in_ready             (rsp_xbar_demux_src2_ready),                           //          .ready
		.in_data              (rsp_xbar_demux_src2_data),                            //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                   //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                          //          .data
		.out_channel          (width_adapter_001_src_channel),                       //          .channel
		.out_valid            (width_adapter_001_src_valid),                         //          .valid
		.out_ready            (width_adapter_001_src_ready),                         //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),                 //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

endmodule
