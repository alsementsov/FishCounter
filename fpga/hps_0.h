#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0xffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'pio_led', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_LED_'.
 * The prefix is the slave descriptor.
 */
#define PIO_LED_COMPONENT_TYPE altera_avalon_pio
#define PIO_LED_COMPONENT_NAME pio_led
#define PIO_LED_BASE 0x0
#define PIO_LED_SPAN 32
#define PIO_LED_END 0x1f
#define PIO_LED_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_LED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_LED_CAPTURE 0
#define PIO_LED_DATA_WIDTH 10
#define PIO_LED_DO_TEST_BENCH_WIRING 0
#define PIO_LED_DRIVEN_SIM_VALUE 0
#define PIO_LED_EDGE_TYPE NONE
#define PIO_LED_FREQ 56000000
#define PIO_LED_HAS_IN 0
#define PIO_LED_HAS_OUT 1
#define PIO_LED_HAS_TRI 0
#define PIO_LED_IRQ_TYPE NONE
#define PIO_LED_RESET_VALUE 0

/*
 * Macros for device 'n_frame', class 'altera_avalon_pio'
 * The macros are prefixed with 'N_FRAME_'.
 * The prefix is the slave descriptor.
 */
#define N_FRAME_COMPONENT_TYPE altera_avalon_pio
#define N_FRAME_COMPONENT_NAME n_frame
#define N_FRAME_BASE 0x10
#define N_FRAME_SPAN 32
#define N_FRAME_END 0x2f
#define N_FRAME_BIT_CLEARING_EDGE_REGISTER 0
#define N_FRAME_BIT_MODIFYING_OUTPUT_REGISTER 0
#define N_FRAME_CAPTURE 0
#define N_FRAME_DATA_WIDTH 32
#define N_FRAME_DO_TEST_BENCH_WIRING 0
#define N_FRAME_DRIVEN_SIM_VALUE 0
#define N_FRAME_EDGE_TYPE NONE
#define N_FRAME_FREQ 56000000
#define N_FRAME_HAS_IN 1
#define N_FRAME_HAS_OUT 0
#define N_FRAME_HAS_TRI 0
#define N_FRAME_IRQ_TYPE NONE
#define N_FRAME_RESET_VALUE 0

/*
 * Macros for device 'x_max', class 'altera_avalon_pio'
 * The macros are prefixed with 'X_MAX_'.
 * The prefix is the slave descriptor.
 */
#define X_MAX_COMPONENT_TYPE altera_avalon_pio
#define X_MAX_COMPONENT_NAME x_max
#define X_MAX_BASE 0x20
#define X_MAX_SPAN 32
#define X_MAX_END 0x3f
#define X_MAX_BIT_CLEARING_EDGE_REGISTER 0
#define X_MAX_BIT_MODIFYING_OUTPUT_REGISTER 0
#define X_MAX_CAPTURE 0
#define X_MAX_DATA_WIDTH 16
#define X_MAX_DO_TEST_BENCH_WIRING 0
#define X_MAX_DRIVEN_SIM_VALUE 0
#define X_MAX_EDGE_TYPE NONE
#define X_MAX_FREQ 56000000
#define X_MAX_HAS_IN 1
#define X_MAX_HAS_OUT 0
#define X_MAX_HAS_TRI 0
#define X_MAX_IRQ_TYPE NONE
#define X_MAX_RESET_VALUE 0

/*
 * Macros for device 'x_min', class 'altera_avalon_pio'
 * The macros are prefixed with 'X_MIN_'.
 * The prefix is the slave descriptor.
 */
#define X_MIN_COMPONENT_TYPE altera_avalon_pio
#define X_MIN_COMPONENT_NAME x_min
#define X_MIN_BASE 0x30
#define X_MIN_SPAN 32
#define X_MIN_END 0x4f
#define X_MIN_BIT_CLEARING_EDGE_REGISTER 0
#define X_MIN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define X_MIN_CAPTURE 0
#define X_MIN_DATA_WIDTH 16
#define X_MIN_DO_TEST_BENCH_WIRING 0
#define X_MIN_DRIVEN_SIM_VALUE 0
#define X_MIN_EDGE_TYPE NONE
#define X_MIN_FREQ 56000000
#define X_MIN_HAS_IN 1
#define X_MIN_HAS_OUT 0
#define X_MIN_HAS_TRI 0
#define X_MIN_IRQ_TYPE NONE
#define X_MIN_RESET_VALUE 0

/*
 * Macros for device 'req_res', class 'altera_avalon_pio'
 * The macros are prefixed with 'REQ_RES_'.
 * The prefix is the slave descriptor.
 */
#define REQ_RES_COMPONENT_TYPE altera_avalon_pio
#define REQ_RES_COMPONENT_NAME req_res
#define REQ_RES_BASE 0x40
#define REQ_RES_SPAN 32
#define REQ_RES_END 0x5f
#define REQ_RES_BIT_CLEARING_EDGE_REGISTER 0
#define REQ_RES_BIT_MODIFYING_OUTPUT_REGISTER 0
#define REQ_RES_CAPTURE 0
#define REQ_RES_DATA_WIDTH 1
#define REQ_RES_DO_TEST_BENCH_WIRING 0
#define REQ_RES_DRIVEN_SIM_VALUE 0
#define REQ_RES_EDGE_TYPE NONE
#define REQ_RES_FREQ 56000000
#define REQ_RES_HAS_IN 0
#define REQ_RES_HAS_OUT 1
#define REQ_RES_HAS_TRI 0
#define REQ_RES_IRQ_TYPE NONE
#define REQ_RES_RESET_VALUE 0

/*
 * Macros for device 'addr_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'ADDR_OUT_'.
 * The prefix is the slave descriptor.
 */
#define ADDR_OUT_COMPONENT_TYPE altera_avalon_pio
#define ADDR_OUT_COMPONENT_NAME addr_out
#define ADDR_OUT_BASE 0x50
#define ADDR_OUT_SPAN 32
#define ADDR_OUT_END 0x6f
#define ADDR_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define ADDR_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ADDR_OUT_CAPTURE 0
#define ADDR_OUT_DATA_WIDTH 8
#define ADDR_OUT_DO_TEST_BENCH_WIRING 0
#define ADDR_OUT_DRIVEN_SIM_VALUE 0
#define ADDR_OUT_EDGE_TYPE NONE
#define ADDR_OUT_FREQ 56000000
#define ADDR_OUT_HAS_IN 0
#define ADDR_OUT_HAS_OUT 1
#define ADDR_OUT_HAS_TRI 0
#define ADDR_OUT_IRQ_TYPE NONE
#define ADDR_OUT_RESET_VALUE 0

/*
 * Macros for device 'box_addr', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_ADDR_'.
 * The prefix is the slave descriptor.
 */
#define BOX_ADDR_COMPONENT_TYPE altera_avalon_pio
#define BOX_ADDR_COMPONENT_NAME box_addr
#define BOX_ADDR_BASE 0x60
#define BOX_ADDR_SPAN 32
#define BOX_ADDR_END 0x7f
#define BOX_ADDR_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_ADDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_ADDR_CAPTURE 0
#define BOX_ADDR_DATA_WIDTH 8
#define BOX_ADDR_DO_TEST_BENCH_WIRING 0
#define BOX_ADDR_DRIVEN_SIM_VALUE 0
#define BOX_ADDR_EDGE_TYPE NONE
#define BOX_ADDR_FREQ 56000000
#define BOX_ADDR_HAS_IN 1
#define BOX_ADDR_HAS_OUT 0
#define BOX_ADDR_HAS_TRI 0
#define BOX_ADDR_IRQ_TYPE NONE
#define BOX_ADDR_RESET_VALUE 0

/*
 * Macros for device 'box_n', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_N_'.
 * The prefix is the slave descriptor.
 */
#define BOX_N_COMPONENT_TYPE altera_avalon_pio
#define BOX_N_COMPONENT_NAME box_n
#define BOX_N_BASE 0x70
#define BOX_N_SPAN 32
#define BOX_N_END 0x8f
#define BOX_N_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_N_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_N_CAPTURE 0
#define BOX_N_DATA_WIDTH 8
#define BOX_N_DO_TEST_BENCH_WIRING 0
#define BOX_N_DRIVEN_SIM_VALUE 0
#define BOX_N_EDGE_TYPE NONE
#define BOX_N_FREQ 56000000
#define BOX_N_HAS_IN 1
#define BOX_N_HAS_OUT 0
#define BOX_N_HAS_TRI 0
#define BOX_N_IRQ_TYPE NONE
#define BOX_N_RESET_VALUE 0

/*
 * Macros for device 'box_req', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_REQ_'.
 * The prefix is the slave descriptor.
 */
#define BOX_REQ_COMPONENT_TYPE altera_avalon_pio
#define BOX_REQ_COMPONENT_NAME box_req
#define BOX_REQ_BASE 0x80
#define BOX_REQ_SPAN 32
#define BOX_REQ_END 0x9f
#define BOX_REQ_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_REQ_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_REQ_CAPTURE 1
#define BOX_REQ_DATA_WIDTH 1
#define BOX_REQ_DO_TEST_BENCH_WIRING 0
#define BOX_REQ_DRIVEN_SIM_VALUE 0
#define BOX_REQ_EDGE_TYPE RISING
#define BOX_REQ_FREQ 56000000
#define BOX_REQ_HAS_IN 1
#define BOX_REQ_HAS_OUT 0
#define BOX_REQ_HAS_TRI 0
#define BOX_REQ_IRQ_TYPE NONE
#define BOX_REQ_RESET_VALUE 0

/*
 * Macros for device 'n_pix', class 'altera_avalon_pio'
 * The macros are prefixed with 'N_PIX_'.
 * The prefix is the slave descriptor.
 */
#define N_PIX_COMPONENT_TYPE altera_avalon_pio
#define N_PIX_COMPONENT_NAME n_pix
#define N_PIX_BASE 0x90
#define N_PIX_SPAN 32
#define N_PIX_END 0xaf
#define N_PIX_BIT_CLEARING_EDGE_REGISTER 0
#define N_PIX_BIT_MODIFYING_OUTPUT_REGISTER 0
#define N_PIX_CAPTURE 1
#define N_PIX_DATA_WIDTH 32
#define N_PIX_DO_TEST_BENCH_WIRING 0
#define N_PIX_DRIVEN_SIM_VALUE 0
#define N_PIX_EDGE_TYPE ANY
#define N_PIX_FREQ 56000000
#define N_PIX_HAS_IN 1
#define N_PIX_HAS_OUT 0
#define N_PIX_HAS_TRI 0
#define N_PIX_IRQ_TYPE NONE
#define N_PIX_RESET_VALUE 0

/*
 * Macros for device 'box_yn', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_YN_'.
 * The prefix is the slave descriptor.
 */
#define BOX_YN_COMPONENT_TYPE altera_avalon_pio
#define BOX_YN_COMPONENT_NAME box_yn
#define BOX_YN_BASE 0xa0
#define BOX_YN_SPAN 32
#define BOX_YN_END 0xbf
#define BOX_YN_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_YN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_YN_CAPTURE 1
#define BOX_YN_DATA_WIDTH 16
#define BOX_YN_DO_TEST_BENCH_WIRING 0
#define BOX_YN_DRIVEN_SIM_VALUE 0
#define BOX_YN_EDGE_TYPE ANY
#define BOX_YN_FREQ 56000000
#define BOX_YN_HAS_IN 1
#define BOX_YN_HAS_OUT 0
#define BOX_YN_HAS_TRI 0
#define BOX_YN_IRQ_TYPE NONE
#define BOX_YN_RESET_VALUE 0

/*
 * Macros for device 'box_y0', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_Y0_'.
 * The prefix is the slave descriptor.
 */
#define BOX_Y0_COMPONENT_TYPE altera_avalon_pio
#define BOX_Y0_COMPONENT_NAME box_y0
#define BOX_Y0_BASE 0xb0
#define BOX_Y0_SPAN 32
#define BOX_Y0_END 0xcf
#define BOX_Y0_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_Y0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_Y0_CAPTURE 1
#define BOX_Y0_DATA_WIDTH 16
#define BOX_Y0_DO_TEST_BENCH_WIRING 0
#define BOX_Y0_DRIVEN_SIM_VALUE 0
#define BOX_Y0_EDGE_TYPE ANY
#define BOX_Y0_FREQ 56000000
#define BOX_Y0_HAS_IN 1
#define BOX_Y0_HAS_OUT 0
#define BOX_Y0_HAS_TRI 0
#define BOX_Y0_IRQ_TYPE NONE
#define BOX_Y0_RESET_VALUE 0

/*
 * Macros for device 'test_16t_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEST_16T_0_'.
 * The prefix is the slave descriptor.
 */
#define TEST_16T_0_COMPONENT_TYPE altera_avalon_pio
#define TEST_16T_0_COMPONENT_NAME test_16t_0
#define TEST_16T_0_BASE 0xc0
#define TEST_16T_0_SPAN 32
#define TEST_16T_0_END 0xdf
#define TEST_16T_0_BIT_CLEARING_EDGE_REGISTER 0
#define TEST_16T_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEST_16T_0_CAPTURE 0
#define TEST_16T_0_DATA_WIDTH 16
#define TEST_16T_0_DO_TEST_BENCH_WIRING 0
#define TEST_16T_0_DRIVEN_SIM_VALUE 0
#define TEST_16T_0_EDGE_TYPE NONE
#define TEST_16T_0_FREQ 56000000
#define TEST_16T_0_HAS_IN 0
#define TEST_16T_0_HAS_OUT 1
#define TEST_16T_0_HAS_TRI 0
#define TEST_16T_0_IRQ_TYPE NONE
#define TEST_16T_0_RESET_VALUE 0

/*
 * Macros for device 'test_32t_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEST_32T_0_'.
 * The prefix is the slave descriptor.
 */
#define TEST_32T_0_COMPONENT_TYPE altera_avalon_pio
#define TEST_32T_0_COMPONENT_NAME test_32t_0
#define TEST_32T_0_BASE 0xd0
#define TEST_32T_0_SPAN 32
#define TEST_32T_0_END 0xef
#define TEST_32T_0_BIT_CLEARING_EDGE_REGISTER 0
#define TEST_32T_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEST_32T_0_CAPTURE 0
#define TEST_32T_0_DATA_WIDTH 32
#define TEST_32T_0_DO_TEST_BENCH_WIRING 0
#define TEST_32T_0_DRIVEN_SIM_VALUE 0
#define TEST_32T_0_EDGE_TYPE NONE
#define TEST_32T_0_FREQ 56000000
#define TEST_32T_0_HAS_IN 0
#define TEST_32T_0_HAS_OUT 1
#define TEST_32T_0_HAS_TRI 0
#define TEST_32T_0_IRQ_TYPE NONE
#define TEST_32T_0_RESET_VALUE 0

/*
 * Macros for device 'n_fish', class 'altera_avalon_pio'
 * The macros are prefixed with 'N_FISH_'.
 * The prefix is the slave descriptor.
 */
#define N_FISH_COMPONENT_TYPE altera_avalon_pio
#define N_FISH_COMPONENT_NAME n_fish
#define N_FISH_BASE 0xe0
#define N_FISH_SPAN 32
#define N_FISH_END 0xff
#define N_FISH_BIT_CLEARING_EDGE_REGISTER 0
#define N_FISH_BIT_MODIFYING_OUTPUT_REGISTER 0
#define N_FISH_CAPTURE 0
#define N_FISH_DATA_WIDTH 16
#define N_FISH_DO_TEST_BENCH_WIRING 0
#define N_FISH_DRIVEN_SIM_VALUE 0
#define N_FISH_EDGE_TYPE NONE
#define N_FISH_FREQ 56000000
#define N_FISH_HAS_IN 0
#define N_FISH_HAS_OUT 1
#define N_FISH_HAS_TRI 0
#define N_FISH_IRQ_TYPE NONE
#define N_FISH_RESET_VALUE 0

/*
 * Macros for device 'box_xn', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_XN_'.
 * The prefix is the slave descriptor.
 */
#define BOX_XN_COMPONENT_TYPE altera_avalon_pio
#define BOX_XN_COMPONENT_NAME box_xn
#define BOX_XN_BASE 0xf0
#define BOX_XN_SPAN 32
#define BOX_XN_END 0x10f
#define BOX_XN_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_XN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_XN_CAPTURE 1
#define BOX_XN_DATA_WIDTH 16
#define BOX_XN_DO_TEST_BENCH_WIRING 0
#define BOX_XN_DRIVEN_SIM_VALUE 0
#define BOX_XN_EDGE_TYPE ANY
#define BOX_XN_FREQ 56000000
#define BOX_XN_HAS_IN 1
#define BOX_XN_HAS_OUT 0
#define BOX_XN_HAS_TRI 0
#define BOX_XN_IRQ_TYPE NONE
#define BOX_XN_RESET_VALUE 0

/*
 * Macros for device 'box_x0', class 'altera_avalon_pio'
 * The macros are prefixed with 'BOX_X0_'.
 * The prefix is the slave descriptor.
 */
#define BOX_X0_COMPONENT_TYPE altera_avalon_pio
#define BOX_X0_COMPONENT_NAME box_x0
#define BOX_X0_BASE 0x100
#define BOX_X0_SPAN 32
#define BOX_X0_END 0x11f
#define BOX_X0_BIT_CLEARING_EDGE_REGISTER 0
#define BOX_X0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BOX_X0_CAPTURE 1
#define BOX_X0_DATA_WIDTH 16
#define BOX_X0_DO_TEST_BENCH_WIRING 0
#define BOX_X0_DRIVEN_SIM_VALUE 0
#define BOX_X0_EDGE_TYPE ANY
#define BOX_X0_FREQ 56000000
#define BOX_X0_HAS_IN 1
#define BOX_X0_HAS_OUT 0
#define BOX_X0_HAS_TRI 0
#define BOX_X0_IRQ_TYPE NONE
#define BOX_X0_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1406012496

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 16
#define JTAG_UART_END 0x2000f
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
